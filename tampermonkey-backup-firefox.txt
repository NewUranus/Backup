{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"懒人专用，全网VIP视频免费破解去广告、全网音乐直接下载、百度网盘直接下载等多合一版。长期更新，放心使用。","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"run_at":null,"override":{"use_includes":[],"orig_includes":["*://pan.baidu.com/disk/home*","*://yun.baidu.com/disk/home*","*://pan.baidu.com/s*","*://yun.baidu.com/s*","*://pan.baidu.com/share/*","*://yun.baidu.com/share/*","*.youku.com/v*","*m.youku.com/*","*.iqiyi.com/v_*","*.iqiyi.com/w_*","*.iqiyi.com/a_*","*.iq.com/play/*","*.le.com/ptv/vplay/*","*v.qq.com/x*","*v.qq.com/p*","*v.qq.com/cover*","*v.qq.com/tv/*","*.tudou.com/listplay/*","*.tudou.com/albumplay/*","*.tudou.com/programs/view/*","*.tudou.com/v*","*.mgtv.com/b/*","*tv.sohu.com/*","*film.sohu.com/album/*","*.bilibili.com/video/*","*.bilibili.com/anime/*","*.bilibili.com/bangumi/play/*","*.bilibili.com/s/*","*.pptv.com/show/*","*.wasu.cn/Play/show*","*v.yinyuetai.com/video/*","*v.yinyuetai.com/playlist/*","*://item.taobao.com/*","*://*detail.tmall.com/*","*://*detail.tmall.hk/*","*://*item.jd.com/*","*://*.yiyaojd.com/*","*://*.liangxinyao.com/*","*music.163.com/*","*://y.qq.com/*","*://i.y.qq.com/*","*://*.kugou.com/*","*://*kuwo.cn/*","*://*.xiami.com/*","*://music.taihe.com/song*","*://*.1ting.com/player*","*://music.migu.cn/v*","*://*.lizhi.fm/*","*://*.qingting.fm/*","*://*.ximalaya.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["*://*.eggvod.cn/*"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-idle","orig_noframes":null,"orig_connects":["d.pcs.baidu.com","baidu.com","baidupcs.com","baiduyun.wiki","localhost"]}},"storage":{"ts":1638677976631,"data":{"setting_rpc_domain":"shttp://localhost","setting_rpc_port":"s16800","setting_rpc_token":"s","setting_rpc_dir":"sD:","setting_theme_color":"s#09AAFF","setting_init_code":"s80149","scode":"s"}},"enabled":true,"position":1,"file_url":"https://greasyfork.org/scripts/370634-%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8-%E5%85%A8%E7%BD%91vip%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A-%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD-%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88-%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0-%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8/code/%E6%87%92%E4%BA%BA%E4%B8%93%E7%94%A8%EF%BC%8C%E5%85%A8%E7%BD%91VIP%E8%A7%86%E9%A2%91%E5%85%8D%E8%B4%B9%E7%A0%B4%E8%A7%A3%E5%8E%BB%E5%B9%BF%E5%91%8A%E3%80%81%E5%85%A8%E7%BD%91%E9%9F%B3%E4%B9%90%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E3%80%81%E7%99%BE%E5%BA%A6%E7%BD%91%E7%9B%98%E7%9B%B4%E6%8E%A5%E4%B8%8B%E8%BD%BD%E7%AD%89%E5%A4%9A%E5%90%88%E4%B8%80%E7%89%88%E3%80%82%E9%95%BF%E6%9C%9F%E6%9B%B4%E6%96%B0%EF%BC%8C%E6%94%BE%E5%BF%83%E4%BD%BF%E7%94%A8%E3%80%82.user.js","uuid":"320463eb-0ec2-4a7e-b549-b54052c26af8","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICDmh5LkurrkuJPnlKjvvIzlhajnvZFWSVDop4bpopHlhY3otLnnoLTop6Pljrvlub/lkYrjgIHlhajnvZHpn7PkuZDnm7TmjqXkuIvovb3jgIHnmb7luqbnvZHnm5jnm7TmjqXkuIvovb3nrYnlpJrlkIjkuIDniYjjgILplb/mnJ/mm7TmlrDvvIzmlL7lv4Pkvb/nlKjjgIIKLy8gQG5hbWVzcGFjZSAJIGxhbmhhaGEKLy8gQHZlcnNpb24gICAgICAzLjcuMgovLyBAZGVzY3JpcHRpb24gIOiHqueUqOe7hOWQiOWei+WkmuWKn+iDveiEmuacrO+8jOaXoOmcgOWFs+azqOWFrOS8l+WPt++8jOmbhuWQiOS6huS8mOmFt+OAgeeIseWlh+iJuuOAgeiFvuiur+OAgeiKkuaenOetieWFqOe9kVZJUOinhumikeWFjei0ueegtOino+WOu+W5v+WRiu+8jOe9keaYk+S6kemfs+S5kOOAgVFR6Z+z5LmQ44CB6YW354uX44CB6YW35oiR44CB6Jm+57Gz44CB6Jy76JyTRk3jgIHojZTmnp1GTeOAgeWWnOmprOaLiembheetiee9keermemfs+S5kOWSjOacieWjsOS5pumfs+mikeWFjeWuouaIt+err+S4i+i9ve+8jOeZvuW6pue9keebmOebtOaOpeS4i+i9ve+8jOS8mOaDoOWIuOafpeivouetieWHoOS4quiHquW3seW4uOeUqOeahOWKn+iDveOAggovLyBAYXV0aG9yICAgICAgIGxhbmhhaGHvvIxzeWh5ejE5OTDvvIx6aG1haQovLyBAaWNvbiAgICAgICAgIGRhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0dnb0FBQUFOU1VoRVVnQUFBR1FBQUFCa0NBWUFBQUJ3NHBWVUFBQVE4RWxFUVZSNFh1MWRDWFFVUlJyK2FwSVFUMXdRdzZFWUJjU0VyQ2dLQ29Rb3dvb2NMaXJLZW9Bb0xENXgyWUR1K2hUQ1BuZGRKZUM1Q3Q2Z0lCdGRsVU1ReEFQRTk1Z01La2Job1dHQ0tNZ3BzUGpVb0VzSWtOcjNUYWRoTXVtZXFlNnVuZ1JJOFNCQVY5ZnhmL1dmOVZlWGdJY2lwY3p5OFBwUi9hb1Fvc3pOQklXVGw2U1V2UUFNQUhBSmdGYllzU3NkSDVlMHdpY2x3TXBWd0s3ZFRwbzdldXBtTkFPNmRRYTZkREordHNqWUNHQUxnR0lBN3dvaCtGT3BLQU1pOSsyN0dZMGFEY1NXN2QzeHl1c3RFQ3BKdzJiMjJWQnFVU0N6TlpCM3lUNk11R2tybW1jc1IyWGxJcEdlUGsrRlVrcUF5RzgyL0JtbnQ3d1d6ODY4QUMrOTJsU2w0WVk2QU5JYkFiZmNzQXQzRGl2QnR1L25pM1p0cGlXaVMxeEE1QTgvZE1lODl3YWc3Vmw5OGVEajUyTG5yaE1UTmRqdzNJSUN6VThyeC8zM3JNV0dEWXN4c085aWNkcHBuOXZSeVJZUXVYdjNJS1NrRE1Da3FUMng4SVBUSVpEZVFHd1BGSkN5QWdPdi9BNzM1Uy9GZnJGUU5QL05CMWF0V1FJaWY5NDdCUHNyQm1QVVg3dWo5T3VtRUVqeE1KU0dWMDBLU0hrQU9lMTM0c1VuUGtKcXlselJ1UEg4V09MVUFrVHUyM2NqRHNvaEdKR2ZpelhoSmczVTlJRUNIVHZzeEt5blAwUmFXcEVRNHQzb0htb0FJcVc4RE1CSTVFL29oMlhMVC9WaEtBMU5taFM0dXY5MkZJNS9DOEFNSWNRaG5WSVRrTTgrZndqck45MkVCeDgvQzBJRUdxam5Jd1VvdmlZV2hIRlc2NW5pd281UG1EMGRBa1R1K3JrdlVnL2VoVDZETDhYLzloM3Y0MUFhbWpZcGNNTHg1WGovelNVUThrblJ0R25FZVR3TXlNTDMvNEhQVncvRkcyKzNnUkJLL2tsU0tkdjVBdUQwRnNEcExRMlBtTVg4ZCt4QUdEVmdLVnNQYlBzZUtQc0dLRm1kMU9FcWRTYmxRZHd3OEN0Y2RORTA4ZnZmUFhNSUVMbGp4M2tRcWVOdzVmWDlVSG1nZmlqeVZpMkFYajJBaXpzQnZTOVZtbC9DU2dUcXMxWEFzcUFCVW4wb2pkSyt4L3R2ekVOS1lKSm8xbXhiaEJOazRXT0RJRlBHb21oT1Z3alJxTTdHZWZKSkJnakQvZ0JrbmVQdk1NZzVzOTRFbGhVRDIzZjQyMWU4MWlWK3dZaWJQNEtRajRoN1JoY2JnSFRyUHhwVnVCM2xQNTlYSjhxYzNIQk5QK0NXd1VEams1TlBuTGNXQTgvT3FCdGdKQTZnVmNzU3BNaW54UWR6WGpVQTZaQlhnS3FxWVJBNEY4bFVIK1NJUHcwM09LSStsTG9BUmxaVkFTaEZWV0M2V0ZjOHhRQWtKL2VmT0lnaEVLTE5ZVFh2TTRXdTdndU1HK09jSXloZXR1MHdkSUZaS0g0SXJzbGQ1RGdxZnlwOS90MUpLZDhEL0h1MndUSEpLRklDRXVzUUNNd1NhNE9GMVNLcjMxVDh1R2NRaEd6bE80ZVFRQk1MREdXdFVxaDhTWHhUSWUvNVJlV3R3M1VJRksweTlzZWZXZTNVM3FlRk5xSFFmK1V2eVJGeUExTHdxaWdOM1c4QTB1K21JbXphM0E4US9vYldlK1VCRThjbjVnb1NmZjY3d1B6RitnbkNCVEY2Qk5BN3orQ3FST1cyTVRXNU1WRjlwODhKaU1CV25IRGNIRkd5OUc0RGtMd0I3MkQzanowaEFpYzRiVSs1L24zNWlYVUZ4ZEV6THh0ZytGMElCa0VoT1BIRUdrVll0LzcramtaaU41bzJXU1JDQzRjYmdIUzgvRU5VVnVZaUlQd0pzVDgwSHJnMnpxVElFUVNDc3JzdUNxMDdBbVBITVRsNS9vNUt5ajFJVFZrbXZseCtqUUZJZHZmbGtYMXlFZERyZzNDQ1V3cmo2d3M2YVFXRmdGUGRvSnRFNUpMeFl3Q0sxZWhDcnIxaXNPN2VhclluNVY1QUJrVjR4WlhWZ1BUNEdFQm5DS1JxN1huR0ZIc3dDTURrS2NrUlQwNG1SVUFJREFINmJEVlFNTkYvLzBSaUg0QlBSTGk0cHdGSVZ2ZVZnTGdRQWFGdkl5cWVtS0xsTkdHaWZvWHRoUEQxcWE2VSt3SHhxUWdYNTVraTYzTWdjTDYyblVINkY1VExWb1ZnM0paZjl5TEtEU0EwbWU4YlkzRDloOHVCQ1pQMHpJUGVPbEFpd3NYZFRFQldRYUlqQWdIdmV5QmsrYW1GUng4WW5ORUhieG9PcDFub3ExdzN3ZzIwTmQrcGtnY0IrWVVvVzNGeGRlZ2tkelVrdk1leEtIZm52bXp0Wnh6Sm5FSHlrVHZtV25qdjlPaHBJWG9wRWdSa3RRaUhPcHNjc2daQURvUkhEckZUNGtjNkdDUTJGOXNTRzdQOHV1SGU5Q0gzUlNEWGlQQ0tDNnNCeWYzU0FNUkRaSkU2ZzdvanR0Q2FvczZvTC9zUFhsYXluVzVrV0dlNHhkeFYrNnFTVlpCWUk5YUZPbFZiV2JsZlFhQ0RhMERvYjFDK1dvWE9HUTlLaHVldE9ua3Y5VGpQZVRPc1BYc3ZJUllwR2ZIOVNvUkQ1eDhHQk9pQWdFc09ZYkNRK3hteGhVNWZmb0VYRXRTL2QrMk1GaTljVWgyQ0YrRVZIVTJsWGdxSmJGY2NZaWRiS2FybzRkYTFCKzRIcERPbkFsMHVxTjJ5V3k2UlVrSmlyU2dML2JZYWtCNXJ3Yk1lYm5TSUhYZlFDNityMkpRZklFUzN5VEQrekNuNkpFSVZOMFdpQWNuS0RWZnZGanJMTnJIVEhUcmlQMnlib1hvbU9IQURpcWJsZ3ZmOEpyVjYrMVpjd2xBTERSaW5oUndpRUJaclF6bW1EaWx6dFgxcloxbnBVT1JXSmpRZHNjbFQvZDJmVUNXbWxWL2kxaWVKQUNMS3hOcmlEdDRBb1JNWW14MmlnenRJbE5LZ1BXa1l0aUF3ZFprdHd0RlJ3VE5zejYxaVdwSVUwMjZLRmtEc2xEbjFodHVCUlU4bUhpQm1QWE1QNVVnM0hBeWx2azZVaGJMZGN3aFhCak5HWW90WHI5VnNUd1VRMXVXT0hoZEFmZEl2VHJta090RkJsSVd5cWdIcHNRNUN0bmVVNEdDbDFPaU5FeEFkUlJVUXN5OHFma1pmbzdOUmRJd2pHVzFvQWNTS1lMckVWU0lkRW85SWROQm9WQ1JidnpDdDZacit3SjQ5UmdxUmsxQlJMVUN5ZTN3TkljK0p5cjJPdnk3czdIQjY1ZlRPZFJRcndHbFdxdVphTVUyVWhFbUdmb20xTmlsR0daWlhYUlFSUU1UWG9xejRYSE1MMXhrZ2R1YXV6bVFBSzBCTXM1TDZpMk5JbE1aRHdsRHhGODNSc1VUczI3QVMzNDVNNEFnZzYwVzR1TDBaN1YwUG9KMnlEckZTNkxyTTNYaEtQWHFTQklQUlY2c1lXaXpwL05ZdlZvRFFES2JvVkNwZUFkSHBwZG9OT0I2SFJMOURCMjNjV092WVVtemIxQzhQVDNFbTMxVUl5aDNTMkd3VkoxNTdKSEtDYjBRNGRJNjVRZlVOSU5vcWM0aG5GbFdZcFNvZ1psUFVhNFVGYXJtOFRLcCtlS28rL1dJbE1jaVZmUlNUeUQwREVydTNUS0k0a3BrK0FHSTJtU2pwemF5bk02bmF6aWRUMWFrUlFPUzNJcnlpblRzT2NicDZGZWhmcTRxWFBxaGZUTVdmcUcrdVpJWmh2RmlIMUdPTWVzZVdPZ1ZFZDdqZEN5QW1ZUmplS1p5Z3JsL0dGTGdUWTNadVFBTWdOdXlncWwvYzd2cHBCeVFyOTF0SGgzVjByTjVFb3NTUFB1ejhwK2l4cUs3cTZIZTgrbVhWWjBSRVdhaXRHVnc4K2dGaGFDTVNLbzlLZEl0ZEZQVHF1MXJrQmlSYVBKNlZ1bkZveHowZ1ZtYXZ6amdXQ2FDTFF5aE9HSlZXT2JIbGRtUE5DaEFuZ1ZZTER0a0FnYk05K1NGT0hLRkVLNDdQbVNVWWUvek1TUklCRlRxQmlIY3V4UndIeHo3NUtmY09vdzdIVUdLaktBdTFNVVdXTTBDOE9rSXFnTVNtMjZpdU9KcThsT2txUjZ3WjdwazB4WnZKRzFrOEZqdW5Ua0luUnJUWEF5QjJTb3p5VjJkMGxhdWNLNXkrZ2txeUhVRWNseDlmVDVDQUhDTkZMQ1BDT3NackpWNGR1UUhWZ0lSTkRzbk9OVGhFOVV5MFhlS3h6dkM3Q2hlWmRhS1BDU1I2ajhBeUFxd2FHay9VbnAzSjYwUzh3aXNnZGtwWHAyS242T0ZCVVI3TWpCd0duVkZidEpoMVZQVUVnZEM5bytqVndpSXRqZERKZHlLODRtd3pkTElSRVB4R1ZxTDFjUGk1bFNKekVsQkwxSk5WWWpNekljMlZUWVd0b2lmOFBqcG5wVDlVOVoxSkF5MkEyT2tSWFVrT1ZnRk15bVYreFVGRlQzQ3lESGpxMGhOV0M4Z3U4OGFSL2lCelJOaGtrd2lIem5MUElYV1JCc1FJcmNySGFSZ29wUFdrUzAvWWNiUGQ4UVNuaTdJMklMbmZBU0pUVmFjZkdwK1ZyMENpY1IvQXEvWGlOT3VFZzZLbzRPclVyU2ZzQUxIaVlqYzdwOForeUdZUkRtV2FXN2p1QUxFTE96dGxXYXNKT3dIRWJ6MWhOVDZkYzljR0NLMGNIdk9LVFRiUXdTV3FnTkN5by9Ya2xTTVRHUm14ejYyNHcrMFJEQXRBTmdFNDA1R1ZaUTdRenV6enVvT1lDSkJrSGVxM0FzcHV6azY4OCtoMnRRSVNqMHVjNUNiRlR0enVVQXhsTkQvRmtTdzlFVHV1ZUNlTm84MXlKeHluRlJCMmJMZGkzRzc0c00zWVdGWmRmNkRHSlBDVWlkWWY1ZlFpRVF4QXRvaHc2RXhUcWJzWFdXektqa3Y0VEllQ2Q3TGEvS3diNzZTeGwrTjdCaURiUkRoMGhoNUFyRlowTkdHYzJ1VitFdFZ0MjNieE8yMkxUdTVBYWZIbCtnRGh3T3prdmc2cnl5MGhkYnhIQ2NBUWlkVnVvODU5b05KZzlkZUFzbk0zQTJqdHlzcUtubkE4MGVWRm4rZ2dxdHMyT0NjZThMVDZqakQxMnFEaCtpSUNwY0hyVFE3UkF3Z25iUmVPNWpPM1ZvaGJZbnA5THg0WWJGdjNka05wY0tRSnlGWitTZDB6aDVnRXNJdnhIRW1BSkFMRGkxVmx0MUJLZzNlTHlGMkVPVDArQW9UREQ5ekdXWDY2WWp4ZVY3amI5Nm5BZVFyWUxwRHAxZ0ZNTko3UzRMMEVwQzl5OHZSOUJ0VE9HamxTek4raDF3UGp4OXFUemk4dzJHTnA4TzhFNURyazVPazcwWEtraWl1VkR6ejdDWVlCeUdRQ2NpdHk4bVltNGlibDUxYml5bW9ITFhvZjNNeEVaNkF3MlVGQ00wdUYwWVo0eFc4d0RFQ2VJQ0Nqa0pQM25ETEI0MVZVRVZmeENHQUN3OG43dmJua0pGMG9XZUsyTlBnMEFma0xjdkllMXdKSUluR2xtcWJEd2ZCckRRU0c5M3ZvTEx5ZmhPTlFTWXdndDlLMFRWWWdzelQ0QWdFWmg1eThTVnJtYkNldThzY2IrK0J1YnNvaDEzeklHM0hXdTd1NmlMcUJuMUtpZjhRTUZwVXRZQktqTGo3d1hCcWNRVUR1eHdXOUhzRCsvZDR3c1JOWEpDU0pva29JbFZHd3pmSmZqRFBoVnVmQlNmekdKN203cFVkWE5xUEtQS0xycEtVQnE1Y1ZFWkNIY09uQUNmamhSNmROMUt4djk5MnNSSzJTQUpUbmlZNDRKMnJINjNNem05SHJGMGJkanVQVUpzRHl0LzlEUUI3R29OdnV4YnB2M1RabHZQZnhZdWRjWUticDhIMlZtd3E4amRENmJTNEk2aW8vMDRWVXhuMXVXMkRlekRrRTVFbmtqeC9yU1huRyszaXkxV0RpYmI5R0ZHNC9RK2I3eVRYVUVkUk5Lam5ES2dUMVdxZHZMK0R4QitZVGtLY3hyV2cwbm56QmZaT3E0c3BwZGdqQkllZndiSWZUcTR0aVowTk9NRy9wSVJESjluY1NVZGU0WDJVUkFYa2VLMWZkNGVtN3N5cml5dnpBbDF0Q2tGc1lBcWZ4d0gySjZIQzR5VW5SYlZQeDg5OEVnU211ZnZzMWlRaWU2UG1jbDc1SGR2dDdqT0JpWmVVaVhEVzBiV1RnVGt1OGNEdmJTbmJ5bXRQeDE0ZjZ6VE1xc09UTmxTSTE5VElqL0M3bFhEdzFyVGRlbkhXSzQvSEYrMHlzbVRQbHVORmo2QVYrVFc3VXJadHg4Zm12aTI2WGpETUEyYnYzanlqZk14SlgzdEFKbGZ1ZFgzc1VxME9TbFZ0N05PRFdLTzBYTEptOURBSlBpV2JObGgwNmZ5QVhMWjJJTDFiZmhOZmV5a1NnNGVydXBHRE5LN3lIRGk1RHAvTmVFZjE3UDhZK0R3TlNYcDZIQTNKVTVJTGlYL2ZXand1S2swS1ZPdXprbE1ZNzhVN1JBaHc0OEx6SXlJamNsRm5qaEk3ODRzdGI4TjJXa1NpWTJBVUIwWENudXA5WThXYTJTWDlianN6TTZhSlRoL2xtVjdXT1RNbG5YaHFIcmR1SFlzRjc3UUdSNXVlWWp0bTJxK1JlRExwcUZWcTNtQ251SEQ0dG1nNjFBZm4xMTA0UWFiZGh4T2hCV0JNKzQ1Z2xtbDhUbDdJQ0hiUFg0dFFtUmVMWlIvOFYyNDNsb1VMNVUwVWZ5TXFodVAydVBsajdkWE8veG5iTXRVc3djckxLSU1Scll2YjBSNjNtYjN2S1U1YVhYNFBVdE1HNGYzSlBMRnJhWE91VmVzY2NFaEZuYnkvNlgxR0duOHJmRUM4OThiQWRDZUlldTVVVkZRT1FudDRmeXovdWlYODhjaVoyL1BkRVYxZGFISXNBUk04NW85a2VQSER2bDFpL2NZNFlPYVNXbUlxclEySnBKNlhzakEwYmVxTmx5MXc4TnpNYjA0c3lBSEdpY2VlaGcyUFV4eUlvdkE1djFMQWZjTWV3RW16YnRVQzB5M3d4RVJtVUtTcjM3KytGSmNFZXlNbnFpRm12WjJMRnlpYll1T1ZrQ0J3UGlVWUlJQURKMzFKVVowQkd0MjM4blg5R011K2pqYnpxL3pCcjEzcHUxcTN4SU5HODZ2WjVabXNndDBzRmJyMXhNMXEzQ3FLeWNyRklUNStuTWlobFFBNlJaZXZXcnBnK3V3TXltbVJpVUwrV0NINmFnYzlXTmNiS0w0N0R6dDFwZ0V3RkJNRkpRUUFDVmVCbGxRSkVpYjhncTM4VG5NaVhDZzZERmVtRXp3OEJWaHRVbFZrNXIrT1lEalc2YU5FYzZOb0o2SEloMFBVaW9HWHpDZ0NiVUY0ZVJPUEdpNFVRSmFwRDhqWVExVjRhNmlsVDRQK0dDNU9sK3hJS253QUFBQUJKUlU1RXJrSmdnZz09Ci8vIEBpbmNsdWRlICAgICAgKjovL3Bhbi5iYWlkdS5jb20vZGlzay9ob21lKgovLyBAaW5jbHVkZSAgICAgICo6Ly95dW4uYmFpZHUuY29tL2Rpc2svaG9tZSoKLy8gQGluY2x1ZGUgICAgICAqOi8vcGFuLmJhaWR1LmNvbS9zKgovLyBAaW5jbHVkZSAgICAgICo6Ly95dW4uYmFpZHUuY29tL3MqCi8vIEBpbmNsdWRlICAgICAgKjovL3Bhbi5iYWlkdS5jb20vc2hhcmUvKgovLyBAaW5jbHVkZSAgICAgICo6Ly95dW4uYmFpZHUuY29tL3NoYXJlLyoKLy8gQGluY2x1ZGUgICAgICAqLnlvdWt1LmNvbS92KgovLyBAaW5jbHVkZSAgICAgICptLnlvdWt1LmNvbS8qCi8vIEBpbmNsdWRlICAgICAgKi5pcWl5aS5jb20vdl8qCi8vIEBpbmNsdWRlICAgICAgKi5pcWl5aS5jb20vd18qCi8vIEBpbmNsdWRlICAgICAgKi5pcWl5aS5jb20vYV8qCi8vIEBpbmNsdWRlICAgICAgKi5pcS5jb20vcGxheS8qCi8vIEBpbmNsdWRlICAgICAgKi5sZS5jb20vcHR2L3ZwbGF5LyoKLy8gQGluY2x1ZGUgICAgICAqdi5xcS5jb20veCoKLy8gQGluY2x1ZGUgICAgICAqdi5xcS5jb20vcCoKLy8gQGluY2x1ZGUgICAgICAqdi5xcS5jb20vY292ZXIqCi8vIEBpbmNsdWRlICAgICAgKnYucXEuY29tL3R2LyoKLy8gQGluY2x1ZGUgICAgICAqLnR1ZG91LmNvbS9saXN0cGxheS8qCi8vIEBpbmNsdWRlICAgICAgKi50dWRvdS5jb20vYWxidW1wbGF5LyoKLy8gQGluY2x1ZGUgICAgICAqLnR1ZG91LmNvbS9wcm9ncmFtcy92aWV3LyoKLy8gQGluY2x1ZGUgICAgICAqLnR1ZG91LmNvbS92KgovLyBAaW5jbHVkZSAgICAgICoubWd0di5jb20vYi8qCi8vIEBpbmNsdWRlICAgICAgKnR2LnNvaHUuY29tLyoKLy8gQGluY2x1ZGUgICAgICAqZmlsbS5zb2h1LmNvbS9hbGJ1bS8qCi8vIEBpbmNsdWRlICAgICAgKi5iaWxpYmlsaS5jb20vdmlkZW8vKgovLyBAaW5jbHVkZSAgICAgICouYmlsaWJpbGkuY29tL2FuaW1lLyoKLy8gQGluY2x1ZGUgICAgICAqLmJpbGliaWxpLmNvbS9iYW5ndW1pL3BsYXkvKgovLyBAaW5jbHVkZSAgICAgICouYmlsaWJpbGkuY29tL3MvKgovLyBAaW5jbHVkZSAgICAgICoucHB0di5jb20vc2hvdy8qCi8vIEBpbmNsdWRlICAgICAgKi53YXN1LmNuL1BsYXkvc2hvdyoKLy8gQGluY2x1ZGUgICAgICAqdi55aW55dWV0YWkuY29tL3ZpZGVvLyoKLy8gQGluY2x1ZGUgICAgICAqdi55aW55dWV0YWkuY29tL3BsYXlsaXN0LyoKLy8gQGluY2x1ZGUgICAgICAqOi8vaXRlbS50YW9iYW8uY29tLyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKmRldGFpbC50bWFsbC5jb20vKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qZGV0YWlsLnRtYWxsLmhrLyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKml0ZW0uamQuY29tLyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKi55aXlhb2pkLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgKjovLyoubGlhbmd4aW55YW8uY29tLyoKLy8gQGluY2x1ZGUgICAgICAqbXVzaWMuMTYzLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgKjovL3kucXEuY29tLyoKLy8gQGluY2x1ZGUgICAgICAqOi8vaS55LnFxLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgKjovLyoua3Vnb3UuY29tLyoKLy8gQGluY2x1ZGUgICAgICAqOi8vKmt1d28uY24vKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLnhpYW1pLmNvbS8qCi8vIEBpbmNsdWRlICAgICAgKjovL211c2ljLnRhaWhlLmNvbS9zb25nKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLjF0aW5nLmNvbS9wbGF5ZXIqCi8vIEBpbmNsdWRlICAgICAgKjovL211c2ljLm1pZ3UuY24vdioKLy8gQGluY2x1ZGUgICAgICAqOi8vKi5saXpoaS5mbS8qCi8vIEBpbmNsdWRlICAgICAgKjovLyoucWluZ3RpbmcuZm0vKgovLyBAaW5jbHVkZSAgICAgICo6Ly8qLnhpbWFsYXlhLmNvbS8qCi8vIEBleGNsdWRlICAgICAgKjovLyouZWdndm9kLmNuLyoKLy8gQGNvbm5lY3QgICAgICBkLnBjcy5iYWlkdS5jb20KLy8gQGNvbm5lY3QgICAgICBiYWlkdS5jb20KLy8gQGNvbm5lY3QgICAgICBiYWlkdXBjcy5jb20KLy8gQGNvbm5lY3QgICAgICBiYWlkdXl1bi53aWtpCi8vIEBjb25uZWN0ICAgICAgbG9jYWxob3N0Ci8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9qcXVlcnlAMy4yLjEvZGlzdC9qcXVlcnkubWluLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L25wbS9zd2VldGFsZXJ0MkAxMC4xNi42L2Rpc3Qvc3dlZXRhbGVydDIuYWxsLm1pbi5qcwovLyBAb3JpZ2luYWwtc2NyaXB0IGh0dHBzOi8vZ3JlYXN5Zm9yay5vcmcvc2NyaXB0cy8zNzYwNzgKLy8gQG9yaWdpbmFsLWF1dGhvciB6aG1haQovLyBAb3JpZ2luYWwtbGljZW5zZSBHUEwgTGljZW5zZQovLyBAb3JpZ2luYWwtc2NyaXB0IGh0dHBzOi8vZ2l0aHViLmNvbS9zeWh5ejE5OTAvYmFpZHV5dW4vYmxvYi9tYXN0ZXIvYmFpZHV5dW4udXNlci5qcwovLyBAb3JpZ2luYWwtYXV0aG9yIHlvdXhpYW9ob3UKLy8gQG9yaWdpbmFsLWxpY2Vuc2UgQUdQTCBMaWNlbnNlCi8vIEBvcmlnaW5hbC1jaGFuZ2VzIDEs5bCG5by65Yi25YWz5rOo5YWs5LyX5Y+35pS55Li66Z2e5by65Yi244CCMizlsIblhazkvJflj7flm77niYfmlLnkuLrmloflrZfjgIIzLOWIoOmZpOS6huiuvue9rueahGljb27lm77moIfjgIIKLy8gQGFudGlmZWF0dXJlICByZWZlcnJhbC1saW5rIOatpOaPkOekuuS4ukdyZWFzeUZvcmvku6PnoIHop4TojIPopoHmsYLlkKvmnInmn6XliLjlip/og73nmoTohJrmnKzlv4Xpobvmt7vliqDvvIzlrp7pmYXkvb/nlKjml6Dku7vkvZXlvLrliLbot7PovazvvIzku6PnoIHlj6/mn6XvvIzor7fnn6XmgonjgIIKLy8gQGxpY2Vuc2UgICAgICBBR1BMIExpY2Vuc2UKLy8gQGdyYW50ICAgICAgICBHTV9kb3dubG9hZAovLyBAZ3JhbnQgICAgICAgIEdNX29wZW5JblRhYgovLyBAZ3JhbnQgICAgICAgIEdNX3NldFZhbHVlCi8vIEBncmFudCAgICAgICAgR01fZ2V0VmFsdWUKLy8gQGdyYW50ICAgICAgICBHTV94bWxodHRwUmVxdWVzdAovLyBAZ3JhbnQgICAgICAgIEdNX2FkZFN0eWxlCi8vIEBncmFudCAgICAgICAgdW5zYWZlV2luZG93Ci8vIEBncmFudCAgICAgICAgR01fc2V0Q2xpcGJvYXJkCi8vIEBncmFudCAgICAgICAgR01fZ2V0UmVzb3VyY2VVUkwKLy8gQGdyYW50ICAgICAgICBHTV9nZXRSZXNvdXJjZVRleHQKLy8gQGdyYW50ICAgICAgICBHTV9pbmZvCi8vIEBncmFudCAgICAgICAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZAovLyBAZ3JhbnQgICAgICAgIEdNX2Nvb2tpZQovLyBAcnVuLWF0ICAgICAgIGRvY3VtZW50LWlkbGUKLy8gPT0vVXNlclNjcmlwdD09CgovL+eZvuW6pue9keebmAooZnVuY3Rpb24oKSB7CnZhciBwYW5fdGl0bGU9bmV3IEFycmF5KCkKCQlwYW5fdGl0bGVbMF09ICJodHRwczovL3Bhbi5iYWlkdS5jb20vIgoJCXBhbl90aXRsZVsxXT0gImh0dHBzOi8veXVuLmJhaWR1LmNvbS8iCiAgICAgICAgbGV0IHBhbl9saW5rID0gbG9jYXRpb24uaHJlZjsKCQlmb3IodmFyIGE9MDthPHBhbl90aXRsZS5sZW5ndGg7YSsrKXsKCQkJaWYocGFuX2xpbmsuaW5kZXhPZihwYW5fdGl0bGVbYV0pIT0gLTEpewogICAgICAgICAgICAgICAgcGFuX2xpbmsgPSBwYW5fbGluay5yZXBsYWNlKCdiYWlkdS5jb20nLCdiYWlkdXdwLmNvbScpOwoJCQkJdmFyIHBhbl9odG1sID0gIjxhIGhyZWY9IitwYW5fbGluaysiIHRhcmdldD0nX2JsYW5rJyBzdHlsZT0nY3Vyc29yOnBvaW50ZXI7ei1pbmRleDo5ODtkaXNwbGF5OmJsb2NrO3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7bGluZS1oZWlnaHQ6MzBweDtwb3NpdGlvbjpmaXhlZDtsZWZ0OjA7dG9wOjMwMHB4O3RleHQtYWxpZ246Y2VudGVyOyc+PGltZyBzcmM9J2h0dHBzOi8vd3d3LmVnZ3ZvZC5jbi9pbWFnZXMvdmlwLnBuZycgc3R5bGU9J3dpZHRoOjUwcHgnID48L2E+IjsKCQkJCSQoImJvZHkiKS5hcHBlbmQocGFuX2h0bWwpOwoKLy/nmb7luqbnvZHnm5johJrmnKzlvIDlp4sKLy8KKGZ1bmN0aW9uICgpIHsKICAgICd1c2Ugc3RyaWN0JzsKCiAgICBsZXQgcHQgPSAnJywgc2VsZWN0TGlzdCA9IFtdLCBwYXJhbXMgPSB7fSwgbW9kZSA9ICcnLCB3aWR0aCA9IDgwMCwgcGFuID0ge30sIGNvbG9yID0gJycsCiAgICAgICAgZG9jID0gJChkb2N1bWVudCksIHByb2dyZXNzID0ge30sIHJlcXVlc3QgPSB7fSwgaW5zID0ge30sIGlkbSA9IHt9OwogICAgY29uc3Qgc2NyaXB0SW5mbyA9IEdNX2luZm8uc2NyaXB0OwogICAgY29uc3QgdmVyc2lvbiA9ICc1LjEuMyc7CiAgICBjb25zdCBhdXRob3IgPSAnWW91WGlhb0hvdSc7CiAgICBjb25zdCBuYW1lID0gJ+e9keebmOebtOmTvuS4i+i9veWKqeaJiyc7CiAgICBjb25zdCBjdXN0b21DbGFzcyA9IHsKICAgICAgICBjb250YWluZXI6ICdwbC1jb250YWluZXInLAogICAgICAgIHBvcHVwOiAncGwtcG9wdXAnLAogICAgICAgIGhlYWRlcjogJ3BsLWhlYWRlcicsCiAgICAgICAgdGl0bGU6ICdwbC10aXRsZScsCiAgICAgICAgY2xvc2VCdXR0b246ICdwbC1jbG9zZScsCiAgICAgICAgaWNvbjogJ3BsLWljb24nLAogICAgICAgIGltYWdlOiAncGwtaW1hZ2UnLAogICAgICAgIGNvbnRlbnQ6ICdwbC1jb250ZW50JywKICAgICAgICBodG1sQ29udGFpbmVyOiAncGwtaHRtbCcsCiAgICAgICAgaW5wdXQ6ICdwbC1pbnB1dCcsCiAgICAgICAgaW5wdXRMYWJlbDogJ3BsLWlucHV0TGFiZWwnLAogICAgICAgIHZhbGlkYXRpb25NZXNzYWdlOiAncGwtdmFsaWRhdGlvbicsCiAgICAgICAgYWN0aW9uczogJ3BsLWFjdGlvbnMnLAogICAgICAgIGNvbmZpcm1CdXR0b246ICdwbC1jb25maXJtJywKICAgICAgICBkZW55QnV0dG9uOiAncGwtZGVueScsCiAgICAgICAgY2FuY2VsQnV0dG9uOiAncGwtY2FuY2VsJywKICAgICAgICBsb2FkZXI6ICdwbC1sb2FkZXInLAogICAgICAgIGZvb3RlcjogJ3BsLWZvb3RlcicKICAgIH07CgogICAgbGV0IHRvYXN0ID0gU3dhbC5taXhpbih7CiAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgcG9zaXRpb246ICd0b3AnLAogICAgICAgIHNob3dDb25maXJtQnV0dG9uOiBmYWxzZSwKICAgICAgICB0aW1lcjogMzUwMCwKICAgICAgICB0aW1lclByb2dyZXNzQmFyOiBmYWxzZSwKICAgICAgICBkaWRPcGVuOiAodG9hc3QpID0+IHsKICAgICAgICAgICAgdG9hc3QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIFN3YWwuc3RvcFRpbWVyKTsKICAgICAgICAgICAgdG9hc3QuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsIFN3YWwucmVzdW1lVGltZXIpOwogICAgICAgIH0KICAgIH0pOwoKICAgIGxldCB1dGlsID0gewogICAgICAgIGNsb2coYykgewogICAgICAgICAgICBjb25zb2xlLmdyb3VwKGBbJHtuYW1lfV1gKTsKICAgICAgICAgICAgY29uc29sZS5sb2coYyk7CiAgICAgICAgICAgIGNvbnNvbGUuZ3JvdXBFbmQoKTsKICAgICAgICB9LAogICAgICAgIGdldENvb2tpZShuYW1lKSB7CiAgICAgICAgICAgIGxldCBhcnIgPSBkb2N1bWVudC5jb29raWUucmVwbGFjZSgvXHMvZywgIiIpLnNwbGl0KCc7Jyk7CiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gYXJyLmxlbmd0aDsgaSA8IGw7IGkrKykgewogICAgICAgICAgICAgICAgbGV0IHRlbXBBcnIgPSBhcnJbaV0uc3BsaXQoJz0nKTsKICAgICAgICAgICAgICAgIGlmICh0ZW1wQXJyWzBdID09IG5hbWUpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHRlbXBBcnJbMV0pOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICB9LAogICAgICAgIGdldFZhbHVlKG5hbWUpIHsKICAgICAgICAgICAgcmV0dXJuIEdNX2dldFZhbHVlKG5hbWUpOwogICAgICAgIH0sCiAgICAgICAgc2V0VmFsdWUobmFtZSwgdmFsdWUpIHsKICAgICAgICAgICAgR01fc2V0VmFsdWUobmFtZSwgdmFsdWUpOwogICAgICAgIH0sCiAgICAgICAgZ2V0U3RvcmFnZShrZXkpIHsKICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKGtleSk7CiAgICAgICAgfSwKICAgICAgICBzZXRTdG9yYWdlKGtleSwgdmFsdWUpIHsKICAgICAgICAgICAgcmV0dXJuIGxvY2FsU3RvcmFnZS5zZXRJdGVtKGtleSwgdmFsdWUpOwogICAgICAgIH0sCiAgICAgICAgc2V0Q2xpcGJvYXJkKHRleHQpIHsKICAgICAgICAgICAgR01fc2V0Q2xpcGJvYXJkKHRleHQsICd0ZXh0Jyk7CiAgICAgICAgfSwKICAgICAgICBlKHN0cikgewogICAgICAgICAgICByZXR1cm4gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoc3RyKSkpOwogICAgICAgIH0sCiAgICAgICAgZChzdHIpIHsKICAgICAgICAgICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoYXRvYihzdHIpKSk7CiAgICAgICAgfSwKICAgICAgICBzZXRCRFVTUygpIHsKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIEdNX2Nvb2tpZSAmJiBHTV9jb29raWUoJ2xpc3QnLCB7bmFtZTogJ0JEVVNTJ30sIChjb29raWVzLCBlcnJvcikgPT4gewogICAgICAgICAgICAgICAgICAgIGlmICghZXJyb3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdG9yYWdlKCJiYWlkdXl1blBsdWdpbl9CRFVTUyIsIEpTT04uc3RyaW5naWZ5KHtCRFVTUzogY29va2llc1swXS52YWx1ZX0pKTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewoKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgZ2V0QkRVU1MoKSB7CiAgICAgICAgICAgIGxldCBiYWlkdXl1blBsdWdpbl9CRFVTUyA9IHRoaXMuZ2V0U3RvcmFnZSgnYmFpZHV5dW5QbHVnaW5fQkRVU1MnKSA/IHRoaXMuZ2V0U3RvcmFnZSgnYmFpZHV5dW5QbHVnaW5fQkRVU1MnKSA6ICd7ImJhaWR1eXVuUGx1Z2luX0JEVVNTIjoiIn0nOwogICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShiYWlkdXl1blBsdWdpbl9CRFVTUykuQkRVU1MgfHwgJyc7CiAgICAgICAgfSwKICAgICAgICBnZXRFeHRlbnNpb24obmFtZSkgewogICAgICAgICAgICBjb25zdCByZWcgPSAvKD8hXC4pXHcrJC87CiAgICAgICAgICAgIGlmIChyZWcudGVzdChuYW1lKSkgewogICAgICAgICAgICAgICAgbGV0IG1hdGNoID0gbmFtZS5tYXRjaChyZWcpOwogICAgICAgICAgICAgICAgcmV0dXJuIG1hdGNoWzBdLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuICcnOwogICAgICAgIH0sCiAgICAgICAgc2l6ZUZvcm1hdCh2YWx1ZSkgewogICAgICAgICAgICBpZiAodmFsdWUgPT09ICt2YWx1ZSkgewogICAgICAgICAgICAgICAgbGV0IHVuaXQgPSBbIkIiLCAiS0IiLCAiTUIiLCAiR0IiLCAiVEIiLCAiUEIiLCAiRUIiLCAiWkIiLCAiWUIiXTsKICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5sb2coMTAyNCkpOwogICAgICAgICAgICAgICAgbGV0IHNpemUgPSB2YWx1ZSAvIE1hdGgucG93KDEwMjQsIGluZGV4KTsKICAgICAgICAgICAgICAgIHNpemUgPSBzaXplLnRvRml4ZWQoMSk7CiAgICAgICAgICAgICAgICByZXR1cm4gc2l6ZSArIHVuaXRbaW5kZXhdOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiAnJzsKICAgICAgICB9LAogICAgICAgIHNvcnRCeU5hbWUoYXJyKSB7CiAgICAgICAgICAgIGNvbnN0IGhhbmRsZSA9ICgpID0+IHsKICAgICAgICAgICAgICAgIHJldHVybiAgKGEsIGIpID0+IHsKICAgICAgICAgICAgICAgICAgICBjb25zdCBwMSA9IGEuZmlsZW5hbWUgPyBhLmZpbGVuYW1lIDogYS5zZXJ2ZXJfZmlsZW5hbWU7CiAgICAgICAgICAgICAgICAgICAgY29uc3QgcDIgPSBiLmZpbGVuYW1lID8gYi5maWxlbmFtZSA6IGIuc2VydmVyX2ZpbGVuYW1lOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBwMS5sb2NhbGVDb21wYXJlKHAyLCAiemgtQ04iKTsKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGFyci5zb3J0KGhhbmRsZSgpKTsKICAgICAgICB9LAogICAgICAgIGNvbnZlcnRMaW5rVG9BcmlhKGxpbmssIGZpbGVuYW1lLCB1YSkgewogICAgICAgICAgICBsZXQgQkRVU1MgPSB1dGlsLmdldEJEVVNTKCk7CiAgICAgICAgICAgIGZpbGVuYW1lID0gZmlsZW5hbWUucmVwbGFjZSgnICcsICdfJyk7CiAgICAgICAgICAgIGlmICghIUJEVVNTKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KGBhcmlhMmMgIiR7bGlua30iIC0tb3V0ICIke2ZpbGVuYW1lfSIgLS1oZWFkZXIgIlVzZXItQWdlbnQ6ICR7dWF9IiAtLWhlYWRlciAiQ29va2llOiBCRFVTUz0ke0JEVVNTfSJgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgbGluazogcGFuLmFzc2lzdGFudCwKICAgICAgICAgICAgICAgIHRleHQ6IHBhbi5pbml0WzVdCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICBjb252ZXJ0TGlua1RvQ3VybChsaW5rLCBmaWxlbmFtZSwgdWEpIHsKICAgICAgICAgICAgbGV0IEJEVVNTID0gdXRpbC5nZXRCRFVTUygpOwogICAgICAgICAgICBmaWxlbmFtZSA9IGZpbGVuYW1lLnJlcGxhY2UoJyAnLCAnXycpOwogICAgICAgICAgICBpZiAoISFCRFVTUykgewogICAgICAgICAgICAgICAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudChgY3VybCAtTCAiJHtsaW5rfSIgLS1vdXRwdXQgIiR7ZmlsZW5hbWV9IiAtQSAiJHt1YX0iIC1iICJCRFVTUz0ke0JEVVNTfSJgKTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgbGluazogcGFuLmFzc2lzdGFudCwKICAgICAgICAgICAgICAgIHRleHQ6IHBhbi5pbml0WzVdCiAgICAgICAgICAgIH07CiAgICAgICAgfSwKICAgICAgICBibG9iRG93bmxvYWQoYmxvYiwgZmlsZW5hbWUpIHsKICAgICAgICAgICAgaWYgKGJsb2IgaW5zdGFuY2VvZiBCbG9iKSB7CiAgICAgICAgICAgICAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpOwogICAgICAgICAgICAgICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgICAgIGEuaHJlZiA9IHVybDsKICAgICAgICAgICAgICAgIGEuZG93bmxvYWQgPSBmaWxlbmFtZTsKICAgICAgICAgICAgICAgIGEuY2xpY2soKTsKICAgICAgICAgICAgICAgIFVSTC5yZXZva2VPYmplY3RVUkwodXJsKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCiAgICAgICAgc2V0SW50KG5hbWUsIHRpbWUpIHsKICAgICAgICAgICAgdGltZSA9IHRpbWUgfHwgMTAwOwogICAgICAgICAgICBsZXQgaSA9IDA7CiAgICAgICAgICAgIGlmICgkKG5hbWUpLmxlbmd0aCkgcmV0dXJuOwogICAgICAgICAgICBsZXQgaW5zID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICAgICAgICAgICAgaSsrOwogICAgICAgICAgICAgICAgaWYgKCQobmFtZSkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnMpOwogICAgICAgICAgICAgICAgICAgICQobmFtZSkucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZiAoaSA+IDYwKSBjbGVhckludGVydmFsKGlucyk7CiAgICAgICAgICAgIH0sIHRpbWUpOwogICAgICAgIH0sCiAgICAgICAgc2xlZXAodGltZSkgewogICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgdGltZSkpOwogICAgICAgIH0sCiAgICAgICAgbWVzc2FnZTogewogICAgICAgICAgICBzdWNjZXNzKHRleHQpIHsKICAgICAgICAgICAgICAgIHRvYXN0LmZpcmUoe3RpdGxlOiB0ZXh0LCBpY29uOiAnc3VjY2Vzcyd9KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXJyb3IodGV4dCkgewogICAgICAgICAgICAgICAgdG9hc3QuZmlyZSh7dGl0bGU6IHRleHQsIGljb246ICdlcnJvcid9KTsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2FybmluZyh0ZXh0KSB7CiAgICAgICAgICAgICAgICB0b2FzdC5maXJlKHt0aXRsZTogdGV4dCwgaWNvbjogJ3dhcm5pbmcnfSk7CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGluZm8odGV4dCkgewogICAgICAgICAgICAgICAgdG9hc3QuZmlyZSh7dGl0bGU6IHRleHQsIGljb246ICdpbmZvJ30pOwogICAgICAgICAgICB9LAogICAgICAgICAgICBxdWVzdGlvbih0ZXh0KSB7CiAgICAgICAgICAgICAgICB0b2FzdC5maXJlKHt0aXRsZTogdGV4dCwgaWNvbjogJ3F1ZXN0aW9uJ30pOwogICAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBwb3N0KHVybCwgZGF0YSwgaGVhZGVycywgdHlwZSkgewogICAgICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGRhdGEpID09PSAnW29iamVjdCBPYmplY3RdJykgewogICAgICAgICAgICAgICAgZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgICAgICAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAiUE9TVCIsIHVybCwgaGVhZGVycywgZGF0YSwKICAgICAgICAgICAgICAgICAgICByZXNwb25zZVR5cGU6IHR5cGUgfHwgJ2pzb24nLAogICAgICAgICAgICAgICAgICAgIG9ubG9hZDogKHJlcykgPT4gewogICAgICAgICAgICAgICAgICAgICAgICB0eXBlID09PSAnYmxvYicgPyByZXNvbHZlKHJlcykgOiByZXNvbHZlKHJlcy5yZXNwb25zZSB8fCByZXMucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9uZXJyb3I6IChlcnIpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAogICAgICAgIGdldCh1cmwsIGhlYWRlcnMsIHR5cGUsIGV4dHJhKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7CiAgICAgICAgICAgICAgICBsZXQgcmVxdWVzdE9iaiA9IEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICJHRVQiLCB1cmwsIGhlYWRlcnMsCiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2VUeXBlOiB0eXBlIHx8ICdqc29uJywKICAgICAgICAgICAgICAgICAgICBvbmxvYWQ6IChyZXMpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5zdGF0dXMgPT09IDIwNCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdE9iai5hYm9ydCgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWRtW2V4dHJhLmluZGV4XSA9IHRydWU7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdibG9iJykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cyA9PT0gMjAwICYmIHV0aWwuYmxvYkRvd25sb2FkKHJlcy5yZXNwb25zZSwgZXh0cmEuZmlsZW5hbWUpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXMucmVzcG9uc2UgfHwgcmVzLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG9ucHJvZ3Jlc3M6IChyZXMpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGV4dHJhICYmIGV4dHJhLmZpbGVuYW1lICYmIGV4dHJhLmluZGV4KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXMudG90YWwgPiAwID8gcHJvZ3Jlc3NbZXh0cmEuaW5kZXhdID0gKHJlcy5sb2FkZWQgKiAxMDAgLyByZXMudG90YWwpLnRvRml4ZWQoMikgOiBwcm9ncmVzc1tleHRyYS5pbmRleF0gPSAwLjAwOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvbmxvYWRzdGFydCgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmEgJiYgZXh0cmEuZmlsZW5hbWUgJiYgZXh0cmEuaW5kZXggJiYgKHJlcXVlc3RbZXh0cmEuaW5kZXhdID0gcmVxdWVzdE9iaik7CiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBvbmVycm9yOiAoZXJyKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChlcnIpOwogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKICAgICAgICBhZGRTdHlsZShpZCwgdGFnLCBjc3MpIHsKICAgICAgICAgICAgdGFnID0gdGFnIHx8ICdzdHlsZSc7CiAgICAgICAgICAgIGxldCBkb2MgPSBkb2N1bWVudCwgc3R5bGVEb20gPSBkb2MuZ2V0RWxlbWVudEJ5SWQoaWQpOwogICAgICAgICAgICBpZiAoc3R5bGVEb20pIHJldHVybjsKICAgICAgICAgICAgbGV0IHN0eWxlID0gZG9jLmNyZWF0ZUVsZW1lbnQodGFnKTsKICAgICAgICAgICAgc3R5bGUucmVsID0gJ3N0eWxlc2hlZXQnOwogICAgICAgICAgICBzdHlsZS5pZCA9IGlkOwogICAgICAgICAgICB0YWcgPT09ICdzdHlsZScgPyBzdHlsZS5pbm5lckhUTUwgPSBjc3MgOiBzdHlsZS5ocmVmID0gY3NzOwogICAgICAgICAgICBkb2MuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChzdHlsZSk7CiAgICAgICAgfQogICAgfTsKCiAgICBsZXQgcGFubGlua2VyID0gewogICAgICAgIGluaXRWYWx1ZSgpIHsKICAgICAgICAgICAgbGV0IHZhbHVlID0gW3sKICAgICAgICAgICAgICAgIG5hbWU6ICdzZXR0aW5nX3JwY19kb21haW4nLAogICAgICAgICAgICAgICAgdmFsdWU6ICdodHRwOi8vbG9jYWxob3N0JwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBuYW1lOiAnc2V0dGluZ19ycGNfcG9ydCcsCiAgICAgICAgICAgICAgICB2YWx1ZTogJzE2ODAwJwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBuYW1lOiAnc2V0dGluZ19ycGNfdG9rZW4nLAogICAgICAgICAgICAgICAgdmFsdWU6ICcnCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIG5hbWU6ICdzZXR0aW5nX3JwY19kaXInLAogICAgICAgICAgICAgICAgdmFsdWU6ICdEOicKICAgICAgICAgICAgfSwgewogICAgICAgICAgICAgICAgbmFtZTogJ3NldHRpbmdfdGhlbWVfY29sb3InLAogICAgICAgICAgICAgICAgdmFsdWU6ICcjMDlBQUZGJwogICAgICAgICAgICB9LCB7CiAgICAgICAgICAgICAgICBuYW1lOiAnc2V0dGluZ19pbml0X2NvZGUnLAogICAgICAgICAgICAgICAgdmFsdWU6ICcnCiAgICAgICAgICAgIH0sIHsKICAgICAgICAgICAgICAgIG5hbWU6ICdzY29kZScsCiAgICAgICAgICAgICAgICB2YWx1ZTogJycKICAgICAgICAgICAgfV07CgogICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKCh2KSA9PiB7CiAgICAgICAgICAgICAgICB1dGlsLmdldFZhbHVlKHYubmFtZSkgPT09IHVuZGVmaW5lZCAmJiB1dGlsLnNldFZhbHVlKHYubmFtZSwgdi52YWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIGFkZFN0eWxlKCkgewogICAgICAgICAgICBjb2xvciA9IHV0aWwuZ2V0VmFsdWUoJ3NldHRpbmdfdGhlbWVfY29sb3InKTsKICAgICAgICAgICAgdXRpbC5zZXRJbnQoJyNwYW5saW5rZXItYnV0dG9uJyk7CiAgICAgICAgICAgIGxldCBjc3M9YAogICAgICAgICAgICBib2R5Ojotd2Via2l0LXNjcm9sbGJhciB7IGRpc3BsYXk6IG5vbmUgfQogICAgICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHsgd2lkdGg6IDZweDsgaGVpZ2h0OiAxMHB4IH0KICAgICAgICAgICAgOjotd2Via2l0LXNjcm9sbGJhci10cmFjayB7IGJvcmRlci1yYWRpdXM6IDA7IGJhY2tncm91bmQ6IG5vbmUgfQogICAgICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHsgYmFja2dyb3VuZC1jb2xvcjogcmdiYSg4NSw4NSw4NSwuNCkgfQogICAgICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iLDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIgeyBib3JkZXItcmFkaXVzOiA1cHg7IC13ZWJraXQtYm94LXNoYWRvdzogaW5zZXQgMCAwIDZweCByZ2JhKDAsMCwwLC4yKSB9CiAgICAgICAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIgeyBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDg1LDg1LDg1LC4zKSB9CiAgICAgICAgICAgIC5wbC1wb3B1cCB7IGZvbnQtc2l6ZTogMTJweCAhaW1wb3J0YW50OyB9CiAgICAgICAgICAgIC5wbC1wb3B1cCBhIHsgY29sb3I6ICR7Y29sb3J9ICFpbXBvcnRhbnQ7IH0KICAgICAgICAgICAgLnBsLWhlYWRlciB7IHBhZGRpbmc6IDAhaW1wb3J0YW50O2FsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0IWltcG9ydGFudDsgYm9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNlZWUhaW1wb3J0YW50OyBtYXJnaW46IDAgMCAxMHB4IWltcG9ydGFudDsgcGFkZGluZzogMCAwIDVweCFpbXBvcnRhbnQ7fQogICAgICAgICAgICAucGwtdGl0bGUgeyBmb250LXNpemU6IDE2cHghaW1wb3J0YW50OyBsaW5lLWhlaWdodDogMSFpbXBvcnRhbnQ7d2hpdGUtc3BhY2U6IG5vd3JhcCFpbXBvcnRhbnQ7IHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzIWltcG9ydGFudDt9CiAgICAgICAgICAgIC5wbC1jb250ZW50IHsgcGFkZGluZzogMCAhaW1wb3J0YW50OyBmb250LXNpemU6IDEycHghaW1wb3J0YW50OyB9CiAgICAgICAgICAgIC5wbC1tYWluIHsgbWF4LWhlaWdodDogNDAwcHg7b3ZlcmZsb3cteTpzY3JvbGw7IH0KICAgICAgICAgICAgLnBsLWZvb3RlciB7Zm9udC1zaXplOiAxMnB4IWltcG9ydGFudDtqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQhaW1wb3J0YW50OyBtYXJnaW46IDEwcHggMCAwIWltcG9ydGFudDsgcGFkZGluZzogNXB4IDAgMCFpbXBvcnRhbnQ7IGNvbG9yOiAjZjU2YzZjIWltcG9ydGFudDsgfQogICAgICAgICAgICAucGwtaXRlbSB7IGRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGxpbmUtaGVpZ2h0OiAyMnB4OyB9CiAgICAgICAgICAgIC5wbC1pdGVtLW5hbWUgeyBmbGV4OiAwIDAgMTUwcHg7IHRleHQtYWxpZ246IGxlZnQ7bWFyZ2luLXJpZ2h0OiAxMHB4OyBvdmVyZmxvdzogaGlkZGVuOyB3aGl0ZS1zcGFjZTogbm93cmFwOyB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgY3Vyc29yOmRlZmF1bHQ7fQogICAgICAgICAgICAucGwtaXRlbS1saW5rIHsgZmxleDogMTsgb3ZlcmZsb3c6IGhpZGRlbjt0ZXh0LWFsaWduOiBsZWZ0OyB3aGl0ZS1zcGFjZTogbm93cmFwOyB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgfQogICAgICAgICAgICAucGwtaXRlbS10aXAgeyBkaXNwbGF5OiBmbGV4OyBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47ZmxleDogMTt9CiAgICAgICAgICAgIC5wbC1iYWNrIHsgd2lkdGg6IDcwcHg7IGJhY2tncm91bmQ6ICNkZGQ7IGJvcmRlci1yYWRpdXM6IDNweDtjdXJzb3I6cG9pbnRlcjttYXJnaW46MXB4IDA7fQogICAgICAgICAgICAucGwtZXh0IHsgZGlzcGxheTogaW5saW5lLWJsb2NrOyB3aWR0aDogNDRweDsgYmFja2dyb3VuZDogIzk5OTsgY29sb3I6ICNmZmY7IGhlaWdodDogMTZweDsgbGluZS1oZWlnaHQ6IDE2cHg7IGZvbnQtc2l6ZTogMTJweDsgYm9yZGVyLXJhZGl1czogM3B4O30KICAgICAgICAgICAgLnBsLXJldHJ5IHtwYWRkaW5nOiAzcHggMTBweDsgYmFja2dyb3VuZDogI2NjMzIzNTsgY29sb3I6ICNmZmY7IGJvcmRlci1yYWRpdXM6IDNweDsgY3Vyc29yOiBwb2ludGVyO30KICAgICAgICAgICAgLnBsLWJyb3dzZXJkb3dubG9hZCB7cGFkZGluZzogM3B4IDEwcHg7IGJhY2tncm91bmQ6ICR7Y29sb3J9OyBjb2xvcjogI2ZmZjsgYm9yZGVyLXJhZGl1czogM3B4OyBjdXJzb3I6IHBvaW50ZXI7fQogICAgICAgICAgICAucGwtaXRlbS1wcm9ncmVzcyB7IGRpc3BsYXk6ZmxleDtmbGV4OiAxO2FsaWduLWl0ZW1zOmNlbnRlcn0KICAgICAgICAgICAgLnBsLXByb2dyZXNzIHsgZGlzcGxheTogaW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOiBtaWRkbGU7d2lkdGg6IDEwMCU7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7bGluZS1oZWlnaHQ6IDE7cG9zaXRpb246IHJlbGF0aXZlO2hlaWdodDoxNXB4OyBmbGV4OiAxfQogICAgICAgICAgICAucGwtcHJvZ3Jlc3Mtb3V0ZXIgeyBoZWlnaHQ6IDE1cHg7Ym9yZGVyLXJhZGl1czogMTAwcHg7YmFja2dyb3VuZC1jb2xvcjogI2ViZWVmNTtvdmVyZmxvdzogaGlkZGVuO3Bvc2l0aW9uOiByZWxhdGl2ZTt2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO30KICAgICAgICAgICAgLnBsLXByb2dyZXNzLWlubmVyeyBwb3NpdGlvbjogYWJzb2x1dGU7bGVmdDogMDt0b3A6IDA7YmFja2dyb3VuZC1jb2xvcjogIzQwOWVmZjt0ZXh0LWFsaWduOiByaWdodDtib3JkZXItcmFkaXVzOiAxMDBweDtsaW5lLWhlaWdodDogMTt3aGl0ZS1zcGFjZTogbm93cmFwO3RyYW5zaXRpb246IHdpZHRoIC42cyBlYXNlO30KICAgICAgICAgICAgLnBsLXByb2dyZXNzLWlubmVyLXRleHQgeyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7dmVydGljYWwtYWxpZ246IG1pZGRsZTtjb2xvcjogI2QxZDFkMTtmb250LXNpemU6IDEycHg7bWFyZ2luOiAwIDVweDtoZWlnaHQ6IDE1cHh9CiAgICAgICAgICAgIC5wbC1wcm9ncmVzcy10aXB7IGZsZXg6MTt0ZXh0LWFsaWduOnJpZ2h0fQogICAgICAgICAgICAucGwtcHJvZ3Jlc3MtaG93eyBmbGV4OiAwIDAgOTBweDsgYmFja2dyb3VuZDogI2RkZDsgYm9yZGVyLXJhZGl1czogM3B4OyBtYXJnaW4tbGVmdDogMTBweDsgY3Vyc29yOiBwb2ludGVyOyB0ZXh0LWFsaWduOiBjZW50ZXI7fQogICAgICAgICAgICAucGwtcHJvZ3Jlc3Mtc3RvcHsgZmxleDogMCAwIDUwcHg7IHBhZGRpbmc6IDAgMTBweDsgYmFja2dyb3VuZDogI2NjMzIzNTsgY29sb3I6ICNmZmY7IGJvcmRlci1yYWRpdXM6IDNweDsgY3Vyc29yOiBwb2ludGVyO21hcmdpbi1sZWZ0OjEwcHg7aGVpZ2h0OjIwcHh9CiAgICAgICAgICAgIC5wbC1wcm9ncmVzcy1pbm5lci10ZXh0OmFmdGVyIHsgZGlzcGxheTogaW5saW5lLWJsb2NrO2NvbnRlbnQ6ICIiO2hlaWdodDogMTAwJTt2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO30KICAgICAgICAgICAgLnBsLWJ0bi1wcmltYXJ5IHsgYmFja2dyb3VuZDogJHtjb2xvcn07IGJvcmRlcjogMDsgYm9yZGVyLXJhZGl1czogNHB4OyBjb2xvcjogI2ZmZmZmZjsgY3Vyc29yOiBwb2ludGVyOyBmb250LXNpemU6IDEycHg7IG91dGxpbmU6IG5vbmU7IGRpc3BsYXk6ZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsganVzdGlmeS1jb250ZW50OiBjZW50ZXI7IG1hcmdpbjogMnB4IDA7IHBhZGRpbmc6IDZweCAwO3RyYW5zaXRpb246IDAuM3Mgb3BhY2l0eTsgfQogICAgICAgICAgICAucGwtYnRuLWluZm8geyBiYWNrZ3JvdW5kOiAjNjA2MjY2OyB9CiAgICAgICAgICAgIC5wbC1idXR0b24taW5pdCB7IG9wYWNpdHk6IDAuNTsgYW5pbWF0aW9uOiBlYXNlSW5pdE9wYWNpdHkgMS4ycyAzOyBhbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzIH0KICAgICAgICAgICAgQGtleWZyYW1lcyBlYXNlSW5pdE9wYWNpdHkgeyBmcm9tIHsgb3BhY2l0eTogMC41OyB9IDUwJSB7IG9wYWNpdHk6IDEgfSB0byB7IG9wYWNpdHk6IDAuNTsgfSB9CiAgICAgICAgICAgIC5wbC1idG4tcHJpbWFyeTpob3ZlciB7IG9wYWNpdHk6IDAuOTt0cmFuc2l0aW9uOiAwLjNzIG9wYWNpdHk7IH0KICAgICAgICAgICAgLnBsLWJ0bi1kYW5nZXIgeyBiYWNrZ3JvdW5kOiAjY2MzMjM1OyB9CiAgICAgICAgICAgIC5wbC1idG4tc3VjY2VzcyB7IGJhY2tncm91bmQ6ICM1NWFmMjg7IGFuaW1hdGlvbjogZWFzZU9wYWNpdHkgMS4ycyAyOyBhbmltYXRpb24tZmlsbC1tb2RlOmZvcndhcmRzIH0KICAgICAgICAgICAgIEBrZXlmcmFtZXMgZWFzZU9wYWNpdHkgeyBmcm9tIHsgb3BhY2l0eTogMTsgfSA1MCUgeyBvcGFjaXR5OiAwLjM1IH0gdG8geyBvcGFjaXR5OiAxOyB9IH0KICAgICAgICAgICAgLmVsZW1lbnQtY2xpY2tlZCB7IG9wYWNpdHk6IDAuNTsgfQogICAgICAgICAgICAucGwtZXh0cmEgeyBtYXJnaW4tdG9wOiAxMHB4O2Rpc3BsYXk6ZmxleH0KICAgICAgICAgICAgLnBsLWV4dHJhIGJ1dHRvbiB7IGZsZXg6IDF9CiAgICAgICAgICAgIC5wb2ludGVyIHsgY3Vyc29yOnBvaW50ZXIgfQogICAgICAgICAgICAucGwtc2V0dGluZy1sYWJlbCB7IGRpc3BsYXk6IGZsZXg7YWxpZ24taXRlbXM6IGNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47cGFkZGluZy10b3A6IDEwcHg7IH0KICAgICAgICAgICAgLnBsLWxhYmVsIHsgZmxleDogMCAwIDEwMHB4O3RleHQtYWxpZ246bGVmdDsgfQogICAgICAgICAgICAucGwtaW5wdXQgeyBmbGV4OiAxOyBwYWRkaW5nOiA4cHggMTBweDsgYm9yZGVyOiAxcHggc29saWQgI2MyYzJjMjsgYm9yZGVyLXJhZGl1czogNXB4OyBmb250LXNpemU6IDE0cHggfQogICAgICAgICAgICAucGwtY29sb3IgeyBmbGV4OiAxO2Rpc3BsYXk6IGZsZXg7ZmxleC13cmFwOiB3cmFwOyBtYXJnaW4tcmlnaHQ6IC0xMHB4O30KICAgICAgICAgICAgLnBsLWNvbG9yLWJveCB7IHdpZHRoOiAzNXB4O2hlaWdodDogMzVweDttYXJnaW46MTBweCAxMHB4IDAgMDs7IGJveC1zaXppbmc6IGJvcmRlci1ib3g7Ym9yZGVyOjFweCBzb2xpZCAjZmZmO2N1cnNvcjpwb2ludGVyIH0KICAgICAgICAgICAgLnBsLWNvbG9yLWJveC5jaGVja2VkIHsgYm9yZGVyOjNweCBkYXNoZWQgIzExMSFpbXBvcnRhbnQgfQogICAgICAgICAgICAucGwtY2xvc2U6Zm9jdXMgeyBvdXRsaW5lOiAwOyBib3gtc2hhZG93OiBub25lOyB9CiAgICAgICAgICAgIC50YWctZGFuZ2VyIHtjb2xvcjojY2MzMjM1O21hcmdpbjogMCA1cHg7fQogICAgICAgICAgICAucGwtdG9vbHRpcCB7IHBvc2l0aW9uOiBhYnNvbHV0ZTsgY29sb3I6ICNmZmZmZmY7IG1heC13aWR0aDogNjAwcHg7IGZvbnQtc2l6ZTogMTJweDsgcGFkZGluZzogNXB4IDEwcHg7IGJhY2tncm91bmQ6ICMzMzM7IGJvcmRlci1yYWRpdXM6IDVweDsgei1pbmRleDogOTk5OTk7IGxpbmUtaGVpZ2h0OiAxLjM7IGRpc3BsYXk6bm9uZTsgd29yZC1icmVhazogYnJlYWstYWxsO30KICAgICAgICAgICAgIEBrZXlmcmFtZXMgbG9hZCB7IDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMGRlZykgfSAxMDAlIHsgdHJhbnNmb3JtOiByb3RhdGUoMzYwZGVnKSB9IH0KICAgICAgICAgICAgLnBsLWxvYWRpbmctYm94ID4gZGl2ID4gZGl2IHtwb3NpdGlvbjogYWJzb2x1dGU7Ym9yZGVyLXJhZGl1czogNTAlO30KICAgICAgICAgICAgLnBsLWxvYWRpbmctYm94ID4gZGl2ID4gZGl2Om50aC1jaGlsZCgxKSB7dG9wOiA5cHg7bGVmdDogOXB4O3dpZHRoOiA4MnB4O2hlaWdodDogODJweDtiYWNrZ3JvdW5kOiAjZmZmZmZmO30KICAgICAgICAgICAgLnBsLWxvYWRpbmctYm94ID4gZGl2ID4gZGl2Om50aC1jaGlsZCgyKSB7dG9wOiAxNHB4O2xlZnQ6IDM4cHg7d2lkdGg6IDI1cHg7aGVpZ2h0OiAyNXB4O2JhY2tncm91bmQ6ICM2NjY2NjY7YW5pbWF0aW9uOiBsb2FkIDFzIGxpbmVhciBpbmZpbml0ZTt0cmFuc2Zvcm0tb3JpZ2luOiAxMnB4IDM2cHg7fQogICAgICAgICAgICAucGwtbG9hZGluZyB7d2lkdGg6IDE2cHg7aGVpZ2h0OiAxNnB4O2Rpc3BsYXk6IGlubGluZS1ibG9jaztvdmVyZmxvdzogaGlkZGVuO2JhY2tncm91bmQ6IG5vbmU7fQogICAgICAgICAgICAucGwtbG9hZGluZy1ib3gge3dpZHRoOiAxMDAlO2hlaWdodDogMTAwJTtwb3NpdGlvbjogcmVsYXRpdmU7dHJhbnNmb3JtOiB0cmFuc2xhdGVaKDApIHNjYWxlKDAuMTYpO2JhY2tmYWNlLXZpc2liaWxpdHk6IGhpZGRlbjt0cmFuc2Zvcm0tb3JpZ2luOiAwIDA7fQogICAgICAgICAgICAucGwtbG9hZGluZy1ib3ggZGl2IHsgYm94LXNpemluZzogY29udGVudC1ib3g7IH0KICAgICAgICAgICAgLnN3YWwyLWNvbnRhaW5lciB7IHotaW5kZXg6MTAwMDAwIWltcG9ydGFudDsgfQogICAgICAgICAgICBib2R5LnN3YWwyLWhlaWdodC1hdXRvIHsgaGVpZ2h0OiBpbmhlcml0IWltcG9ydGFudDsgfQogICAgICAgICAgICBgOwogICAgICAgICAgICB1dGlsLmFkZFN0eWxlKCdwYW5saW5rZXItc3R5bGUnLCdzdHlsZScsY3NzKTsKICAgICAgICB9LAoKICAgICAgICBhZGRQYWdlTGlzdGVuZXIoKSB7CiAgICAgICAgICAgIGZ1bmN0aW9uIF9mYWN0b3J5KGUpIHsKICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSAkKGUudGFyZ2V0KTsKICAgICAgICAgICAgICAgIGxldCBpdGVtID0gdGFyZ2V0LnBhcmVudHMoJy5wbC1pdGVtJyk7CiAgICAgICAgICAgICAgICBsZXQgbGluayA9IGl0ZW0uZmluZCgnLnBsLWl0ZW0tbGluaycpOwogICAgICAgICAgICAgICAgbGV0IHByb2dyZXNzID0gaXRlbS5maW5kKCcucGwtaXRlbS1wcm9ncmVzcycpOwogICAgICAgICAgICAgICAgbGV0IHRpcCA9IGl0ZW0uZmluZCgnLnBsLWl0ZW0tdGlwJyk7CiAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIGl0ZW0sIGxpbmssIHByb2dyZXNzLCB0aXAsIHRhcmdldCwKICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIF9yZXNldChpKSB7CiAgICAgICAgICAgICAgICBpbnNbaV0gJiYgY2xlYXJJbnRlcnZhbChpbnNbaV0pOwogICAgICAgICAgICAgICAgcmVxdWVzdFtpXSAmJiByZXF1ZXN0W2ldLmFib3J0KCk7CiAgICAgICAgICAgICAgICBwcm9ncmVzc1tpXSA9IDA7CiAgICAgICAgICAgICAgICBpZG1baV0gPSBmYWxzZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZG9jLm9uKCdtb3VzZWVudGVyIG1vdXNlbGVhdmUnLCAnLnBsLWJ1dHRvbicsIChlKSA9PiB7CiAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09PSAnbW91c2VlbnRlcicpIHsKICAgICAgICAgICAgICAgICAgICAkKGUuY3VycmVudFRhcmdldCkuYWRkQ2xhc3MoJ2J1dHRvbi1vcGVuJyk7CiAgICAgICAgICAgICAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmZpbmQoJy5wbC1tZW51Jykuc2hvdygpOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAkKGUuY3VycmVudFRhcmdldCkucmVtb3ZlQ2xhc3MoJ2J1dHRvbi1vcGVuJyk7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkb2Mub24oJ21vdXNlbGVhdmUnLCAnLnBsLW1lbnUnLCAoZSkgPT4gewogICAgICAgICAgICAgICAgJChlLmN1cnJlbnRUYXJnZXQpLmhpZGUoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvYy5vbignY2xpY2snLCAnLnBsLWJ1dHRvbi1tb2RlJywgKGUpID0+IHsKICAgICAgICAgICAgICAgIG1vZGUgPSBlLnRhcmdldC5kYXRhc2V0Lm1vZGU7CiAgICAgICAgICAgICAgICBTd2FsLnNob3dMb2FkaW5nKCk7CiAgICAgICAgICAgICAgICB0aGlzLmdldFBDU0xpbmsoKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvYy5vbignY2xpY2snLCAnLmxpc3RlbmVyLWxpbmstYXBpJywgYXN5bmMgKGUpID0+IHsKICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTsKICAgICAgICAgICAgICAgIGxldCBvID0gX2ZhY3RvcnkoZSk7CiAgICAgICAgICAgICAgICBsZXQgJHdpZHRoID0gby5pdGVtLmZpbmQoJy5wbC1wcm9ncmVzcy1pbm5lcicpOwogICAgICAgICAgICAgICAgbGV0ICR0ZXh0ID0gby5pdGVtLmZpbmQoJy5wbC1wcm9ncmVzcy1pbm5lci10ZXh0Jyk7CiAgICAgICAgICAgICAgICBsZXQgZmlsZW5hbWUgPSBvLmxpbmtbMF0uZGF0YXNldC5maWxlbmFtZTsKICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IG8ubGlua1swXS5kYXRhc2V0LmluZGV4OwogICAgICAgICAgICAgICAgX3Jlc2V0KGluZGV4KTsKICAgICAgICAgICAgICAgIHV0aWwuZ2V0KG8ubGlua1swXS5kYXRhc2V0LmxpbmssIHsiVXNlci1BZ2VudCI6IHBhbi51YX0sICdibG9iJywge2ZpbGVuYW1lLCBpbmRleH0pOwogICAgICAgICAgICAgICAgaW5zW2luZGV4XSA9IHNldEludGVydmFsKCgpID0+IHsKICAgICAgICAgICAgICAgICAgICBsZXQgcHJvZyA9ICtwcm9ncmVzc1tpbmRleF0gfHwgMDsKICAgICAgICAgICAgICAgICAgICBsZXQgaXNJRE0gPSBpZG1baW5kZXhdIHx8IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIGlmIChpc0lETSkgewogICAgICAgICAgICAgICAgICAgICAgICBvLnRpcC5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG8ucHJvZ3Jlc3MuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgICAgICBvLmxpbmsudGV4dCgn5bey5oiQ5Yqf5ZSk6LW3SURN77yM6K+35p+l55yLSURN5LiL6L295qGG77yBJykuYW5pbWF0ZSh7b3BhY2l0eTogJzAuNSd9LCAic2xvdyIpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnNbaW5kZXhdKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWRtW2luZGV4XSA9IGZhbHNlOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG8ubGluay5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIG8udGlwLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgby5wcm9ncmVzcy5zaG93KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICR3aWR0aC5jc3MoJ3dpZHRoJywgcHJvZyArICclJyk7CiAgICAgICAgICAgICAgICAgICAgICAgICR0ZXh0LnRleHQocHJvZyArICclJyk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9nID09IDEwMCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnNbaW5kZXhdKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2dyZXNzW2luZGV4XSA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLml0ZW0uZmluZCgnLnBsLXByb2dyZXNzLXN0b3AnKS5oaWRlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLml0ZW0uZmluZCgnLnBsLXByb2dyZXNzLXRpcCcpLmh0bWwoJ+S4i+i9veWujOaIkO+8jOato+WcqOW8ueWHuua1j+iniOWZqOS4i+i9veahhu+8gScpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgNTAwKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvYy5vbignY2xpY2snLCAnLmxpc3RlbmVyLXJldHJ5JywgYXN5bmMgKGUpID0+IHsKICAgICAgICAgICAgICAgIGxldCBvID0gX2ZhY3RvcnkoZSk7CiAgICAgICAgICAgICAgICBvLnRpcC5oaWRlKCk7CiAgICAgICAgICAgICAgICBvLmxpbmsuc2hvdygpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZG9jLm9uKCdjbGljaycsICcubGlzdGVuZXItaG93JywgYXN5bmMgKGUpID0+IHsKICAgICAgICAgICAgICAgIGxldCBvID0gX2ZhY3RvcnkoZSk7CiAgICAgICAgICAgICAgICBsZXQgaW5kZXggPSBvLmxpbmtbMF0uZGF0YXNldC5pbmRleDsKICAgICAgICAgICAgICAgIGlmIChyZXF1ZXN0W2luZGV4XSkgewogICAgICAgICAgICAgICAgICAgIHJlcXVlc3RbaW5kZXhdLmFib3J0KCk7CiAgICAgICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnNbaW5kZXhdKTsKICAgICAgICAgICAgICAgICAgICBvLnByb2dyZXNzLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICBvLnRpcC5zaG93KCk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZG9jLm9uKCdjbGljaycsICcubGlzdGVuZXItc3RvcCcsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgICAgICBsZXQgbyA9IF9mYWN0b3J5KGUpOwogICAgICAgICAgICAgICAgbGV0IGluZGV4ID0gby5saW5rWzBdLmRhdGFzZXQuaW5kZXg7CiAgICAgICAgICAgICAgICBpZiAocmVxdWVzdFtpbmRleF0pIHsKICAgICAgICAgICAgICAgICAgICByZXF1ZXN0W2luZGV4XS5hYm9ydCgpOwogICAgICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwoaW5zW2luZGV4XSk7CiAgICAgICAgICAgICAgICAgICAgby50aXAuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIG8ucHJvZ3Jlc3MuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIG8ubGluay5zaG93KDApOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZG9jLm9uKCdjbGljaycsICcubGlzdGVuZXItYmFjaycsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgICAgICBsZXQgbyA9IF9mYWN0b3J5KGUpOwogICAgICAgICAgICAgICAgby50aXAuaGlkZSgpOwogICAgICAgICAgICAgICAgby5saW5rLnNob3coKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvYy5vbignY2xpY2snLCAnLmxpc3RlbmVyLWxpbmstYXJpYSwgLmxpc3RlbmVyLWNvcHktYXJpYScsIChlKSA9PiB7CiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBpZiAoIWUudGFyZ2V0LmRhdGFzZXQubGluaykgewogICAgICAgICAgICAgICAgICAgICQoZS50YXJnZXQpLnJlbW92ZUNsYXNzKCdsaXN0ZW5lci1jb3B5LWFyaWEnKS5hZGRDbGFzcygncGwtYnRuLWRhbmdlcicpLmh0bWwoYCR7cGFuLmluaXRbNV198J+RiTxhIGhyZWY9IiR7cGFuLmFzc2lzdGFudH0iIHRhcmdldD0iX2JsYW5rIj7ngrnlh7vmraTlpITlronoo4U8L2E+8J+RiGApOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICB1dGlsLnNldENsaXBib2FyZChkZWNvZGVVUklDb21wb25lbnQoZS50YXJnZXQuZGF0YXNldC5saW5rKSk7CiAgICAgICAgICAgICAgICAgICAgJChlLnRhcmdldCkudGV4dCgn5aSN5Yi25oiQ5Yqf77yM5b+r5Y6757KY6LS05ZCn77yBJykuYW5pbWF0ZSh7b3BhY2l0eTogJzAuNSd9LCAic2xvdyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZG9jLm9uKCdjbGljaycsICcubGlzdGVuZXItbGluay1ycGMnLCBhc3luYyAoZSkgPT4gewogICAgICAgICAgICAgICAgbGV0IHRhcmdldCA9ICQoZS5jdXJyZW50VGFyZ2V0KTsKICAgICAgICAgICAgICAgIHRhcmdldC5maW5kKCcuaWNvbicpLnJlbW92ZSgpOwogICAgICAgICAgICAgICAgdGFyZ2V0LmZpbmQoJy5wbC1sb2FkaW5nJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICB0YXJnZXQucHJlcGVuZCh0aGlzLmNyZWF0ZUxvYWRpbmcoKSk7CiAgICAgICAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgdGhpcy5zZW5kTGlua1RvUlBDKGUuY3VycmVudFRhcmdldC5kYXRhc2V0LmZpbGVuYW1lLCBlLmN1cnJlbnRUYXJnZXQuZGF0YXNldC5saW5rKTsKICAgICAgICAgICAgICAgIGlmIChyZXMgPT09ICdzdWNjZXNzJykgewogICAgICAgICAgICAgICAgICAgICQoJy5saXN0ZW5lci1ycGMtdGFzaycpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlQ2xhc3MoJ3BsLWJ0bi1kYW5nZXInKS5odG1sKCflj5HpgIHmiJDlip/vvIzlv6vljrvnnIvnnIvlkKfvvIEnKS5hbmltYXRlKHtvcGFjaXR5OiAnMC41J30sICJzbG93Iik7CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlcyA9PT0gJ2Fzc2lzdGFudCcpIHsKICAgICAgICAgICAgICAgICAgICB0YXJnZXQuYWRkQ2xhc3MoJ3BsLWJ0bi1kYW5nZXInKS5odG1sKGAke3Bhbi5pbml0WzVdffCfkYk8YSBocmVmPSIke3Bhbi5hc3Npc3RhbnR9IiB0YXJnZXQ9Il9ibGFuayI+54K55Ye75q2k5aSE5a6J6KOFPC9hPvCfkYhgKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LmFkZENsYXNzKCdwbC1idG4tZGFuZ2VyJykudGV4dCgn5Y+R6YCB5aSx6LSl77yM6K+35qOA5p+l5oKo55qEUlBD6YWN572u5L+h5oGv77yBJykuYW5pbWF0ZSh7b3BhY2l0eTogJzAuNSd9LCAic2xvdyIpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZG9jLm9uKCdjbGljaycsICcubGlzdGVuZXItc2VuZC1ycGMnLCAoZSkgPT4gewogICAgICAgICAgICAgICAgJCgnLmxpc3RlbmVyLWxpbmstcnBjJykuY2xpY2soKTsKICAgICAgICAgICAgICAgICQoZS50YXJnZXQpLnRleHQoJ+WPkemAgeWujOaIkO+8jOWPkemAgee7k+aenOingeS4iuaWueaMiemSru+8gScpLmFuaW1hdGUoe29wYWNpdHk6ICcwLjUnfSwgInNsb3ciKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvYy5vbignY2xpY2snLCAnLmxpc3RlbmVyLWNvbmZpZy1ycGMnLCAoKSA9PiB7CiAgICAgICAgICAgICAgICB0aGlzLnNob3dTZXR0aW5nKCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkb2Mub24oJ2NsaWNrJywgJy5saXN0ZW5lci1ycGMtdGFzaycsICgpID0+IHsKICAgICAgICAgICAgICAgIGxldCBycGMgPSBKU09OLnN0cmluZ2lmeSh7CiAgICAgICAgICAgICAgICAgICAgZG9tYWluOiB1dGlsLmdldFZhbHVlKCdzZXR0aW5nX3JwY19kb21haW4nKSwKICAgICAgICAgICAgICAgICAgICBwb3J0OiB1dGlsLmdldFZhbHVlKCdzZXR0aW5nX3JwY19wb3J0JyksCiAgICAgICAgICAgICAgICB9KSwgdXJsID0gYGh0dHA6Ly9kLmJhaWR1eXVuLndpa2kvP3JwYz0ke3V0aWwuZShycGMpfSMke3V0aWwuZ2V0VmFsdWUoJ3NldHRpbmdfcnBjX3Rva2VuJyl9YDsKICAgICAgICAgICAgICAgIEdNX29wZW5JblRhYih1cmwsIHthY3RpdmU6IHRydWV9KTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvYy5vbignbW91c2VlbnRlciBtb3VzZWxlYXZlJywgJy5saXN0ZW5lci10aXAnLCAoZSkgPT4gewogICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlZW50ZXInKSB7CiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVuYW1lID0gZS5jdXJyZW50VGFyZ2V0LmlubmVyVGV4dDsKICAgICAgICAgICAgICAgICAgICBsZXQgc2l6ZSA9IGUuY3VycmVudFRhcmdldC5kYXRhc2V0LnNpemU7CiAgICAgICAgICAgICAgICAgICAgbGV0IHRpcCA9IGAke2ZpbGVuYW1lfTxzcGFuIHN0eWxlPSJtYXJnaW4tbGVmdDogMTBweDtjb2xvcjogI2Y1NmM2YzsiPiR7c2l6ZX08L3NwYW4+YDsKICAgICAgICAgICAgICAgICAgICAkKGUuY3VycmVudFRhcmdldCkuY3NzKHtvcGFjaXR5OiAnMC41J30pOwogICAgICAgICAgICAgICAgICAgICQoJy5wbC10b29sdGlwJykuaHRtbCh0aXApLmNzcyh7CiAgICAgICAgICAgICAgICAgICAgICAgICdsZWZ0JzogZS5wYWdlWCArIDEwICsgJ3B4JywKICAgICAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IGUucGFnZVkgLSBlLmN1cnJlbnRUYXJnZXQub2Zmc2V0VG9wID4gMTQgPyBlLnBhZ2VZICsgJ3B4JyA6IGUucGFnZVkgKyAyMCArICdweCcKICAgICAgICAgICAgICAgICAgICB9KS5zaG93KCk7CiAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICQoZS5jdXJyZW50VGFyZ2V0KS5jc3Moe29wYWNpdHk6ICcxJ30pOwogICAgICAgICAgICAgICAgICAgICQoJy5wbC10b29sdGlwJykuaGlkZSgwKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgfSwKCiAgICAgICAgY3JlYXRlVGlwKCkgewogICAgICAgICAgICAkKCdib2R5JykuYXBwZW5kKCc8ZGl2IGNsYXNzPSJwbC10b29sdGlwIj48L2Rpdj4nKTsKICAgICAgICB9LAoKICAgICAgICBjcmVhdGVMb2FkaW5nKCkgewogICAgICAgICAgICByZXR1cm4gJCgnPGRpdiBjbGFzcz0icGwtbG9hZGluZyI+PGRpdiBjbGFzcz0icGwtbG9hZGluZy1ib3giPjxkaXY+PGRpdj48L2Rpdj48ZGl2PjwvZGl2PjwvZGl2PjwvZGl2PjwvZGl2PicpOwogICAgICAgIH0sCgogICAgICAgIGFkZEJ1dHRvbigpIHsKICAgICAgICAgICAgaWYgKCFwdCkgcmV0dXJuOwogICAgICAgICAgICBpZiAoKCQoJy5wbC1idXR0b24nKS5sZW5ndGggfHwgJCgnLnBsLWJ1dHRvbi1pbml0JykubGVuZ3RoKSAmJiBwYW4ubmFtZSAhPT0gbmFtZSkgcmV0dXJuOwoKICAgICAgICAgICAgbGV0ICR0b29sV3JhcDsKICAgICAgICAgICAgbGV0ICRidXR0b24gPSAkKGA8c3BhbiBjbGFzcz0iZy1kcm9wZG93bi1idXR0b24gcG9pbnRlciBwbC1idXR0b24iPjxhIHN0eWxlPSJjb2xvcjojZmZmO2JhY2tncm91bmQ6ICR7Y29sb3J9O2JvcmRlci1jb2xvcjoke2NvbG9yfSIgY2xhc3M9ImctYnV0dG9uIGctYnV0dG9uLWJsdWUiIGhyZWY9ImphdmFzY3JpcHQ6OyI+PHNwYW4gY2xhc3M9ImctYnV0dG9uLXJpZ2h0Ij48ZW0gY2xhc3M9Imljb24gaWNvbi1kb3dubG9hZCI+PC9lbT48c3BhbiBjbGFzcz0idGV4dCIgc3R5bGU9IndpZHRoOiA2MHB4OyI+5LiL6L295Yqp5omLPC9zcGFuPjwvc3Bhbj48L2E+PHNwYW4gY2xhc3M9Im1lbnUiIHN0eWxlPSJ3aWR0aDphdXRvO3otaW5kZXg6NDE7Ym9yZGVyLWNvbG9yOiR7Y29sb3J9Ij48YSBzdHlsZT0iY29sb3I6JHtjb2xvcn0iIGNsYXNzPSJnLWJ1dHRvbi1tZW51IHBsLWJ1dHRvbi1tb2RlIiBkYXRhLW1vZGU9ImFwaSIgaHJlZj0iamF2YXNjcmlwdDo7Ij5BUEnkuIvovb08L2E+PGEgc3R5bGU9ImNvbG9yOiR7Y29sb3J9IiBjbGFzcz0iZy1idXR0b24tbWVudSBwbC1idXR0b24tbW9kZSIgZGF0YS1tb2RlPSJhcmlhIiBocmVmPSJqYXZhc2NyaXB0OjsiID5Bcmlh5LiL6L29PC9hPjxhIHN0eWxlPSJjb2xvcjoke2NvbG9yfSIgY2xhc3M9ImctYnV0dG9uLW1lbnUgcGwtYnV0dG9uLW1vZGUiIGRhdGEtbW9kZT0icnBjIiBocmVmPSJqYXZhc2NyaXB0OjsiPlJQQ+S4i+i9vTwvYT48YSBzdHlsZT0iY29sb3I6JHtjb2xvcn0iIGNsYXNzPSJnLWJ1dHRvbi1tZW51IHBsLWJ1dHRvbi1tb2RlIiBkYXRhLW1vZGU9ImN1cmwiIGhyZWY9ImphdmFzY3JpcHQ6OyI+Y1VSTOS4i+i9vTwvYT4ke3Bhbi5jb2RlID09IDIwMCAmJiB2ZXJzaW9uIDwgcGFuLnZlcnNpb24gPyBwYW4ubmV3IDogJyd9PC9zcGFuPjwvc3Bhbj5gKTsKICAgICAgICAgICAgaWYgKHB0ID09PSAnaG9tZScpICR0b29sV3JhcCA9ICQocGFuLmJ0bi5ob21lKTsKICAgICAgICAgICAgaWYgKHB0ID09PSAnbWFpbicpIHsKICAgICAgICAgICAgICAgICR0b29sV3JhcCA9ICQocGFuLmJ0bi5tYWluKTsKICAgICAgICAgICAgICAgICRidXR0b24gPSAkKGA8ZGl2IGNsYXNzPSJwbC1idXR0b24iIHN0eWxlPSJwb3NpdGlvbjogcmVsYXRpdmU7IGRpc3BsYXk6IGlubGluZS1ibG9jazsgbWFyZ2luLXJpZ2h0OiA4cHg7Ij48YnV0dG9uIGNsYXNzPSJ1LWJ0biBuZC1maWxlLWxpc3QtdG9vbGJhci1hY3Rpb24taXRlbSB1LWJ0bi0tcHJpbWFyeSB1LWJ0bi0tZGVmYXVsdCB1LWJ0bi0tc21hbGwgaXMtcm91bmQgaXMtaGFzLWljb24iICBzdHlsZT0iYmFja2dyb3VuZDogJHtjb2xvcn07Ym9yZGVyLWNvbG9yOiAke2NvbG9yfSI+PGkgY2xhc3M9Imljb25mb250IGlubGluZS1ibG9jay12LW1pZGRsZSBuZC1maWxlLWxpc3QtdG9vbGJhcl9fYWN0aW9uLWl0ZW0taWNvbiBpY29uLWRvd25sb2FkIj48L2k+PHNwYW4gY2xhc3M9ImlubGluZS1ibG9jay12LW1pZGRsZSBuZC1maWxlLWxpc3QtdG9vbGJhci1hY3Rpb24taXRlbS10ZXh0Ij7kuIvovb3liqnmiYs8L3NwYW4+PC9idXR0b24+PHVsIGNsYXNzPSJkcm9wZG93bi1saXN0IG5kLWNvbW1vbi1mbG9hdC1tZW51IHBsLW1lbnUiICBzdHlsZT0iZGlzcGxheTogbm9uZTsiPjxsaSBjbGFzcz0ic3ViIGN1cnNvci1wIHBsLWJ1dHRvbi1tb2RlIiBkYXRhLW1vZGU9ImFwaSI+QVBJ5LiL6L29PC9saT48bGkgY2xhc3M9InN1YiBjdXJzb3ItcCBwbC1idXR0b24tbW9kZSIgZGF0YS1tb2RlPSJhcmlhIj5Bcmlh5LiL6L29PC9saT48bGkgY2xhc3M9InN1YiBjdXJzb3ItcCBwbC1idXR0b24tbW9kZSIgZGF0YS1tb2RlPSJycGMiPlJQQ+S4i+i9vTwvbGk+PGxpIGNsYXNzPSJzdWIgY3Vyc29yLXAgcGwtYnV0dG9uLW1vZGUiIGRhdGEtbW9kZT0iY3VybCI+Y1VSTOS4i+i9vTwvbGk+JHtwYW4uY29kZSA9PSAyMDAgJiYgdmVyc2lvbiA8IHBhbi52ZXJzaW9uID8gcGFuLm5ld1ggOiAnJ308L3VsPjwvZGl2PmApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwdCA9PT0gJ3NoYXJlJykgJHRvb2xXcmFwID0gJChwYW4uYnRuLnNoYXJlKTsKICAgICAgICAgICAgJHRvb2xXcmFwLnByZXBlbmQoJGJ1dHRvbik7CiAgICAgICAgICAgIHV0aWwuY2xvZyhg5Yqp5omL5Yqg6L295oiQ5Yqf77yB54mI5pys77yaJHt2ZXJzaW9ufWApOwogICAgICAgICAgICB1dGlsLnNldEJEVVNTKCk7CiAgICAgICAgICAgIHRoaXMuYWRkUGFnZUxpc3RlbmVyKCk7CiAgICAgICAgfSwKCiAgICAgICAgYWRkSW5pdEJ1dHRvbigpIHsKICAgICAgICAgICAgaWYgKCFwdCkgcmV0dXJuOwogICAgICAgICAgICBpZiAoJCgnLnBsLWJ1dHRvbi1pbml0JykubGVuZ3RoICYmIHBhbi5uYW1lICE9PSBuYW1lKSByZXR1cm47CiAgICAgICAgICAgIGxldCAkdG9vbFdyYXA7CiAgICAgICAgICAgIHV0aWwuc2V0SW50KCcucGwtYnV0dG9uJyk7CiAgICAgICAgICAgIGxldCAkYnV0dG9uID0gJChgPHNwYW4gY2xhc3M9ImctZHJvcGRvd24tYnV0dG9uIHBvaW50ZXIgcGwtYnV0dG9uLWluaXQiIHN0eWxlPSJvcGFjaXR5Oi41Ij48YSBzdHlsZT0iY29sb3I6I2ZmZjtiYWNrZ3JvdW5kOiAke2NvbG9yfTtib3JkZXItY29sb3I6JHtjb2xvcn0iIGNsYXNzPSJnLWJ1dHRvbiBnLWJ1dHRvbi1ibHVlIiBocmVmPSJqYXZhc2NyaXB0OjsiPjxzcGFuIGNsYXNzPSJnLWJ1dHRvbi1yaWdodCI+PGVtIGNsYXNzPSJpY29uIGljb24tZG93bmxvYWQiPjwvZW0+PHNwYW4gY2xhc3M9InRleHQiIHN0eWxlPSJ3aWR0aDogNjBweDsiPuS4i+i9veWKqeaJizwvc3Bhbj48L3NwYW4+PC9zcGFuPjwvYT48L3NwYW4+YCk7CiAgICAgICAgICAgIGlmIChwdCA9PT0gJ2hvbWUnKSAkdG9vbFdyYXAgPSAkKHBhbi5idG4uaG9tZSk7CiAgICAgICAgICAgIGlmIChwdCA9PT0gJ21haW4nKSB7CiAgICAgICAgICAgICAgICAkdG9vbFdyYXAgPSAkKHBhbi5idG4ubWFpbik7CiAgICAgICAgICAgICAgICAkYnV0dG9uID0gJChgPGEgaHJlZj0iamF2YXNjcmlwdDo7IiBjbGFzcz0icGwtYnV0dG9uLWluaXQiIHN0eWxlPSJvcGFjaXR5Oi41OyBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IG1hcmdpbi1yaWdodDogOHB4OyI+PGJ1dHRvbiBjbGFzcz0idS1idG4gbmQtZmlsZS1saXN0LXRvb2xiYXItYWN0aW9uLWl0ZW0gdS1idG4tLXByaW1hcnkgdS1idG4tLWRlZmF1bHQgdS1idG4tLXNtYWxsIGlzLXJvdW5kIGlzLWhhcy1pY29uIiBzdHlsZT0iYmFja2dyb3VuZDogJHtjb2xvcn07Ym9yZGVyLWNvbG9yOiAke2NvbG9yfSI+PGkgY2xhc3M9Imljb25mb250IGlubGluZS1ibG9jay12LW1pZGRsZSBuZC1maWxlLWxpc3QtdG9vbGJhcl9fYWN0aW9uLWl0ZW0taWNvbiBpY29uLWRvd25sb2FkIj48L2k+PHNwYW4gY2xhc3M9ImlubGluZS1ibG9jay12LW1pZGRsZSBuZC1maWxlLWxpc3QtdG9vbGJhci1hY3Rpb24taXRlbS10ZXh0Ij7kuIvovb3liqnmiYs8L3NwYW4+PC9idXR0b24+PC9hPmApOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGlmIChwdCA9PT0gJ3NoYXJlJykgJHRvb2xXcmFwID0gJChwYW4uYnRuLnNoYXJlKTsKICAgICAgICAgICAgJHRvb2xXcmFwLnByZXBlbmQoJGJ1dHRvbik7CiAgICAgICAgICAgICRidXR0b24uY2xpY2soKCkgPT4gewogICAgICAgICAgICAgICAgdGhpcy5faW5pdERpYWxvZygpOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBhc3luYyBnZXRQQ1NMaW5rKCkgewogICAgICAgICAgICBzZWxlY3RMaXN0ID0gdGhpcy5zZWxlY3RlZExpc3QoKTsKICAgICAgICAgICAgbGV0IGZpZExpc3QgPSB0aGlzLl9nZXRGaWRMaXN0KCksIHVybCwgcmVzOwogICAgICAgICAgICBpZiAocHQgPT09ICdob21lJyB8fCBwdCA9PT0gJ21haW4nKSB7CiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0TGlzdC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5tZXNzYWdlLmVycm9yKCfmj5DnpLrvvJror7flhYjli77pgInopoHkuIvovb3nmoTmlofku7bvvIEnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChmaWRMaXN0Lmxlbmd0aCA9PT0gMikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLm1lc3NhZ2UuZXJyb3IoJ+aPkOekuu+8muivt+aJk+W8gOaWh+S7tuWkueWQjuWLvumAieaWh+S7tu+8gScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgZmlkTGlzdCA9IGVuY29kZVVSSUNvbXBvbmVudChmaWRMaXN0KTsKICAgICAgICAgICAgICAgIHVybCA9IGAke3Bhbi5wY3NbMF19JmZzaWRzPSR7ZmlkTGlzdH1gOwogICAgICAgICAgICAgICAgcmVzID0gYXdhaXQgdXRpbC5nZXQodXJsLCB7IlVzZXItQWdlbnQiOiBwYW4udWF9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocHQgPT09ICdzaGFyZScpIHsKICAgICAgICAgICAgICAgIHRoaXMuZ2V0U2hhcmVEYXRhKCk7CiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0TGlzdC5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5tZXNzYWdlLmVycm9yKCfmj5DnpLrvvJror7flhYjli77pgInopoHkuIvovb3nmoTmlofku7bvvIEnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChmaWRMaXN0Lmxlbmd0aCA9PT0gMikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLm1lc3NhZ2UuZXJyb3IoJ+aPkOekuu+8muivt+aJk+W8gOaWh+S7tuWkueWQjuWLvumAieaWh+S7tu+8gScpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCFwYXJhbXMuc2lnbikgewogICAgICAgICAgICAgICAgICAgIGxldCB1cmwgPSBgJHtwYW4ucGNzWzJdfSZzdXJsPSR7cGFyYW1zLnN1cmx9JmxvZ2lkPSR7cGFyYW1zLmxvZ2lkfWA7CiAgICAgICAgICAgICAgICAgICAgbGV0IHIgPSBhd2FpdCB1dGlsLmdldCh1cmwpOwogICAgICAgICAgICAgICAgICAgIGlmIChyLmVycm5vID09PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy5zaWduID0gci5kYXRhLnNpZ247CiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmFtcy50aW1lc3RhbXAgPSByLmRhdGEudGltZXN0YW1wOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBkaWFsb2cgPSBhd2FpdCBTd2FsLmZpcmUoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3Q6IHRydWUsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiAnaW5mbycsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogYOaPkOekuu+8muivt+WwhuaWh+S7tjxzcGFuIGNsYXNzPSJ0YWctZGFuZ2VyIj5b5L+d5a2Y5Yiw572R55uYXTwvc3Bhbj7wn5GJ5ZyoPHNwYW4gY2xhc3M9InRhZy1kYW5nZXIiPlvmiJHnmoTnvZHnm5hdPC9zcGFuPuS4reS4i+i9ve+8gWAsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogdHJ1ZSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiAn54K55Ye75L+d5a2YJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wJywKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaWFsb2cuaXNDb25maXJtZWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJy50b29scy1zaGFyZS1zYXZlLWhiJylbMF0uY2xpY2soKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKCFwYXJhbXMuYmRzdG9rZW4pIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5tZXNzYWdlLmVycm9yKCfmj5DnpLrvvJrnmbvlvZXnvZHnm5jlkI7miY3og73kvb/nlKjmraTlip/og73lk6bvvIEnKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGxldCBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpOwogICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdlbmNyeXB0JywgcGFyYW1zLmVuY3J5cHQpOwogICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdwcm9kdWN0JywgcGFyYW1zLnByb2R1Y3QpOwogICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCd1aycsIHBhcmFtcy51ayk7CiAgICAgICAgICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ3ByaW1hcnlpZCcsIHBhcmFtcy5wcmltYXJ5aWQpOwogICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWRfbGlzdCcsIGZpZExpc3QpOwogICAgICAgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdsb2dpZCcsIHBhcmFtcy5sb2dpZCk7CiAgICAgICAgICAgICAgICBwYXJhbXMuc2hhcmVUeXBlID09PSAnc2VjcmV0JyA/IGZvcm1EYXRhLmFwcGVuZCgnZXh0cmEnLCBwYXJhbXMuZXh0cmEpIDogJyc7CiAgICAgICAgICAgICAgICB1cmwgPSBgJHtwYW4ucGNzWzFdfSZzaWduPSR7cGFyYW1zLnNpZ259JnRpbWVzdGFtcD0ke3BhcmFtcy50aW1lc3RhbXB9YDsKICAgICAgICAgICAgICAgIHJlcyA9IGF3YWl0IHV0aWwucG9zdCh1cmwsIGZvcm1EYXRhLCB7IlVzZXItQWdlbnQiOiBwYW4udWF9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBpZiAocmVzLmVycm5vID09PSAwKSB7CiAgICAgICAgICAgICAgICBsZXQgaHRtbCA9IHRoaXMuZ2VuZXJhdGVEb20ocmVzLmxpc3QpOwogICAgICAgICAgICAgICAgdGhpcy5zaG93TWFpbkRpYWxvZyhwYW5bbW9kZV1bMF0sIGh0bWwsIHBhblttb2RlXVsxXSk7CiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVzLmVycm5vID09PSAxMTIpIHsKICAgICAgICAgICAgICAgIHJldHVybiB1dGlsLm1lc3NhZ2UuZXJyb3IoJ+aPkOekuu+8mumhtemdoui/h+acn++8jOivt+WIt+aWsOmHjeivle+8gScpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgdXRpbC5tZXNzYWdlLmVycm9yKCfmj5DnpLrvvJrojrflj5bkuIvovb3pk77mjqXlpLHotKXvvIHor7fliLfmlrDnvZHpobXlkI7ph43or5XvvIEnKTsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGdlbmVyYXRlRG9tKGxpc3QpIHsKICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSAnPGRpdiBjbGFzcz0icGwtbWFpbiI+JzsKICAgICAgICAgICAgbGV0IGFsaW5rQWxsVGV4dCA9ICcnOwogICAgICAgICAgICB1dGlsLnNvcnRCeU5hbWUobGlzdCk7CiAgICAgICAgICAgIGxpc3QuZm9yRWFjaCgodiwgaSkgPT4gewogICAgICAgICAgICAgICAgaWYgKHYuaXNkaXIgPT09IDEpIHJldHVybjsKICAgICAgICAgICAgICAgIGxldCBmaWxlbmFtZSA9IHYuc2VydmVyX2ZpbGVuYW1lIHx8IHYuZmlsZW5hbWU7CiAgICAgICAgICAgICAgICBsZXQgZXh0ID0gdXRpbC5nZXRFeHRlbnNpb24oZmlsZW5hbWUpOwogICAgICAgICAgICAgICAgbGV0IHNpemUgPSB1dGlsLnNpemVGb3JtYXQodi5zaXplKTsKICAgICAgICAgICAgICAgIGxldCBkbGluayA9IHYuZGxpbms7CiAgICAgICAgICAgICAgICBpZiAobW9kZSA9PT0gJ2FwaScpIHsKICAgICAgICAgICAgICAgICAgICBjb250ZW50ICs9IGA8ZGl2IGNsYXNzPSJwbC1pdGVtIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbC1pdGVtLW5hbWUgbGlzdGVuZXItdGlwIiBkYXRhLXNpemU9IiR7c2l6ZX0iPiR7ZmlsZW5hbWV9PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgY2xhc3M9InBsLWl0ZW0tbGluayBsaXN0ZW5lci1saW5rLWFwaSIgaHJlZj0iJHtkbGlua30iIGRhdGEtZmlsZW5hbWU9IiR7ZmlsZW5hbWV9IiBkYXRhLWxpbms9IiR7ZGxpbmt9IiBkYXRhLWluZGV4PSIke2l9Ij4ke2RsaW5rfTwvYT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbC1pdGVtLXRpcCIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPjxzcGFuPuiLpeayoeacieW8ueWHuklETeS4i+i9veahhu+8jOaJvuWIsElETSA8Yj7pgInpobk8L2I+IC0+IDxiPuaWh+S7tuexu+WeizwvYj4gLT4gPGI+56ys5LiA5Liq5qGGPC9iPiDkuK3mt7vliqDlkI7nvIAgPHNwYW4gY2xhc3M9InBsLWV4dCI+JHtleHR9PC9zcGFuPu+8jDxhIGhyZWY9Imh0dHBzOi8vd3d3LmJhaWR1eXVuLndpa2kvemgtY24vaWRtLmh0bWwiIHRhcmdldD0iX2JsYW5rIj7or6bop4HmraTlpIQ8L2E+PC9zcGFuPiA8c3BhbiBjbGFzcz0icGwtYmFjayBsaXN0ZW5lci1iYWNrIj7ov5Tlm548L3NwYW4+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGwtaXRlbS1wcm9ncmVzcyIgc3R5bGU9ImRpc3BsYXk6IG5vbmUiPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbC1wcm9ncmVzcyI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbC1wcm9ncmVzcy1vdXRlciI+PC9kaXY+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJwbC1wcm9ncmVzcy1pbm5lciIgc3R5bGU9IndpZHRoOjUlIj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGwtcHJvZ3Jlc3MtaW5uZXItdGV4dCI+MCU8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9InBsLXByb2dyZXNzLXN0b3AgbGlzdGVuZXItc3RvcCI+5Y+W5raI5LiL6L29PC9zcGFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz0icGwtcHJvZ3Jlc3MtdGlwIj7mnKrlj5HnjrBJRE3vvIzkvb/nlKjoh6rluKbmtY/op4jlmajkuIvovb08L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPSJwbC1wcm9ncmVzcy1ob3cgbGlzdGVuZXItaG93Ij7lpoLkvZXllKTotbdJRE3vvJ88L3NwYW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+PC9kaXY+YDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGlmIChtb2RlID09PSAnYXJpYScpIHsKICAgICAgICAgICAgICAgICAgICBsZXQgYWxpbmsgPSB1dGlsLmNvbnZlcnRMaW5rVG9BcmlhKGRsaW5rLCBmaWxlbmFtZSwgcGFuLnVhKTsKICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIChhbGluaykgPT09ICdvYmplY3QnKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgKz0gYDxkaXYgY2xhc3M9InBsLWl0ZW0iPgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InBsLWl0ZW0tbmFtZSBsaXN0ZW5lci10aXAiIGRhdGEtc2l6ZT0iJHtzaXplfSI+JHtmaWxlbmFtZX08L2Rpdj4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YSBjbGFzcz0icGwtaXRlbS1saW5rIiB0YXJnZXQ9Il9ibGFuayIgaHJlZj0iJHthbGluay5saW5rfSIgdGl0bGU9IueCueWHu+WkjeWItmFyaWEyY+mTvuaOpSIgZGF0YS1maWxlbmFtZT0iJHtmaWxlbmFtZX0iIGRhdGEtbGluaz0iJHthbGluay5saW5rfSI+JHtkZWNvZGVVUklDb21wb25lbnQoYWxpbmsudGV4dCl9PC9hPiA8L2Rpdj5gOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFsaW5rQWxsVGV4dCArPSBhbGluayArICdcclxuJzsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSBgPGRpdiBjbGFzcz0icGwtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGwtaXRlbS1uYW1lIGxpc3RlbmVyLXRpcCIgZGF0YS1zaXplPSIke3NpemV9Ij4ke2ZpbGVuYW1lfTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwbC1pdGVtLWxpbmsgbGlzdGVuZXItbGluay1hcmlhIiBocmVmPSIke2FsaW5rfSIgdGl0bGU9IueCueWHu+WkjeWItmFyaWEyY+mTvuaOpSIgZGF0YS1maWxlbmFtZT0iJHtmaWxlbmFtZX0iIGRhdGEtbGluaz0iJHthbGlua30iPiR7ZGVjb2RlVVJJQ29tcG9uZW50KGFsaW5rKX08L2E+IDwvZGl2PmA7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdycGMnKSB7CiAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSBgPGRpdiBjbGFzcz0icGwtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGwtaXRlbS1uYW1lIGxpc3RlbmVyLXRpcCIgZGF0YS1zaXplPSIke3NpemV9Ij4ke2ZpbGVuYW1lfTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9InBsLWl0ZW0tbGluayBsaXN0ZW5lci1saW5rLXJwYyBwbC1idG4tcHJpbWFyeSBwbC1idG4taW5mbyIgZGF0YS1maWxlbmFtZT0iJHtmaWxlbmFtZX0iIGRhdGEtbGluaz0iJHtkbGlua30iPjxlbSBjbGFzcz0iaWNvbiBpY29uLWRldmljZSI+PC9lbT48c3BhbiBzdHlsZT0ibWFyZ2luLWxlZnQ6IDVweDsiPuaOqOmAgeWIsFJQQ+S4i+i9veWZqDwvc3Bhbj48L2J1dHRvbj48L2Rpdj5gOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdjdXJsJykgewogICAgICAgICAgICAgICAgICAgIGxldCBhbGluayA9IHV0aWwuY29udmVydExpbmtUb0N1cmwoZGxpbmssIGZpbGVuYW1lLCBwYW4udWEpOwogICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgKGFsaW5rKSA9PT0gJ29iamVjdCcpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSBgPGRpdiBjbGFzcz0icGwtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGwtaXRlbS1uYW1lIGxpc3RlbmVyLXRpcCIgZGF0YS1zaXplPSIke3NpemV9Ij4ke2ZpbGVuYW1lfTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwbC1pdGVtLWxpbmsiIHRhcmdldD0iX2JsYW5rIiBocmVmPSIke2FsaW5rLmxpbmt9IiB0aXRsZT0i54K55Ye75aSN5Yi2Y3VybOmTvuaOpSIgZGF0YS1maWxlbmFtZT0iJHtmaWxlbmFtZX0iIGRhdGEtbGluaz0iJHthbGluay5saW5rfSI+JHtkZWNvZGVVUklDb21wb25lbnQoYWxpbmsudGV4dCl9PC9hPiA8L2Rpdj5gOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGFsaW5rQWxsVGV4dCArPSBhbGluayArICdcclxuJzsKICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCArPSBgPGRpdiBjbGFzcz0icGwtaXRlbSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0icGwtaXRlbS1uYW1lIGxpc3RlbmVyLXRpcCIgZGF0YS1zaXplPSIke3NpemV9Ij4ke2ZpbGVuYW1lfTwvZGl2PgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGNsYXNzPSJwbC1pdGVtLWxpbmsgbGlzdGVuZXItbGluay1hcmlhIiBocmVmPSIke2FsaW5rfSIgdGl0bGU9IueCueWHu+WkjeWItmN1cmzpk77mjqUiIGRhdGEtZmlsZW5hbWU9IiR7ZmlsZW5hbWV9IiBkYXRhLWxpbms9IiR7YWxpbmt9Ij4ke2RlY29kZVVSSUNvbXBvbmVudChhbGluayl9PC9hPiA8L2Rpdj5gOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGNvbnRlbnQgKz0gJzwvZGl2Pic7CiAgICAgICAgICAgIGlmIChtb2RlID09PSAnYXJpYScpCiAgICAgICAgICAgICAgICBjb250ZW50ICs9IGA8ZGl2IGNsYXNzPSJwbC1leHRyYSI+PGJ1dHRvbiBjbGFzcz0icGwtYnRuLXByaW1hcnkgbGlzdGVuZXItY29weS1hcmlhIiBkYXRhLWxpbms9IiR7YWxpbmtBbGxUZXh0fSI+5aSN5Yi25YWo6YOo6ZO+5o6lPC9idXR0b24+PC9kaXY+YDsKICAgICAgICAgICAgaWYgKG1vZGUgPT09ICdycGMnKQogICAgICAgICAgICAgICAgY29udGVudCArPSAnPGRpdiBjbGFzcz0icGwtZXh0cmEiPjxidXR0b24gY2xhc3M9InBsLWJ0bi1wcmltYXJ5ICBsaXN0ZW5lci1zZW5kLXJwYyI+5Y+R6YCB5YWo6YOo6ZO+5o6lPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0icGwtYnRuLXByaW1hcnkgbGlzdGVuZXItY29uZmlnLXJwYyIgc3R5bGU9Im1hcmdpbi1sZWZ0OiAxMHB4OyI+6YWN572uUlBD5pyN5YqhPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0icGwtYnRuLXByaW1hcnkgcGwtYnRuLXN1Y2Nlc3MgbGlzdGVuZXItcnBjLXRhc2siIHN0eWxlPSJtYXJnaW4tbGVmdDogMTBweDtkaXNwbGF5OiBub25lIj7mn6XnnIvkuIvovb3ku7vliqE8L2J1dHRvbj48L2Rpdj4nOwogICAgICAgICAgICByZXR1cm4gY29udGVudDsKICAgICAgICB9LAoKICAgICAgICBhc3luYyBzZW5kTGlua1RvUlBDKGZpbGVuYW1lLCBsaW5rKSB7CiAgICAgICAgICAgIGxldCBycGMgPSB7CiAgICAgICAgICAgICAgICBkb21haW46IHV0aWwuZ2V0VmFsdWUoJ3NldHRpbmdfcnBjX2RvbWFpbicpLAogICAgICAgICAgICAgICAgcG9ydDogdXRpbC5nZXRWYWx1ZSgnc2V0dGluZ19ycGNfcG9ydCcpLAogICAgICAgICAgICAgICAgdG9rZW46IHV0aWwuZ2V0VmFsdWUoJ3NldHRpbmdfcnBjX3Rva2VuJyksCiAgICAgICAgICAgICAgICBkaXI6IHV0aWwuZ2V0VmFsdWUoJ3NldHRpbmdfcnBjX2RpcicpLAogICAgICAgICAgICB9OwogICAgICAgICAgICBsZXQgQkRVU1MgPSB1dGlsLmdldEJEVVNTKCk7CiAgICAgICAgICAgIGlmICghQkRVU1MpIHJldHVybiAnYXNzaXN0YW50JzsKCiAgICAgICAgICAgIGxldCB1cmwgPSBgJHtycGMuZG9tYWlufToke3JwYy5wb3J0fS9qc29ucnBjYDsKICAgICAgICAgICAgbGV0IHJwY0RhdGEgPSB7CiAgICAgICAgICAgICAgICBpZDogbmV3IERhdGUoKS5nZXRUaW1lKCksCiAgICAgICAgICAgICAgICBqc29ucnBjOiAnMi4wJywKICAgICAgICAgICAgICAgIG1ldGhvZDogJ2FyaWEyLmFkZFVyaScsCiAgICAgICAgICAgICAgICBwYXJhbXM6IFtgdG9rZW46JHtycGMudG9rZW59YCwgW2xpbmtdLCB7CiAgICAgICAgICAgICAgICAgICAgZGlyOiBycGMuZGlyLAogICAgICAgICAgICAgICAgICAgIG91dDogZmlsZW5hbWUsCiAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBbYFVzZXItQWdlbnQ6ICR7cGFuLnVhfWAsIGBDb29raWU6IEJEVVNTPSR7QkRVU1N9YF0KICAgICAgICAgICAgICAgIH1dCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBsZXQgcmVzID0gYXdhaXQgdXRpbC5wb3N0KHVybCwgcnBjRGF0YSwgeyJVc2VyLUFnZW50IjogcGFuLnVhfSwgJycpOwogICAgICAgICAgICAgICAgaWYgKHJlcy5yZXN1bHQpIHJldHVybiAnc3VjY2Vzcyc7CiAgICAgICAgICAgICAgICByZXR1cm4gJ2ZhaWwnOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gJ2ZhaWwnOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgc2VsZWN0ZWRMaXN0KCkgewogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgcmV0dXJuIHJlcXVpcmUoJ3N5c3RlbS1jb3JlOmNvbnRleHQvY29udGV4dC5qcycpLmluc3RhbmNlRm9yU3lzdGVtLmxpc3QuZ2V0U2VsZWN0ZWQoKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5uZC1tYWluLWxheW91dCcpLl9fdnVlX18uJGNoaWxkcmVuWzJdLnNlbGVjdGVkTGlzdDsKICAgICAgICAgICAgfQogICAgICAgIH0sCgogICAgICAgIGdldExvZ2lkKCkgewogICAgICAgICAgICBsZXQgdXQgPSByZXF1aXJlKCJzeXN0ZW0tY29yZTpjb250ZXh0L2NvbnRleHQuanMiKS5pbnN0YW5jZUZvclN5c3RlbS50b29scy5iYXNlU2VydmljZTsKICAgICAgICAgICAgcmV0dXJuIHV0LmJhc2U2NEVuY29kZSh1dGlsLmdldENvb2tpZSgiQkFJRFVJRCIpKTsKICAgICAgICB9LAoKICAgICAgICBnZXRTaGFyZURhdGEoKSB7CiAgICAgICAgICAgIGxldCByZXMgPSBsb2NhbHMuZHVtcCgpCiAgICAgICAgICAgIHBhcmFtcy5zaGFyZVR5cGUgPSAnc2VjcmV0JzsKICAgICAgICAgICAgcGFyYW1zLnNpZ24gPSAnJzsKICAgICAgICAgICAgcGFyYW1zLnRpbWVzdGFtcCA9ICcnOwogICAgICAgICAgICBwYXJhbXMuYmRzdG9rZW4gPSByZXMuYmRzdG9rZW4udmFsdWU7CiAgICAgICAgICAgIHBhcmFtcy5jaGFubmVsID0gJ2NodW5sZWknOwogICAgICAgICAgICBwYXJhbXMuY2xpZW50dHlwZSA9IDA7CiAgICAgICAgICAgIHBhcmFtcy53ZWIgPSAxOwogICAgICAgICAgICBwYXJhbXMuYXBwX2lkID0gMjUwNTI4OwogICAgICAgICAgICBwYXJhbXMuZW5jcnlwdCA9IDA7CiAgICAgICAgICAgIHBhcmFtcy5wcm9kdWN0ID0gJ3NoYXJlJzsKICAgICAgICAgICAgcGFyYW1zLmxvZ2lkID0gdGhpcy5nZXRMb2dpZCgpOwogICAgICAgICAgICBwYXJhbXMucHJpbWFyeWlkID0gcmVzLnNoYXJlaWQudmFsdWU7CiAgICAgICAgICAgIHBhcmFtcy51ayA9IHJlcy5zaGFyZV91ay52YWx1ZTsKICAgICAgICAgICAgcGFyYW1zLnNoYXJlVHlwZSA9PT0gJ3NlY3JldCcgJiYgKHBhcmFtcy5leHRyYSA9IHRoaXMuX2dldEV4dHJhKCkpOwogICAgICAgICAgICBwYXJhbXMuc3VybCA9IHRoaXMuX2dldFN1cmwoKTsKICAgICAgICB9LAoKICAgICAgICBfZGV0ZWN0UGFnZSgpIHsKICAgICAgICAgICAgbGV0IHBhdGggPSBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKCcvZGlzay8nLCAnJyk7CiAgICAgICAgICAgIGlmIChwYXRoID09PSAnaG9tZScpIHJldHVybiAnaG9tZSc7CiAgICAgICAgICAgIGlmIChwYXRoID09PSAnbWFpbicpIHJldHVybiAnbWFpbic7CiAgICAgICAgICAgIGlmICgvXlwvKHN8c2hhcmUpXC8vLnRlc3QocGF0aCkpIHJldHVybiAnc2hhcmUnOwogICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfSwKCiAgICAgICAgX2dldEV4dHJhKCkgewogICAgICAgICAgICBsZXQgc2VLZXkgPSBkZWNvZGVVUklDb21wb25lbnQodXRpbC5nZXRDb29raWUoJ0JEQ0xORCcpKTsKICAgICAgICAgICAgcmV0dXJuICd7JyArICcic2VrZXkiOiInICsgc2VLZXkgKyAnIicgKyAifSI7CiAgICAgICAgfSwKCiAgICAgICAgX2dldFN1cmwoKSB7CiAgICAgICAgICAgIGxldCByZWcgPSAvKD88PXNcL3xzdXJsPSkoW2EtekEtWjAtOV8tXSspL2c7CiAgICAgICAgICAgIGlmIChyZWcudGVzdChsb2NhdGlvbi5ocmVmKSkgewogICAgICAgICAgICAgICAgcmV0dXJuIGxvY2F0aW9uLmhyZWYubWF0Y2gocmVnKVswXTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gJyc7CiAgICAgICAgfSwKCiAgICAgICAgX2dldEZpZExpc3QoKSB7CiAgICAgICAgICAgIGxldCBmaWRsaXN0ID0gW107CiAgICAgICAgICAgIHNlbGVjdExpc3QuZm9yRWFjaCh2ID0+IHsKICAgICAgICAgICAgICAgIGlmICgrdi5pc2RpciA9PSAxKSByZXR1cm47CiAgICAgICAgICAgICAgICBmaWRsaXN0LnB1c2godi5mc19pZCk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICByZXR1cm4gJ1snICsgZmlkbGlzdCArICddJzsKICAgICAgICB9LAogICAgICAgIF9yZXNldERhdGEoKSB7CiAgICAgICAgICAgIHByb2dyZXNzID0ge307CiAgICAgICAgICAgICQuZWFjaChyZXF1ZXN0LCAoa2V5KSA9PiB7CiAgICAgICAgICAgICAgICAocmVxdWVzdFtrZXldKS5hYm9ydCgpOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgJC5lYWNoKGlucywgKGtleSkgPT4gewogICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbChpbnNba2V5XSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZG0gPSB7fTsKICAgICAgICAgICAgaW5zID0ge307CiAgICAgICAgICAgIHJlcXVlc3QgPSB7fTsKICAgICAgICB9LAoKICAgICAgICBzaG93TWFpbkRpYWxvZyh0aXRsZSwgaHRtbCwgZm9vdGVyKSB7CiAgICAgICAgICAgIFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICB0aXRsZSwKICAgICAgICAgICAgICAgIGh0bWwsCiAgICAgICAgICAgICAgICBmb290ZXIsCiAgICAgICAgICAgICAgICBhbGxvd091dHNpZGVDbGljazogZmFsc2UsCiAgICAgICAgICAgICAgICBzaG93Q2xvc2VCdXR0b246IHRydWUsCiAgICAgICAgICAgICAgICBzaG93Q29uZmlybUJ1dHRvbjogZmFsc2UsCiAgICAgICAgICAgICAgICBwb3NpdGlvbjogJ3RvcCcsCiAgICAgICAgICAgICAgICB3aWR0aCwKICAgICAgICAgICAgICAgIHBhZGRpbmc6ICcxNXB4IDIwcHggNXB4JywKICAgICAgICAgICAgICAgIGN1c3RvbUNsYXNzLAogICAgICAgICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0RGF0YSgpOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBhc3luYyBpbml0UGFuTGlua2VyKCkgewogICAgICAgICAgICBwdCA9IHRoaXMuX2RldGVjdFBhZ2UoKTsKICAgICAgICAgICAgbGV0IHJlcyA9IGF3YWl0IHV0aWwucG9zdAogICAgICAgICAgICAoYGh0dHBzOi8vYXBpLmJhaWR1eXVuLndpa2kvY29uZmlnP3Zlcj0ke3ZlcnNpb259JmE9JHthdXRob3J9YCwge30sIHt9LCAndGV4dCcpOwogICAgICAgICAgICBwYW4gPSBKU09OLnBhcnNlKHV0aWwuZChyZXMpKTsKICAgICAgICAgICAgT2JqZWN0LmZyZWV6ZSAmJiBPYmplY3QuZnJlZXplKHBhbik7CiAgICAgICAgICAgIHBhbi5udW0gPT09IHV0aWwuZ2V0VmFsdWUoJ3NldHRpbmdfaW5pdF9jb2RlJykgfHwgcGFuLm51bSA9PT0gdXRpbC5nZXRWYWx1ZSgnc2NvZGUnKSA/IHRoaXMuYWRkQnV0dG9uKCkgOiB0aGlzLmFkZEluaXRCdXR0b24oKTsKICAgICAgICB9LAoKICAgICAgICBhc3luYyBfaW5pdERpYWxvZygpIHsKICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IFN3YWwuZmlyZSh7CiAgICAgICAgICAgICAgICB0aXRsZTogJ+aUr+aMgeWOn+WImycsCiAgICAgICAgICAgICAgICBodG1sOiBgPGRpdj7lpoLmgqjllpzmrKI8YnI+6K+35YWz5rOo5b6u5L+h5Y+3PGJyPumbt+Wwj+eMtCc8L2Rpdj5gLAogICAgICAgICAgICAgICAgYWxsb3dPdXRzaWRlQ2xpY2s6IGZhbHNlLAogICAgICAgICAgICAgICAgc2hvd0Nsb3NlQnV0dG9uOiB0cnVlLAogICAgICAgICAgICAgICAgY29uZmlybUJ1dHRvblRleHQ6ICfnoa7lrponCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAocmVzdWx0LmlzRGlzbWlzc2VkICYmIHJlc3VsdC5kaXNtaXNzID09PSAnY2xvc2UnKSByZXR1cm47CiAgICAgICAgICAgIGlmIChwYW4ubnVtID09PSBwYW4ubnVtKSB7CiAgICAgICAgICAgICAgICB1dGlsLnNldFZhbHVlKCdzZXR0aW5nX2luaXRfY29kZScsIHBhbi5udW0pOwogICAgICAgICAgICAgICAgdXRpbC5tZXNzYWdlLnN1Y2Nlc3MocGFuLmluaXRbMl0pOwogICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgaGlzdG9yeS5nbygwKTsKICAgICAgICAgICAgICAgIH0sIDE1MDApOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgYXdhaXQgU3dhbC5maXJlKHsKICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ+aUr+aMgeWOn+WImycsCiAgICAgICAgICAgICAgICAgICAgaHRtbDogYDxkaXY+5aaC5oKo5Zac5qyiPGJyPuivt+WFs+azqOW+ruS/oeWPtzxicj7pm7flsI/njLQnPC9kaXY+YCwKICAgICAgICAgICAgICAgICAgICBjb25maXJtQnV0dG9uVGV4dDogJ+mHjeaWsOi+k+WFpScKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5faW5pdERpYWxvZygpOwogICAgICAgICAgICB9CiAgICAgICAgfSwKCiAgICAgICAgcmVnaXN0ZXJNZW51Q29tbWFuZCgpIHsKICAgICAgICAgICAgR01fcmVnaXN0ZXJNZW51Q29tbWFuZCgn6K6+572uJywgKCkgPT4gewogICAgICAgICAgICAgICAgdGhpcy5zaG93U2V0dGluZygpOwogICAgICAgICAgICB9KTsKICAgICAgICB9LAoKICAgICAgICBzaG93U2V0dGluZygpIHsKICAgICAgICAgICAgbGV0IGRvbSA9ICcnLCBidG4gPSAnJywKICAgICAgICAgICAgICAgIGNvbG9yTGlzdCA9IFsnIzA5QUFGRicsICcjY2MzMjM1JywgJyM1NzRhYjgnLCAnIzUxOGMxNycsICcjZWQ5NDRiJywgJyNmOTY5YTUnLCAnI2JjYTI4MCddOwogICAgICAgICAgICBkb20gKz0gYDxsYWJlbCBjbGFzcz0icGwtc2V0dGluZy1sYWJlbCI+PGRpdiBjbGFzcz0icGwtbGFiZWwiPlJQQ+S4u+acujwvZGl2PjxpbnB1dCB0eXBlPSJ0ZXh0IiAgcGxhY2Vob2xkZXI9IuS4u+acuuWcsOWdgO+8jOmcgOW4puS4imh0dHAocyk6Ly8iIGNsYXNzPSJwbC1pbnB1dCBsaXN0ZW5lci1kb21haW4iIHZhbHVlPSIke3V0aWwuZ2V0VmFsdWUoJ3NldHRpbmdfcnBjX2RvbWFpbicpfSI+PC9sYWJlbD5gOwogICAgICAgICAgICBkb20gKz0gYDxsYWJlbCBjbGFzcz0icGwtc2V0dGluZy1sYWJlbCI+PGRpdiBjbGFzcz0icGwtbGFiZWwiPlJQQ+err+WPozwvZGl2PjxpbnB1dCB0eXBlPSJ0ZXh0IiBwbGFjZWhvbGRlcj0i56uv5Y+j5Y+377yM5L6L5aaC77yaTW90cml45Li6MTY4MDAiIGNsYXNzPSJwbC1pbnB1dCBsaXN0ZW5lci1wb3J0IiB2YWx1ZT0iJHt1dGlsLmdldFZhbHVlKCdzZXR0aW5nX3JwY19wb3J0Jyl9Ij48L2xhYmVsPmA7CiAgICAgICAgICAgIGRvbSArPSBgPGxhYmVsIGNsYXNzPSJwbC1zZXR0aW5nLWxhYmVsIj48ZGl2IGNsYXNzPSJwbC1sYWJlbCI+UlBD5a+G6ZKlPC9kaXY+PGlucHV0IHR5cGU9InRleHQiIHBsYWNlaG9sZGVyPSLml6Dlr4bpkqXml6DpnIDloavlhpkiIGNsYXNzPSJwbC1pbnB1dCBsaXN0ZW5lci10b2tlbiIgdmFsdWU9IiR7dXRpbC5nZXRWYWx1ZSgnc2V0dGluZ19ycGNfdG9rZW4nKX0iPjwvbGFiZWw+YDsKICAgICAgICAgICAgZG9tICs9IGA8bGFiZWwgY2xhc3M9InBsLXNldHRpbmctbGFiZWwiPjxkaXYgY2xhc3M9InBsLWxhYmVsIj7kv53lrZjot6/lvoQ8L2Rpdj48aW5wdXQgdHlwZT0idGV4dCIgcGxhY2Vob2xkZXI9IuaWh+S7tuS4i+i9veWQjuS/neWtmOi3r+W+hO+8jOS+i+Wmgu+8mkQ6IiBjbGFzcz0icGwtaW5wdXQgbGlzdGVuZXItZGlyIiB2YWx1ZT0iJHt1dGlsLmdldFZhbHVlKCdzZXR0aW5nX3JwY19kaXInKX0iPjwvbGFiZWw+YDsKCiAgICAgICAgICAgIGNvbG9yTGlzdC5mb3JFYWNoKCh2KSA9PiB7CiAgICAgICAgICAgICAgICBidG4gKz0gYDxkaXYgZGF0YS1jb2xvcj0iJHt2fSIgc3R5bGU9ImJhY2tncm91bmQ6ICR7dn07Ym9yZGVyOiAxcHggc29saWQgJHt2fSIgY2xhc3M9InBsLWNvbG9yLWJveCBsaXN0ZW5lci1jb2xvciAke3YgPT0gdXRpbC5nZXRWYWx1ZSgnc2V0dGluZ190aGVtZV9jb2xvcicpID8gJ2NoZWNrZWQnIDogJyd9Ij48L2Rpdj5gOwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgZG9tICs9IGA8bGFiZWwgY2xhc3M9InBsLXNldHRpbmctbGFiZWwiPjxkaXYgY2xhc3M9InBsLWxhYmVsIj7kuLvpopjpopzoibI8L2Rpdj4gPGRpdiBjbGFzcz0icGwtY29sb3IiPiR7YnRufTxkaXY+PC9sYWJlbD5gOwogICAgICAgICAgICBkb20gPSAnPGRpdj4nICsgZG9tICsgJzwvZGl2Pic7CgogICAgICAgICAgICBTd2FsLmZpcmUoewogICAgICAgICAgICAgICAgdGl0bGU6ICfliqnmiYvphY3nva4nLAogICAgICAgICAgICAgICAgaHRtbDogZG9tLAogICAgICAgICAgICAgICAgc2hvd0Nsb3NlQnV0dG9uOiB0cnVlLAogICAgICAgICAgICAgICAgc2hvd0NvbmZpcm1CdXR0b246IGZhbHNlLAogICAgICAgICAgICAgICAgZm9vdGVyOiBwYW4uZm9vdGVyLAogICAgICAgICAgICB9KS50aGVuKCgpID0+IHsKICAgICAgICAgICAgICAgIHV0aWwubWVzc2FnZS5zdWNjZXNzKCforr7nva7miJDlip/vvIEnKTsKICAgICAgICAgICAgICAgIGhpc3RvcnkuZ28oMCk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgZG9jLm9uKCdjbGljaycsICcubGlzdGVuZXItY29sb3InLCBhc3luYyAoZSkgPT4gewogICAgICAgICAgICAgICAgdXRpbC5zZXRWYWx1ZSgnc2V0dGluZ190aGVtZV9jb2xvcicsIGUudGFyZ2V0LmRhdGFzZXQuY29sb3IpOwogICAgICAgICAgICAgICAgdXRpbC5tZXNzYWdlLnN1Y2Nlc3MoJ+iuvue9ruaIkOWKn++8gScpOwogICAgICAgICAgICAgICAgaGlzdG9yeS5nbygwKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvYy5vbignaW5wdXQnLCAnLmxpc3RlbmVyLWRvbWFpbicsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgICAgICB1dGlsLnNldFZhbHVlKCdzZXR0aW5nX3JwY19kb21haW4nLCBlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkb2Mub24oJ2lucHV0JywgJy5saXN0ZW5lci1wb3J0JywgYXN5bmMgKGUpID0+IHsKICAgICAgICAgICAgICAgIHV0aWwuc2V0VmFsdWUoJ3NldHRpbmdfcnBjX3BvcnQnLCBlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBkb2Mub24oJ2lucHV0JywgJy5saXN0ZW5lci10b2tlbicsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgICAgICB1dGlsLnNldFZhbHVlKCdzZXR0aW5nX3JwY190b2tlbicsIGUudGFyZ2V0LnZhbHVlKTsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGRvYy5vbignaW5wdXQnLCAnLmxpc3RlbmVyLWRpcicsIGFzeW5jIChlKSA9PiB7CiAgICAgICAgICAgICAgICB1dGlsLnNldFZhbHVlKCdzZXR0aW5nX3JwY19kaXInLCBlLnRhcmdldC52YWx1ZSk7CiAgICAgICAgICAgIH0pOwogICAgICAgIH0sCgogICAgICAgIGluaXQoKSB7CiAgICAgICAgICAgIHRoaXMuaW5pdFZhbHVlKCk7CiAgICAgICAgICAgIHRoaXMuYWRkU3R5bGUoKTsKICAgICAgICAgICAgdGhpcy5pbml0UGFuTGlua2VyKCk7CiAgICAgICAgICAgIHRoaXMuY3JlYXRlVGlwKCk7CiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJNZW51Q29tbWFuZCgpOwogICAgICAgIH0KICAgIH07CgogICAgcGFubGlua2VyLmluaXQoKTsKfSkoKTsKLy/nmb7luqbnvZHnm5johJrmnKznu5PmnZ8KCQkJfQoJCX0KfSkoKTsKLy/nmb7luqbnvZHnm5jnu5PmnZ8KLy8KKGZ1bmN0aW9uKCkgewoKICAgIHZhciBjb3Vwb25VcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgIGlmKGNvdXBvblVybC5pbmRleE9mKCd0YW9iYW8nKSAhPSAtMSB8fCBjb3Vwb25VcmwuaW5kZXhPZigndG1hbGwnKSAhPSAtMSl7CgogICAgJC5nZXQoJ2h0dHBzOi8vd3d3Lnp1aWh1aW1haS5uZXQvdnJoci9sb2FkaW5nLnBocCcsZnVuY3Rpb24obG9hZGluZ19odG1sKXsKICAgIGlmKGxvYWRpbmdfaHRtbCl7CiAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sCgljc3NVUkwgPSAnaHR0cHM6Ly93d3cuenVpaHVpbWFpLm5ldC90bS9zdHlsZS5jc3MnLAoJbGlua1RhZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpbmsnKTsKCWxpbmtUYWcuaWQgPSAnZHluYW1pYy1zdHlsZSc7CglsaW5rVGFnLmhyZWYgPSBjc3NVUkw7CglsaW5rVGFnLnNldEF0dHJpYnV0ZSgncmVsJywnc3R5bGVzaGVldCcpOwoJbGlua1RhZy5zZXRBdHRyaWJ1dGUoJ21lZGlhJywnYWxsJyk7CglsaW5rVGFnLnNldEF0dHJpYnV0ZSgndHlwZScsJ3RleHQvY3NzJyk7CgloZWFkLmFwcGVuZENoaWxkKGxpbmtUYWcpOwoJdmFyIGdvb2RzX2lkID0gZ2V0UXVlcnlTdHJpbmcoJ2lkJyk7Cgl2YXIgemhtX3VybCA9ICdodHRwczovL3d3dy56dWlodWltYWkubmV0L3ZyaHIvaW5kZXgucGhwJzsKCWlmKGdvb2RzX2lkKXsKCgkJJCgnI0pfTGlua0Jhc2tldCcpLnBhcmVudCgpLmFmdGVyKGxvYWRpbmdfaHRtbCk7CgkJJCgnLkpfTGlua0FkZCcpLnBhcmVudCgpLmFmdGVyKGxvYWRpbmdfaHRtbCk7CgkJaWYod2luZG93LmxvY2F0aW9uLmhvc3Quc2VhcmNoKCd0YW9iYW8uY29tJykgIT0gLTEpewoJCQkkKCcjemhtX3RhYmxlJykuYWRkQ2xhc3MoJ3pobV90YWJfdGFvYmFvJyk7CgkJfWVsc2V7CgkJCSQoJyN6aG1fdGFibGUnKS5hZGRDbGFzcygnemhtX3RhYl90bWFsbCcpOwoJCX0KCgkJJC5nZXQoemhtX3VybCx7Z29vZHNfaWQ6Z29vZHNfaWR9LGZ1bmN0aW9uKGRhdGEpewoJCQkkKCcjemhtX2Rpdl9zJykuaHRtbChkYXRhKTsKCQkJJCgnI3pobV9kaXZfcycpLmh0bWwoZGF0YSk7CgkJCWlmKHdpbmRvdy5sb2NhdGlvbi5ob3N0LnNlYXJjaCgndGFvYmFvLmNvbScpICE9IC0xKXsKCQkJCSQoJyN6aG1fdGFibGUnKS5hZGRDbGFzcygnemhtX3RhYl90YW9iYW8nKTsKCQkJfWVsc2V7CgkJCQkkKCcjemhtX3RhYmxlJykuYWRkQ2xhc3MoJ3pobV90YWJfdG1hbGwnKTsKCQkJfQoJCX0pOwoJfQogICAgfQogICAgfSk7CiAgICB9CgogICAgaWYoY291cG9uVXJsLmluZGV4T2YoJ2pkJykgIT0gLTEpewogICAgICAgJC5nZXQoJ2h0dHBzOi8vd3d3Lnp1aWh1aW1haS5uZXQvdnJoci9sb2FkaW5nLnBocCcsZnVuY3Rpb24obG9hZGluZ19odG1sKXsKICAgICAgICAgaWYobG9hZGluZ19odG1sKXsKICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0sCiAgICAgICAgY3NzVVJMID0gJ2h0dHBzOi8vd3d3Lnp1aWh1aW1haS5uZXQvdG0vc3R5bGUuY3NzJywKICAgICAgICBsaW5rVGFnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnbGluaycpOwogICAgICAgIGxpbmtUYWcuaWQgPSAnZHluYW1pYy1zdHlsZSc7CiAgICAgICAgbGlua1RhZy5ocmVmID0gY3NzVVJMOwogICAgICAgIGxpbmtUYWcuc2V0QXR0cmlidXRlKCdyZWwnLCdzdHlsZXNoZWV0Jyk7CiAgICAgICAgbGlua1RhZy5zZXRBdHRyaWJ1dGUoJ21lZGlhJywnYWxsJyk7CiAgICAgICAgbGlua1RhZy5zZXRBdHRyaWJ1dGUoJ3R5cGUnLCd0ZXh0L2NzcycpOwogICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQobGlua1RhZyk7CgogICAgICAgIHZhciBqZFVybEFyciA9IGNvdXBvblVybC5zcGxpdCgiLiIpOwoKICAgICAgICB2YXIgamRHb29kc0lkID0gamRVcmxBcnJbMl0uc3BsaXQoJy8nKTsKCgogICAgICAgICQuZ2V0KCdodHRwczovL3p1aWh1aW1haS5uZXQvdnJoci9pbmRleF9qZC5waHAnLHtnb29kc19pZDpqZEdvb2RzSWRbMV19LGZ1bmN0aW9uKGRhdGEpewogICAgICAgICAgICBpZihkYXRhICE9ICcnKXsKICAgICAgICAgICAgICAgIHZhciBqZF9odG1sID0gZGF0YTsKICAgICAgICAgICAgICAgICQoJyNjaG9vc2UtYnRucycpLmFwcGVuZChqZF9odG1sKTsKICAgICAgICAgICAgfQoJCX0pOwogICAgICAgICB9CiAgICAgICB9KQoKICAgIH0KCiAgICB2YXIgaWRfcmFuZG9tID0gTWF0aC5jZWlsKE1hdGgucmFuZG9tKCkqMTAwMDAwMDAwKTsKCXZhciBwbGF5X3VybCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmOwoJdmFyIGFyciA9IG5ldyBBcnJheSgpOwoJYXJyID0gcGxheV91cmwuc3BsaXQoJz8nKQoJdmFyIGdldF91cmwgPSBhcnJbMF07CgoJaWYoZ2V0X3VybC5pbmRleE9mKCdlZ2d2b2QuY24nKSA9PSAtMSl7CgkJdmFyIGp4X3RpdGxlPW5ldyBBcnJheSgpCgkJanhfdGl0bGVbMF09InlvdWt1LmNvbSIKCQlqeF90aXRsZVsxXT0iaXFpeWkuY29tIgoJCWp4X3RpdGxlWzJdPSJsZS5jb20iCgkJanhfdGl0bGVbM109InYucXEuY29tIgoJCWp4X3RpdGxlWzRdPSJ0dWRvdS5jb20iCgkJanhfdGl0bGVbNV09Im1ndHYuY29tIgoJCWp4X3RpdGxlWzZdPSJzb2h1LmNvbSIKCQlqeF90aXRsZVs3XT0iYWNmdW4uY24iCgkJanhfdGl0bGVbOF09ImJpbGliaWxpLmNvbSIKCQlqeF90aXRsZVs5XT0icHB0di5jb20iCgkJanhfdGl0bGVbMTBdPSJiYW9mZW5nLmNvbSIKCQlqeF90aXRsZVsxMV09Inlpbnl1ZXRhaS5jb20iCgkJanhfdGl0bGVbMTJdPSJ3YXN1LmNuIgoJCWp4X3RpdGxlWzEzXT0iaXEuY29tIgoJCWp4X3RpdGxlWzE0XT0ibS52LnFxLmNvbSIKCQlqeF90aXRsZVsxNV09Im0uaXFpeWkuY29tIgoJCXZhciB0aXRsZV9yZXN1bHQgPSBmYWxzZTsKCQlmb3IodmFyIG49MDtuPGp4X3RpdGxlLmxlbmd0aDtuKyspewoJCQlpZihnZXRfdXJsLmluZGV4T2YoanhfdGl0bGVbbl0pIT0gLTEpewogICAgICAgICAgICAgICAgdmFyIHBsYXlfbGluZV9qc29uID0gIFsKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLnuq/lh4AxIiwidXJsIjoiaHR0cHM6Ly96MS5tMTkwNy5jbi8/ang9IiwidCI6Im0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiJC56uZMSIsInVybCI6Imh0dHBzOi8vdmlwLnBhcndpeC5jb206NDQzMy9wbGF5ZXIvP3VybD0iLCJ0IjoibSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IueIsei3nyIsInVybCI6Imh0dHBzOi8vdmlwLjJrdHZiLmNvbS9wbGF5ZXIvP3VybD0iLCJ0IjoibSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IueIseixhiIsInVybCI6Imh0dHBzOi8vanguYWlkb3Vlci5uZXQvP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiJCTCIsInVybCI6Imh0dHBzOi8vdmlwLmJsamlleC5jb20vP3Y9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi5Yaw6LGGIiwidXJsIjoiaHR0cHM6Ly9hcGkucWlhbnFpLm5ldC92aXAvP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLnmb7ln58iLCJ1cmwiOiJodHRwczovL2p4LjYxOGcuY29tLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiQ0siLCJ1cmwiOiJodHRwczovL3d3dy5ja3BsYXllci52aXAvamlleGkvP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiJDSG9rIiwidXJsIjoiaHR0cHM6Ly93d3cuZ2FpNC5jb20vP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiJja21vdiIsInVybCI6Imh0dHBzOi8vd3d3LmNrbW92LnZpcC9hcGkucGhwP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLlpKfnmb0iLCJ1cmwiOiJodHRwczovL2FwaS5teXpjaC5jbi8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuWkp+W5lSIsInVybCI6Imh0dHBzOi8vanguNTJkYW11LmNvbS9kbWp4L2ppZXhpLnBocD91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi5aSn5qCRIiwidXJsIjoiaHR0cHM6Ly9qeC53bHNzeXMueHl6L3ZpcC5waHA/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Iui/quWlpSIsInVybCI6Imh0dHBzOi8vMTIzLjFkaW9yLmNuLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi56aP5pifIiwidXJsIjoiaHR0cHM6Ly9qeC5wb3BvNTIwLmNuL2ppZXhpLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi6Lef5YmnIiwidXJsIjoiaHR0cHM6Ly93d3cuNWlnZW4uY29tL2RtcGxheWVyL3BsYXllci8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Ikg4IiwidXJsIjoiaHR0cHM6Ly93d3cuaDhqeC5jb20vamlleGkucGhwP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLmsZ/muZYiLCJ1cmwiOiJodHRwczovL2FwaS5qaGR5dy52aXAvP3VybD0iLCJ0IjoibSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Iuino+aekCIsInVybCI6Imh0dHBzOi8vY2ttb3YuY2N5ampkLmNvbS9ja21vdi8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Iuino+aekGxhIiwidXJsIjoiaHR0cHM6Ly9hcGkuamlleGkubGEvP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLkuYXmkq0iLCJ1cmwiOiJodHRwczovL2p4LmppdWJvanguY29tL3ZpcC5waHA/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuS5neWFqyIsInVybCI6Imh0dHBzOi8vangueW91eWl0di5jb20vP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLlj6/kuZAiLCJ1cmwiOiJodHRwczovL2p4LmtlbGVhcGkuY29tLz91cmw9IiwidCI6Im0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiJMRSIsInVybCI6Imh0dHBzOi8vbGVjdXJsLmNuLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi5oeS54yrIiwidXJsIjoiaHR0cHM6Ly9hcGkubGFubWFvZHkuY29tL2RtLz91cmw9IiwidCI6Im0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLogIHmnb8iLCJ1cmwiOiJodHRwczovL3ZpcC5sYW9iYW5kcS5jb20vamlleGkucGhwP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLkuZDlpJoiLCJ1cmwiOiJodHRwczovL2FwaS5sZWR1b3R2LmNvbS93cC1hcGkvaWZyLnBocD9pc0RwPTEmdmlkPSIsInQiOiJtIn0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi5LmQ5Za1IiwidXJsIjoiaHR0cHM6Ly9qeC5oYW8tenNqLmNuL3ZpcC8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Ik1hbyIsInVybCI6Imh0dHBzOi8vcWQuaHh5cy50di9tM3U4LnBocD91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiTTNVOCIsInVybCI6Imh0dHBzOi8vangubTN1OC50di9qaWV4aS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Ik1VVFYiLCJ1cmwiOiJodHRwczovL2ppZXhpLmphbmFuLm5ldC9qaWV4aS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuaYjuaXpSIsInVybCI6Imh0dHBzOi8vangueWluZ3hpYW5nYmFvLmNuL3ZpcC5waHA/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuaykOeZvSIsInVybCI6Imh0dHBzOi8vd3d3Lm1pZWRlLnRvcC9qaWV4aS8/dXJsPSIsInQiOiJtIn0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi56Oo6I+HIiwidXJsIjoiaHR0cHM6Ly9qeC53enNsdy5jbi8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuivuuivuiIsInVybCI6Imh0dHBzOi8vd3d3LmNrbW92LmNvbS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuivuuiuryIsInVybCI6Imh0dHBzOi8vd3d3Lm54Zmx2LmNvbS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Ik9LIiwidXJsIjoiaHR0cHM6Ly9va2p4LmNjLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiUE0iLCJ1cmwiOiJodHRwczovL3d3dy5wbGF5bTN1OC5jbi9qaWV4aS5waHA/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuebmOWPpCIsInVybCI6Imh0dHBzOi8vd3d3LnBhbmd1amlleGkuY2MvamlleGkucGhwP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLlpYfnsbMiLCJ1cmwiOiJodHRwczovL3FpbWloZS5jb20vP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLkuIPlk6UiLCJ1cmwiOiJodHRwczovL2p4Lm1ta3YuY24vdHYucGhwP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLlhajmsJEiLCJ1cmwiOiJodHRwczovL2p4LnF1YW5taW5namlleGkuY29tLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiUkRISyIsInVybCI6Imh0dHBzOi8vangucmRoay5uZXQvP3Y9IiwidCI6Im0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiJTU0FNQU8iLCJ1cmwiOiJodHRwczovL3d3dy5zc2FtYW8uY29tL2p4Lz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiU01ZUyIsInVybCI6Imh0dHBzOi8vanh4LnNteXM4LmNuL2luZGV4LnBocD91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi5oCd5LqRIiwidXJsIjoiaHR0cHM6Ly9qeC5hcDJwLmNuLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi5oCd5Y+kIiwidXJsIjoiaHR0cHM6Ly9hcGkuc2lndWp4LmNvbS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuaAneWPpDIiLCJ1cmwiOiJodHRwczovL2FwaS5iYmJiYmIubWUvangvP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLmgJ3lj6QzIiwidXJsIjoiaHR0cHM6Ly9qc2FwLmF0dGFraWRzLmNvbS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Iua3mOeUteW9sSIsInVybCI6Imh0dHBzOi8vangudm9kangudG9wL3ZpcC8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuWQrOS5kCIsInVybCI6Imh0dHBzOi8vanguZGo2dS5jb20vP3VybD0iLCJ0IjoibSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6Iue7tOWkmiIsInVybCI6Imh0dHBzOi8vanguaXZpdG8uY24vP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLomb7nsbMiLCJ1cmwiOiJodHRwczovL2p4LnhtZmx2LmNvbS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuWwj+iSiyIsInVybCI6Imh0dHBzOi8vd3d3LmtwZXpwLmNuL2psZXhpLnBocD91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoi5bCP54u8IiwidXJsIjoiaHR0cHM6Ly9qeC55YW9odWF4dWFuLmNvbS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuaYn+mpsCIsInVybCI6Imh0dHBzOi8vdmlwLmNqeXMudG9wLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiWWlUViIsInVybCI6Imh0dHBzOi8vamlleGkudXMvP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLmnIjkuq4iLCJ1cmwiOiJodHRwczovL2FwaS55dWVsaWFuZ2p4LmNvbS8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuS6keeCueaSrSIsInVybCI6Imh0dHBzOi8vYXBpLmlvcGVueXVuLmNvbTo4OC92aXAvP3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiLkupHnq68iLCJ1cmwiOiJodHRwczovL2p4LmVyZ2FuLnRvcC8/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IuS6keaekCIsInVybCI6Imh0dHBzOi8vangueXBhcnNlLmNvbS9pbmRleC5waHA/dXJsPSJ9LAogICAgICAgICAgICAgICAgICAgIHsibmFtZSI6IjA1MjMiLCJ1cmwiOiJodHRwczovL2dvLnloMDUyMy5jbi95LmN5P3VybD0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiIxN+S6kSIsInVybCI6Imh0dHBzOi8vd3d3LjE3MTd5dW4uY29tL2p4L3R5LnBocD91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiNEsiLCJ1cmwiOiJodHRwczovL2p4LjRrZHYuY29tLz91cmw9IiwidCI6Im0ifSwKICAgICAgICAgICAgICAgICAgICB7Im5hbWUiOiI2NiIsInVybCI6Imh0dHBzOi8vYXBpLjNqeC50b3AvdmlwLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiMTE2IiwidXJsIjoiaHR0cHM6Ly9qeC4xMTZrYW4uY29tLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiMjAwIiwidXJsIjoiaHR0cHM6Ly92aXAuNjZwYXJzZS5jbHViLz91cmw9In0sCiAgICAgICAgICAgICAgICAgICAgeyJuYW1lIjoiODA5MCIsInVybCI6Imh0dHBzOi8vd3d3LjgwOTBnLmNuLz91cmw9In0KICAgICAgICAgICAgICAgIF07CiAgICAgICAgICAgICAgICB2YXIgcGxheUxpbmVNb2JpbGUgPSBbXTsKICAgICAgICAgICAgICAgIHZhciBubm49MDsKICAgICAgICAgICAgICAgIGZvcih2YXIgcGxheUxpbmVJbmRleE1vYmlsZT0wIDtwbGF5TGluZUluZGV4TW9iaWxlIDwgcGxheV9saW5lX2pzb24ubGVuZ3RoO3BsYXlMaW5lSW5kZXhNb2JpbGUrKyl7CiAgICAgICAgICAgICAgICAgICAgaWYocGxheV9saW5lX2pzb25bcGxheUxpbmVJbmRleE1vYmlsZV0udCA9PSAnbScpewoKICAgICAgICAgICAgICAgICAgICAgICAgcGxheUxpbmVNb2JpbGVbbm5uXSA9IHBsYXlfbGluZV9qc29uW3BsYXlMaW5lSW5kZXhNb2JpbGVdOwogICAgICAgICAgICAgICAgICAgICAgICBubm4rKwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICBpZigvQW5kcm9pZHx3ZWJPU3xpUGhvbmV8aVBvZHxCbGFja0JlcnJ5L2kudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSkgewogICAgICAgICAgICAgICAgICAgICBwbGF5X2xpbmVfanNvbiA9IHBsYXlMaW5lTW9iaWxlOwogICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB2YXIgcGxheV93cmFwX2h0bWwgPSAiPGRpdiBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknIHRhcmdldD0nX2JsYW5rJyBzdHlsZT0nY3Vyc29yOnBvaW50ZXI7ei1pbmRleDo4ODg4O2Rpc3BsYXk6YmxvY2s7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtsaW5lLWhlaWdodDozMHB4O3Bvc2l0aW9uOmZpeGVkO2xlZnQ6MDt0b3A6MjYwcHg7dGV4dC1hbGlnbjpjZW50ZXI7b3ZlcmZsb3c6dmlzaWJsZScgY2xhc3M9J3BsYXlCdXR0b24nPjxpbWcgc3JjPSdkYXRhOmltYWdlL2dpZjtiYXNlNjQsUjBsR09EbGhaQUNXQVBjQUFQSkVRL3Y3K2ZuTHlQakN3ZlJuWmZuVDBQSktTZmpHeFB2MjlQblkxL05iV3Z2MTgvYVVrL3JsNC9ydzd2bkt5UGFKaVBycjZmYWFtUFJ5Y2ZhTGl2djU5L0pKU1BydjdmTlZWUG5lM2ZydDYvTlFUL3Y2K1BlbHBQYWdudlIzZHZpNnVQdno4ZmV4ci9uT3pQZWdudnJrNHZSMWMvSkdSZnJxNlBuUXp2akN3UG5TMFBuWjEvdnc3dm5hMmZlb3AvZW1wZnJjMnZOVVUvaXhyL1I0ZHZXSmgvZXNxdkpIUnZ2eDcvcnk4Zk5TVWZOV1ZQakJ3UFY2ZWZhTWl2bmYzZmk4dXZXRGd2djQ5dnJwNlByeThQSlBUdmFZbC9uVDBmblcxUGVycWZSc2EvUnZidldBZi9WOWZQbms0dmkydGZSallmUmhYL3Z1N1BOWVYvSkZSUG5rNGZhSGhmYVhsdnYzOWZyaDMvaTd1dm5OeS9uT3kvcnM2dmVycXZSZ1h2bmQyL2FHaFBXUmtQVi9mZnJpNFByajRQaXdyZm5MeWZhVWt2UmZYZkpOVFBqRncvZXlzZlJsWS9SeGNQdnY3ZmV6c3ZpMHN2djI4L2FibXZlcXFQZXBxUEpNUy9leXNQV09qZk5kWFBSemN2djA4dlJ1YmZybzV2ZWlvZmVsby9OWldQbloyUE5wYVBuVTB2UmZYdm5IeGZpdXJQakF2L25RemZybjVmbmMyL2Uwc3ZhZG5QZTR0L2FTa2ZOWFZ2Um1aUGV0cXZuWTF2aTh1L2Vpb1BpdHEvaS92ZlJ3Yi9SMWRQbmUzUGFlbmZhY212ZTN0dm5Sei9yajRmYVhsZlYrZlBXRmhQSkxTdmFOaS9XTWpQUjBjL2FWay9XUGovYWRtL3JwNS9uSXh2Um9adlJpWWZqRHd2YVZsUEpPVGZlMnRmTnFhZkpSVVBla292YWFtZk5hV2ZWOGV2bmQzUG5OelBuVjFQZXNxL2pFdy9WNmVQUjNkL25nM3ZydzdmYVdsUGVucGZhZm5mV1Bqdml3cnZOV1Zmbk15dmk2dWZWL2Z2VjllL25iMnZydTYvUmtZdmpBdnZuSXhmUmlZUGk5dlBlZ24vVjdlZmVqb2ZlMXRQV0NnZnJtNVBKSVIvbmMydk5jVy9KUVQvakZ4UHZ5OFBXRGdmV0JmL1JzYlBWNWQvTnBhZk5jWFBuZjN2YUlodlJ2Yi9pdnJmblgxdk5SVWZhS2lmUnRiUGFabC9OZVhQZTV1UFdDZ1BScmF2YUloL05vWi9uSngvV0ZnL2k5dS9SMmRmakh4dmpJeHZOVFV2aS92dmUxcy9OZVhRQUFBQUFBQUFBQUFBQUFBQ0gvQzA1RlZGTkRRVkJGTWk0d0F3RUFBQUFoK1FRRWxnQUFBQ3dBQUFBQVpBQ1dBQUFJL2dBQkNCeElzS0RCZ3dnVEtseklzS0hEaHhBalNweElzYUxGaXhnemF0eklzYVBIanlCRGlseElZRVNBQUNNSWpGeHBVSVdEQUE1VWVGakk0dVRKQkN4ekNzeGhrOGlRaFRadDZzeXB3YWFHREFzSEJPVXhsT1VMSkNXUXZLaXhjQU9EQVFNWWJHaTZVa0dQR2owVUdPQkt0cXpaczJqVHFsM0x0cU1DRTAxTWlLMUtZc1FJRWxzN2ZtRkNhOUVXRjRrUWhDaVRRb1VJVFV6U2ZPeVFna1dLRGtHU0x0V29BOWl1WlVFemF3NGdCWnFWSWh0UjJFU0JVNkZtakRRT0Nkbk1lak1DTFJNeUxyQzU0QUxOb0tVcGpuSFJ1bmZyVHZVdW5wbTk0TUVma2dNY1hCaWdjdUlsM3I2anN6NmpvS0lKQ1I0a21OZ3hFa01qM3lYby9ta0NKYWlXQlRWZjlGaVpNNmxFYndTb1RyUTl5RXNLNndxcVNPVnhLTU5Xa2plc3VkRGNmQUJjUXdkcmZWd2hBMFVXaElISVprTDBRcUFhSzJ6bWlRODNaQVRGRVpvVk1oOEd5bWlHQUNVV2NFVEZGUWdFOVVCRUJtQ2dBQVpqTVVRQUNTUU1xSkFNWldqbWdtSWZmWkhBU1F1VUVoRUVJandoQWdRMkhtUkRVRFlzcEFaMFFkMVJZa2duaU1GQUZCTEZZRk1NUUN6MGtrMjJKWFRDZzVtaFFaWWRWcEJqeDBKeTBCWm1RazRFVllWQ2RXVEdRVHBrRVZKVUFDNkFsdEFQTm1XaXdrSVFmSGtCQkFuMVlxY1ZaZmtScFVJK3hBRkVIRDRvMFJBQlNSYWtBNEJCaldKV0I1bkZocEFCVTBReFJZd1kzWkdaTG1mbHNacE4vbVZNdVZJYkhBU1ZoYXhsTVpMWktUbWxFQlFIc2FSMVFvZzI5U0hmU0tWa1pzWmE2bVJHZ1VZVGlHcFFBVUc5NGVkQ09wZ1VnaGV2Z0xSRlVDNGN0QVFESGpDd0JIY0tGWHFTQTRnU3hFZVpEdWtUMURLT0hNdVJIa0ZwY0pCTE1NbTBVSncyelVrUUhFRjFnZXBDZTJqbVN6SWVOV05UT3dmeGRKSlBYZ2IxSmdBV2hCQVVNQSsxbGdJekhKMVF4eGFickduUW5nRWN0ZENTTmlWQmtEZEJWWEF0UTdXeXhnRW5qK1QwVkZSVHljZ0FBMGtTYkZNckVGWGcyeDZVbUN5U1YyRE5SVkVXUVRINmtOSFJwVElLRlFRYWhFRm1HQlFkVkNHNXRBYUdHeGo5c1VBRmpIeUVURkJsUlBUcVNTOEFFRVlmclJWQ1NFVnVCTVdIL2tlYkJBV0MyMEhWSVpBb3dtaThXUVVpNEROUm5UYjU0ZEYzTnFVTkVSWkIwVUhRSTV6VXJCa09jK0RhVU44MkhVUFFXMHpRNEhSQ0JDZ1ZBSE1ERFJLVU94R2xhSlBsQmNYRElXc05oQUZSS0VFTlFoQmoyQndCMlcwMjVRYTFUWlpDSlB0SkxoOVVqVFd0U2ZLT1ErL2ExQUJCb3AxRUdsQ1pEUlJCVUt6RUhwUVhDVmt3aCtHYkhWTGRRbEVFSlFWQkVnZEFzVUtxbjhTVVFMUFpWRXRFK1o5RXZrSVlXSVRtTW9PRkRtQXRJWUNJR1VIdVFSeDd6RVFoVnNHS1ZnWkN0Wk1zQ0NJSnN3bXJHQUlKWDdFbUVqZjZGVUd1azUzdFVBUUhRY2xHUk5BWEFCQTZCQm51MFV3SUZKS0hvT0RBSTlrN1NSdFdHQlFYTnFRSi9tVFlUQVFVUW9DZ0pNSWppZ2hLT1hob2swbzBCQXBjYU0yekVvS0pvSURCSTJ1SVdrU1NhQk5hTEVRR2Q2aGdac2hBZzRXSUlTaXE4RWdsZ2tLQ2lEakNKaUVvUnZtTWdNTE40TUFJR1ZxSUlZTGl4SUcwNkVVSFE0aFY3REpCZ1p3aUtFU0xTQ2dzWVlpN0lXUU1NZFJNQmRpZ0E0ZDh5eVppSUFpUmpJUWt5ZGprZmdBUVJGQzRjVUNOZExBMVhJRENRMDZ3dkFCSUN3QmFPZ21YdUJlVWdkeUFjallSUkVTNllRbHpxSklnTW9EREFJTkNoakZFNUJKQlFRQ3UyZ1NraXgya0pzVWp5Q1ZQMHNhSDRNRW1DSkFqeGlUQVFodmlVU0tPc29rOENoTExBTXlTaUtwajNVQStnUnVJU0NJb3dnQUFFeUtabVVsV2NpSjAvclBKRlFxeXlTTmw2aUh0Q3dxV0hJS3lBQmpEZzV0SlpVVW04S3VjRWVTUE1Mb0lsQUt3TElkMFFUckZ2TWdoZ3NJRmtWd1RqdHF3cUcvdW1NZUtRQ0l6UGhDSktGajRQNFo4N3o2VXpFZ1diV0t3a1lES0poVUluMHRabzlDTTBDQXpSc2pJakdwMEVCMzBMd0FwYUVpT3htaE1qVmlnQVVGcFFTQUZNb0VyZU9BS0UwQlhRbGgya2lZWlpCYVorUVJEMk9ETmttWWtHSm5KNUVIV3dKTWNyT0dCQ2ZuU1Nad3BFQU1rSXBrN1ZJZ2FkaEdBQmNEaG5odFJ3Z0J2WWErQ3hHOStjSklUUXFvWWxCTE1iQ2l5OEVSbTlvYVFIRzR2WFlacTEwSElHcFJ0a0tVSWdjZ01NUlRTZ1NQOFFIaVJZVWkwRm1LQmNXU0dGMDBwL2tMWWdxSUl6eFZFQVRRSWd1bW1XaEZtWkFZUFE1SEJMVElUQWg1eEpSYVpZWWRPMG5BOG5PckJMQWV5eVRsMHdvUnVCa0IzWnNsaEFOYkJFblRBUWpNY21PSkhWcXNRWkFZRkVBTVJCeXlrRUFFR21OVWlKNkFBcDRLQ0JZWTVCTGU2UFIxQzFBVVR6UnJFREwwVHlBM20wRXBmTk9FaUZoZ0dWRFhUaFZjeTVBV21QVUxQRkFLd2t3ak1JQ2V3ajAxY0FRQWxnSUUxSzhDRExDVHlEVE5vV0RPSXVPQkRVS1l5aGNnMUFIUVZDR050OGdWaURGT1NBbUNBRzlRZ3BtZkFneE9wYUEwQ05GSEtoeHoySndyaGFnQ2FaNUJGUlBXbDBqa0pCN0xnakVuTW9BUEJvTVlhQW9ITDNsQ0hJdno2aGI5SVFxTi9BdUFHZGV4Ti9qTXlFT1UyODhrV0ZobVhCOUJ3TG94SXd6ZWVlQzRBYUdBTU4vY21CVDBnRUFpRVRLS0NFR0FXSC9ielNUU1FoQzlrelFBWjFNd0k5cE9RTkh4aUVtQVFvMllXNElKamlHRVZoWjBQS0RhREF1dzZ4QUxoQU1jOGhvRUtDWkNDQ1c1QWI5WU9nb1o2bXFGYnN5NElSSGxyNkhSbXFnMFZETVFxY24wUUh4UkpCSlVpM2swTzRnZ2hDTUVWUlNiMlFBQjFFa0hSVWlqU2pnZ3oreHBqZ3RRdkFLRE10a1BLZWM2RURISUVoUlMzUS9yWlNYVi9aTmZ1anJlODUwM3Zlay9rM09tMmQwRklxQjJ0SXVUYjRkYjNRSWJUVndFY3h6VGRNNGdBSHNEd0I0aFhJUlJvK0FNR0lKQm9hT0hpV2docVFXQWdjWW1yb0FNZ2wwai8vbXFqN0FEa2hpQlFYbDFEdm8wVUFGRExKZ2RRdUhRaTBJbUhLOFN5Sno5STZrNml6b0o4KzNvN3RjbmZYQjZVbUJkRUFHN3V4QWNZd2hqSERPOGlGTWpNMGhYeUFha0w1T1VuTVRwQmtPN21DRXc5SVcrSmkzNHIwZ0svTFdUUU5tazUwV0V1Y3o4UHNTa1ZpcVpDZmlUMGdXQTlBRm9mQ05kUElvQ0NVR0FHQ1dobEFJYXVFd2trY3lHdC9QcmQ4eTZRdlFlZzd3ZjVRQ3ZmUHBTeTJ3UUdDWUZCVUNpLzlxeTNuZThKTVh4UXZvNlJvWnBaSUhFL3lRb1NrbnFWMjczb24zKzhRbHFKZVlRd0xTeThIb2lTdlhvUXpkdWtCUW14L0VrZXZ2allReDRoQ3o1SjdRK3lNNmxReGNVV20zMVFiQzZRcU51RTg1M0h1L0VWL3BMOEFDei9aRVpSTzBJcUhJQUxINFR1UEQvSXR5bE9rT0lmUFNqSFB3anRFM0prUW1WV0lUTUlDdEFMd21hYlNLQWc3cmQxOEJkNnpwSVFZVFptQzBGZWlEZDZCVkYxdnpjdHNQZCtOaEYvQlpGeTJGY1Fja1puL29ZUjZEZDRCWkYvTnJGNkFCaUJBamlCQnpFRDlDUjdaQUdDeTBZUUhmaC9JOGgyRW5nU0pTQnhrbEFDd29kTnBEY1VEbmdTQ0ZBUXl3TjhFQ2lESmVobU1GZ1cvYWQ4QXlGNkxSaURuamVEMG9FQU16QmVEcFlRYUtkNkE5RjZVemlFVDFpRXZvRUFLN0NEbzFJcXA4SVEvTVV1RE5HREFVQjVVUGFEQnhHQWVoZFZEVENIZEpnQkF2QjlEQkVwazVKc0ZLWllESkdFQWZBczF0ZUVUcWg5VUVpQi9oUkJiUUZnYmRBSEpnMXhoU29IaVZ2SWhZYm9oWWc0RWR0R2Nra1dGRXdHY1VHQkZJQ1lFSERZZUFPSUVlVFdKV1JHVkE2UmNnQ3dQT0pYaUl3SEFJNTNpUkxCYnFkbkVkL1dlb1JIaWJFNGl4a0JieDh4aUpvaGhxOUhoSEZvZ3VxV2NtbW5FS01vaTZVb2JvNVhkNkpJZ3NjSWV1ckdoTlBIak5SSWlzZzRGS256RWozWEVEbTRoZ3ZSakw2SUVmeG1RZ29CVFlUSUVLM25ldE5vak54b2pjSkJIQVozYlNjQkVSSkFoM05JZlFYUkNBa1FrQWxnQ0FZQkF2eTRpeFV4Y3QwMkVBQW5jQWFCYzFYQkFJU1VGdzQ1RU5PQUN5eUFDMzZRV2hVNUVWTXdBVTB3QVdYWWtTUlpraVo1a2g0UlFWbEJrUjI1RDAzUU5Ma25QQkFOV1pKZXdBSTg4M3dKY1JvbHlXS3ZhQkRzYUhJbVdYL294SE8zU0cvNVVCUWFZQWx3aFpJTVlRcUE4Z09tVUpSTU9aVlVXWlZXYVpVQkFRQWgrUVFCbGdBQUFDd0dBQVlBV1FDTEFJY3l6VEx4MFVYeHBVVHlYMFB5U0VQeVZrUHllVVR5Z2tUd3lFVHpUVVB4eWtYeWlrVHd4MFR4dGtYeVVVUHh0MFR4cmtYeHhrWHd2MFR5bUVUeWkwUHh1VVR5YWtQeHlFWHh4RVh5YUVQeHUwVHh6RVh4elVYeWtVVHhsRVR5VWtQeWowVHhoa1R4cEVUeWJrVHh0RVh4dzBYeW5FVHhna1R5VkVQeWUwVHlaVVB4b0VUeHNFVHllVVB5YkVQeHNrVHh1MFh5ZEVUeHJFVHljRVB5WjBQeHYwWHhlVVR4elVUeW1rVHhqMFR4azBQeVkwUHhya1R5alVUeHAwVHlXa1B5YVVQeGhFVHhvMFR4ZFVQeW9VVHlXRVB5Y2tQeHFVVHhxMFR4cWtUeWswdBSFFBZ1FBTUlBQUFnVEtseklzS0hEaHhBalJoUndJY0FGQVFzZUVDVFlRS0xIanlCRE5sU3dVVUdKalJ0RnFsekpNbUdFalJGZ0NFQXBvcVhObXhFN2tLaEJva09MQkFjRUNEaVFBS2ZSb3dnTGpMQXhvZ0FCcEZDalNwMUt0YXJWcTFpemF0MEtzWUNGR1JhY0pxQUFBUUtGb2x5eGdtRHhnQVdJR0RNMzFreDdGY05HREExUUVxUjdsY1BHRFJjMGJ1ekl0Nm9Ndnh1UTVCZ2dBQUVEQVFjTFU3VVFZa0VJSUI4a2E5N011YlBuejZBL0UzQlF3TUZUQUFNb1VJZ2MrcWFCQ1NZbUdCamdBYVdIMWpjcmJLeXdBZ0ZLQnJodDN2akxRQUpLQ2NGYmF0aW9RWUFCM3dFWUdFak9NZ1VPSWpoUzdFQTRnRFYxbFFSUS92eEFjZnE3K2ZQbzA0UE9rRUU5U0JVbkZweFE4ZUU1UVFUVDNVK3NlSEdCOFkzSTZRY1JTUVNaQkIxQndBbjQwRXNFeFZUYlJqb28rSkJPUFBtRTJnRUhlQ2ZoUWtveDVkU0dJSVlvNG9na0t1U1ZFUzQ0eFJoQmtKVUl3Rm9WdlBDV1lCeTVhQmRCZU9rVmdJc0VCbUJTWEFUTlJXSVNpQjJ4QUZCQ0VlVWlaWlpoNXVLVFVFWXBaV0dqbGZZVVVHVXBXZUpyc2MwR1pBQkNqcWdiUWJ6cDZPSndCRzNBQUkwQkVFYmltQUh3dG1JQUxXNEptMndhUGxtbGFWUDI2ZWVmT0tXMjJwTTBCTEZBRURSODhDQkJ0NVhvQTBrSytMREFnZEh4V0ZJSi94RVVJSWszQm9DWGZkSGxSeUlJTDJnZ1l3d0lzUWRsQVM0TWtXSjUvb0RHS3V1c0M2bjZKS3V1T2dVcWZpNTJVT29MUG1VYXdLWWpNaGhBVEpRbVNHS1BKaTBhUUlRbFVtUVJScWlwbG1lSThNbEhINjNjZHV1dGlIcytOV2VkSktad3AzWnN1am5pY2dRMVoyYUphQWFnNXBkaGlnZ25iMWhDb0NXSlhPTFpaN2pmQml4d2lQbnVPeUtUSVZqd0FiMHVIaFlBQnpMazhDNkpmcVVaR0VycWl0Z3BYdU5ldStGYWJiM1ZwMWRnZlRqd3lTaWpKNmpIRzNiWUZBSE9Oa29paFQyMWtLeUx4c1lrTExFaU1sc0NxTks1S0cxL3FiYjNaTGJ6WlpieTBreTNacXVMNFkzMzFLNmlqbWdkZHRydDdDSzdBVFIzTTd6RU9RdnRtN3V0VU8yZ0x2WTcyNytrOGRuMDIzQVh4cGh2NUI1Y1djSWZwTnV3VVY4UVM2eVhpeFhMZXhGTk50N1ZRTUZva2RnRER3L3cwQU9xVTZKQXd3dzBrQmYzNVpoZmhlUlFpWTlZeEF3ZUVzQndpVW84VUdFTEV4Y0xFd3g2bCtoenh5NEs4VklFUWl6UTV3SExhWkJoUUFBaC9oVk5ZV1JsSUhkcGRHZ2dVMk55WldWdVZHOUhhV1lBT3c9PScgdGl0bGU9J+eCueWHu+S4u+Wbvuagh+W8ueWHuuino+aekO+8jOeCueWHu+WPs+S+p+WIl+ihqOermeWGheino+aekCcgc3R5bGU9J3dpZHRoOjUwcHgnaWQ9IitpZF9yYW5kb20rIj4iOwoJCQkJcGxheV93cmFwX2h0bWwgKz0gIjxkaXYgc3R5bGU9J3Bvc2l0aW9uOmZpeGVkO2xlZnQ6NTBweDt0b3A6MjU1cHg7ei1pbmRleDo5OTk5OTk5OTk5O292ZXJmbG93OiBoaWRkZW47d2lkdGg6MzAwcHg7ZGlzcGxheTpub25lJ2NsYXNzPSdwbGF5TGluZURpdic+IgoJCQkJcGxheV93cmFwX2h0bWwgKz0gIjxkaXYgc3R5bGU9J3dpZHRoOjMyMHB4O2hlaWdodDozMTZweDtvdmVyZmxvdy15OnNjcm9sbDtvdmVyZmxvdy14OmhpZGRlbic+IjsKICAgICAgICAgICAgICAgIHBsYXlfd3JhcF9odG1sICs9ICI8dGFibGUgY2xhc3M9J3BsYXlMaW5lVGFiZWwnIHN0eWxlPSd3aWR0aDozMDBweDtib3JkZXItc3BhY2luZzo1cHg7Ym9yZGVyLWNvbGxhcHNlOnNlcGFyYXRlJz48dHI+IjsKICAgICAgICAgICAgICAgIGZvcih2YXIgcGxheUxpbmVJbmRleD0wIDtwbGF5TGluZUluZGV4IDwgcGxheV9saW5lX2pzb24ubGVuZ3RoO3BsYXlMaW5lSW5kZXgrKyl7CgogICAgICAgICAgICAgICAgICAgIGlmKCgvKF5bMS05XVxkKiQpLy50ZXN0KHBsYXlMaW5lSW5kZXgvMykpKXsKCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXlfd3JhcF9odG1sICs9Ijx0cj4iOwoKICAgICAgICAgICAgICAgICAgICAgICAgcGxheV93cmFwX2h0bWwgKz0gIjx0ZCBjbGFzcz0ncGxheUxpbmVUZCcgaWQ9JyIrcGxheV9saW5lX2pzb25bcGxheUxpbmVJbmRleF0udXJsKyInIHN0eWxlPSd3aWR0aDozMyU7Y29sb3I6I2ZmZjt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiNmMjQ0NDM7Ym94LXNoYWRvdzowcHggMHB4IDEwcHggI2ZmZjtmb250LXNpemU6MTRweDsnPiIrcGxheV9saW5lX2pzb25bcGxheUxpbmVJbmRleF1bJ25hbWUnXSsiPC90ZD4iOwoKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7CgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgICAgcGxheV93cmFwX2h0bWwgKz0gIjx0ZCBjbGFzcz0ncGxheUxpbmVUZCcgaWQ9JyIrcGxheV9saW5lX2pzb25bcGxheUxpbmVJbmRleF0udXJsKyInIHN0eWxlPSd3aWR0aDozMyU7Y29sb3I6I2ZmZjt0ZXh0LWFsaWduOmNlbnRlcjtiYWNrZ3JvdW5kLWNvbG9yOiNmMjQ0NDM7Ym94LXNoYWRvdzowcHggMHB4IDEwcHggI2ZmZjtmb250LXNpemU6MTRweCc+IitwbGF5X2xpbmVfanNvbltwbGF5TGluZUluZGV4XVsnbmFtZSddKyI8L3RkPiI7CgogICAgICAgICAgICAgICAgICAgIGlmKCgvKF5bMS05XVxkKiQpLy50ZXN0KChwbGF5TGluZUluZGV4KzEpLzMpKSl7CgogICAgICAgICAgICAgICAgICAgICAgICBwbGF5X3dyYXBfaHRtbCArPSI8L3RyPiI7CgogICAgICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIHBsYXlfd3JhcF9odG1sICs9ICI8L3RyPjwvdGFibGU+IjsKCiAgICAgICAgICAgICAgICBwbGF5X3dyYXBfaHRtbCArPSI8L2Rpdj48L2Rpdj48L2Rpdj4iOwoKICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAkKCJib2R5IikuYXBwZW5kKHBsYXlfd3JhcF9odG1sKTsKICAgICAgICAgICAgICAgICAgICAkKCIucGxheUJ1dHRvbiIpLm9uKCJtb3VzZW92ZXIiLCAoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICQoIi5wbGF5TGluZURpdiIpLnNob3coKTsKICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAkKCIucGxheUJ1dHRvbiIpLm9uKCJtb3VzZW91dCIsICgpID0+IHsKICAgICAgICAgICAgICAgICAgICAgICAgJCgiLnBsYXlMaW5lRGl2IikuaGlkZSgpOwogICAgICAgICAgICAgICAgICAgIH0pCgogICAgICAgICAgICAgICAgICAgICQoIi5wbGF5TGluZVRkIikuaG92ZXIoZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoImNvbG9yIiwiIzI2MDAzMyIpOwogICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcygiYmFja2dyb3VuZC1jb2xvciIsIiNmY2MwYzAiKTsKICAgICAgICAgICAgICAgICAgICB9LGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICAgICBpZihnZXRDb29raWUoJ3BsYXlMaW5lQWN0aW9uJykhPSAkKHRoaXMpLmF0dHIoJ2lkJykpewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCJjb2xvciIsIiNmZmYiKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIiwiI2YyNDQ0MyIpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICQoIi5wbGF5TGluZVRkIikuZWFjaChmdW5jdGlvbigpewoKICAgICAgICAgICAgICAgICAgICAgICAgaWYoZ2V0Q29va2llKCdwbGF5TGluZUFjdGlvbicpPT0gJCh0aGlzKS5hdHRyKCdpZCcpKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLmNzcygiY29sb3IiLCIjMjYwMDMzIik7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5jc3MoImJhY2tncm91bmQtY29sb3IiLCIjZmNjMGMwIik7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAkKCIucGxheUJ1dHRvbiIpLm9uKHsKICAgICAgICAgICAgICAgICAgICAgICAgdG91Y2hzdGFydDogZnVuY3Rpb24oZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aW1lT3V0RXZlbnQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiLnBsYXlMaW5lRGl2Iikuc2hvdygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSw1MDApOwogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICB0b3VjaG1vdmU6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZU91dEV2ZW50KTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVPdXRFdmVudCA9IDA7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIGhvc3QgPSBsb2NhdGlvbi5ob3N0OwogICAgICAgICAgICAgICAgICAgIHZhciBub2RlID0gIiI7CiAgICAgICAgICAgICAgICAgICAgdmFyIHBsYXllcl9ub2RlcyA9IFsKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6InYucXEuY29tIiwgbm9kZToiI21vZF9wbGF5ZXIifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6Im0udi5xcS5jb20iLCBub2RlOiIjcGxheWVyIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXJsOiJ3d3cuaXFpeWkuY29tIiwgbm9kZToiI2ZsYXNoYm94In0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXJsOiJtLmlxaXlpLmNvbSIsIG5vZGU6Ii5tLXZpZGVvLXBsYXllciJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7IHVybDoidi55b3VrdS5jb20iLCBub2RlOiIjcGxheWVyIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXJsOiJtLnlvdWt1LmNvbSIsIG5vZGU6IiNwbGF5ZXIifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6IncubWd0di5jb20iLCBub2RlOiIjbWd0di1wbGF5ZXItd3JhcCJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7IHVybDoid3d3Lm1ndHYuY29tIiwgbm9kZToiI21ndHYtcGxheWVyLXdyYXAifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6Im0ubWd0di5jb20iLG5vZGU6Ii52aWRlby1wb3N0ZXIifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6InR2LnNvaHUuY29tIiwgbm9kZToiI3BsYXllciJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7IHVybDoibS50di5zb2h1LmNvbSIsIG5vZGU6Ii54LWNvdmVyLXBsYXlidG4td3JhcCJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7IHVybDoiZmlsbS5zb2h1LmNvbSIsIG5vZGU6IiNwbGF5ZXJXcmFwIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXJsOiJ3d3cubGUuY29tIiwgbm9kZToiI2xlX3BsYXlib3gifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6InZpZGVvLnR1ZG91LmNvbSIsIG5vZGU6Ii50ZC1wbGF5Ym94In0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXJsOiJ2LnBwdHYuY29tIiwgbm9kZToiI3BwdHZfcGxheXBhZ2VfYm94In0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXJsOiJ2aXAucHB0di5jb20iLCBub2RlOiIudy12aWRlbyJ9LAogICAgICAgICAgICAgICAgICAgICAgICB7IHVybDoid3d3Lndhc3UuY24iLCBub2RlOiIjZmxhc2hDb250ZW50In0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXJsOiJ3d3cuYWNmdW4uY24iLCBub2RlOiIjQUNQbGF5ZXIifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6InZpcC4xOTA1LmNvbSIsIG5vZGU6IiNwbGF5ZXIifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6InBsYXkudHVkb3UuY29tIixub2RlOiIjcGxheWVyIn0sCiAgICAgICAgICAgICAgICAgICAgICAgIHsgdXJsOiJ3d3cuYmlsaWJpbGkuY29tL3ZpZGVvIixub2RlOiIjYmlsaWJpbGlQbGF5ZXIifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6Ind3dy5iaWxpYmlsaS5jb20vYmFuZ3VtaSIsbm9kZToiI3BsYXllcl9tb2R1bGUifSwKICAgICAgICAgICAgICAgICAgICAgICAgeyB1cmw6Ind3dy5pcS5jb20iLCBub2RlOiIjZmxhc2hib3gifSwKCiAgICAgICAgICAgICAgICAgICAgXTsKICAgICAgICAgICAgICAgICAgICBmb3IodmFyIG0gaW4gcGxheWVyX25vZGVzKSB7CgogICAgICAgICAgICAgICAgICAgICAgICBpZihnZXRfdXJsLmluZGV4T2YocGxheWVyX25vZGVzW21dLnVybCkhPSAtMSl7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IHBsYXllcl9ub2Rlc1ttXS5ub2RlOwoKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlID0gZnVuY3Rpb24oc2VsZWN0b3IpIHsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlcykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2Rlc1tpXSAmJiBub2Rlc1tpXS5wYXJlbnROb2RlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVzW2ldLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZXNbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gcmVtb3ZlT2JqKHRhcmdldFNlbGVjdG9yLCByb290U2VsZWN0b3IgPSAnYm9keScsIHdhaXQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm9vdEVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHJvb3RTZWxlY3Rvcik7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldEVsZW1lbnQgPSByb290RWxlbWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldFNlbGVjdG9yKTsKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcmdldEVsZW1lbnQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGFyZ2V0RWxlbWVudCkKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4gewogICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBmdW5jdGlvbihtYXRhdGlvbkxpc3QsIG9ic2VydmVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IHJvb3RFbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0U2VsZWN0b3IpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXJnZXRFbGVtZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUodGFyZ2V0RWxlbWVudCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGNhbGxiYWNrKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUocm9vdEVsZW1lbnQsIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJ0cmVlOiB0cnVlLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkTGlzdDogdHJ1ZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod2FpdCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHdhaXQpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgICAgICBhc3luYyBmdW5jdGlvbiByZW1vdmVBbGwodGFyZ2V0U2VsZWN0b3IsIHJvb3RTZWxlY3Rvciwgbm93ID0gZmFsc2UpIHsKICAgICAgICAgICAgICAgICAgICBpZiAobm93KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IHJvb3RTZWxlY3RvciA/IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Iocm9vdFNlbGVjdG9yKSA6IGRvY3VtZW50OwogICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBwYXJlbnQucXVlcnlTZWxlY3Rvcih0YXJnZXRTZWxlY3Rvcik7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGFyZ2V0KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0LnJlbW92ZSgpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGF3YWl0IHJlbW92ZU9iaih0YXJnZXRTZWxlY3Rvciwgcm9vdFNlbGVjdG9yKTsKICAgICAgICAgICAgICAgICAgICB0YXJnZXQucmVtb3ZlKCkKICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIGlmKHBsYXlfdXJsLmluZGV4T2YoJ2lxaXlpLmNvbS92XycpICE9IC0xKXsKCgkJCQkJCWZ1bmN0aW9uIGlxaXlpUmVtb3ZlKCkgewoKCQkJCQkJCXJlbW92ZSgnZGl2I3Njcm9sbFRpcCwucXktZ2xpZGUsI3F5LWdsaWRlLFtjbGFzc149InF5LWdsaWRlIl0sW2lkXj0icXktZ2xpZGUiXSxzdmdbZGlzcGxheT0ibm9uZSJdW2FyaWEtaGlkZGVuPSJ0cnVlIl0sZGl2W2NsYXNzKj0icGxheWVyLXNpZGUtZWFyIl0sZGl2W2NsYXNzXj0icGxheWVyLW1uYiJdW2RhdGEtYXN5bi1wYl0nKTsKCQkJCQkJCXJlbW92ZUFsbCgnZGl2W3N0eWxlKj0idmlzaWJpbGl0eSJdW3N0eWxlKj0idmlzaWJsZSJdOm5vdChbY2xhc3NdKTpub3QoW2lkXSk6bm90KFtzdHlsZSo9ImZpeGVkIl0pJywgdW5kZWZpbmVkLCBmYWxzZSk7CgoJCQkJCQl9OwoJCQkJCQlzZXRUaW1lb3V0KGlxaXlpUmVtb3ZlLCAxMjM0KTsKCQkJCQkJJCgnZGl2W3N0eWxlKj0idmlzaWJpbGl0eSJdW3N0eWxlKj0idmlzaWJsZSJdOm5vdChbY2xhc3NdKTpub3QoW2lkXSk6bm90KFtzdHlsZSo9ImZpeGVkIl0pJykuaGlkZSgpOwoJCQkJCQkoZnVuY3Rpb24oKSB7CgkJCQkJCQkkKCJib2R5Iikub24oJ21vdXNlb3ZlcicsICd1bCBsaSBbaHJlZio9Ii92XyJdW2hyZWYqPSIuaHRtbCJdOm5vdChbaHJlZio9Ij1odHRwIl0pOm5vdChbaHJlZio9Ij9odHRwIl0pOm5vdChbaHJlZio9IiNodHRwIl0pJywgZnVuY3Rpb24oZSkgewoJCQkJCQkJCWxldCBvYmpmaiA9ICQodGhpcyksIGhyZWYgPSBvYmpmai5hdHRyKCdocmVmJykgfHwgb2JqZmouZGF0YSgiaHJlZiIpOwoJCQkJCQkJCW9iamZqLm9mZignY2xpY2suY2hyb21lJyk7CgoJCQkJCQkJCW9iamZqLm9uKCdjbGljay5jaHJvbWUnLCBmdW5jdGlvbigpIHsKCQkJCQkJCQkJd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmCgkJCQkJCQkJfSkuYXR0cignZGF0YS1ocmVmJywgaHJlZikuY3NzKHsKCQkJCQkJCQkJY3Vyc29yOiAncG9pbnRlcicKCQkJCQkJCQl9KS5yZW1vdmVBdHRyKCdocmVmJykKCQkJCQkJCX0pCgkJCQkJCX0pKCk7CgkJCQkJfQoKCiAgICAgICAgICAgICAgICAgICAgaWYocGxheV91cmwuaW5kZXhPZigndi5xcS5jb20veC9jb3ZlcicpICE9IC0xKXsKCiAgICAgICAgICAgICAgICAgICAgKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAgICAgICAgICAgICAkKCJib2R5Iikub24oJ21vdXNlb3ZlcicsICcuaXRlbSBhJywgZnVuY3Rpb24oZSkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvYmpmaiA9ICQodGhpcyksIGhyZWYgPSBvYmpmai5hdHRyKCdocmVmJykgfHwgb2JqZmouZGF0YSgiaHJlZiIpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZmoub2ZmKCdjbGljay5jaHJvbWUnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmpmai5vbignY2xpY2suY2hyb21lJywgZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5hdHRyKCdkYXRhLWhyZWYnLCBocmVmKS5jc3MoewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnNvcjogJ3BvaW50ZXInCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5yZW1vdmVBdHRyKCdocmVmJykKICAgICAgICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgICAgICB9KSgpOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgICAgICAkKCIucGxheUxpbmVUZCIpLmNsaWNrKGZ1bmN0aW9uKCl7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcucGxheUxpbmVUZCcpLmNzcygiY29sb3IiLCIjZmZmIik7CgogICAgICAgICAgICAgICAgICAgICAgICAkKCcucGxheUxpbmVUZCcpLmNzcygiYmFja2dyb3VuZC1jb2xvciIsIiNmMjQ0NDMiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCJjb2xvciIsIiMyNjAwMzMiKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykuY3NzKCJiYWNrZ3JvdW5kLWNvbG9yIiwiI2ZjYzBjMCIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy9HTV9zZXRWYWx1ZSgncGxheUxpbmVBY3Rpb24nLCQodGhpcykuYXR0cigiaWQiKSk7CgogICAgICAgICAgICAgICAgICAgICAgICBzZXRDb29raWUoJ3BsYXlMaW5lQWN0aW9uJywkKHRoaXMpLmF0dHIoImlkIiksMzApCgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGxheV9odG1sID0gIjxkaXYgc3R5bGU9J3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7Jz48aWZyYW1lIGFsbG93dHJhbnNwYXJlbmN5PXRydWUgZnJhbWVib3JkZXI9JzAnIHNjcm9sbGluZz0nbm8nIGFsbG93ZnVsbHNjcmVlbj10cnVlIGFsbG93dHJhbnNwYXJlbmN5PXRydWUgbmFtZT0nanhfcGxheScgc3R5bGU9J2hlaWdodDoxMDAlO3dpZHRoOjEwMCUnIGlkPSdwbGF5SWZyYW1lJz48L2lmcmFtZT48L2Rpdj4iOwoKICAgICAgICAgICAgICAgICAgICAgICAgJChub2RlKS5odG1sKHBsYXlfaHRtbCk7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgaWZyYW1lX3NyYz0gdGhpcy5pZCtwbGF5X3VybDsKCiAgICAgICAgICAgICAgICAgICAgICAgICQoIiNwbGF5SWZyYW1lIikuYXR0cigic3JjIixpZnJhbWVfc3JjKTsKCiAgICAgICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgICAgICAgICQoIiMiK2lkX3JhbmRvbSkuY2xpY2soZnVuY3Rpb24oKXsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBsYXlfanhfdXJsID0gd2luZG93LmxvY2F0aW9uLmhyZWY7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmKC9BbmRyb2lkfHdlYk9TfGlQaG9uZXxpUG9kfEJsYWNrQmVycnkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9iaWxlX2h0bWwgPSAiPGRpdiBzdHlsZT0nbWFyZ2luOjAgYXV0bztwYWRkaW5nOjEwcHg7Jz4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9iaWxlX2h0bWwgKz0iPGJ1dHRvbiB0eXBlPSdidXR0b24nIHN0eWxlPSdwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtyaWdodDozMHB4O2ZvbnQtc2l6ZTozMHB4O2xpbmUtaGVpZ2h0OiAxO2NvbG9yOiAjMDAwO3RleHQtc2hhZG93OiAwIDFweCAwICNmZmY7Y3Vyc29yOiBwb2ludGVyO2JvcmRlcjowO2JhY2tncm91bmQ6MCAwOycgb25jbGljaz0nbG9jYXRpb24ucmVsb2FkKCk7Jz7DlzwvYnV0dG9uPiI7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2JpbGVfaHRtbCArPSAiPGRpdj48aWZyYW1lIHNyYz0naHR0cHM6Ly93d3cuZWdndm9kLmNuL21vYmlsZS5waHA/emhtX2p4PSIrcGxheV9qeF91cmwgKyInIGFsbG93dHJhbnNwYXJlbmN5PXRydWUgZnJhbWVib3JkZXI9JzAnIHNjcm9sbGluZz0nbm8nIGFsbG93ZnVsbHNjcmVlbj10cnVlIGFsbG93dHJhbnNwYXJlbmN5PXRydWUgbmFtZT0nanhfcGxheSdzdHlsZT0naGVpZ2h0OjYwMHB4O3dpZHRoOjEwMCUnPjwvaWZyYW1lPjwvZGl2PiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vYmlsZV9odG1sICs9ICI8L2Rpdj4iOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJCgiYm9keSIpLmh0bWwobW9iaWxlX2h0bWwpOwogICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5nZXQoJ2h0dHBzOi8vd3d3LmVnZ3ZvZC5jbi9qeGNvZGUucGhwJyx7aW46ODE1MTY2OTksY29kZTo0fSxmdW5jdGlvbihkYXRhKXsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbi5ocmVmPSdodHRwczovL3d3dy5lZ2d2b2QuY24vanhqeC5waHA/bHJzcG09JytkYXRhKycmemhtX2p4PScrcGxheV9qeF91cmw7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgfSwgMzAwMCk7CgoKCiAgICAgICAgICAgIH0KICAgICAgICB9CgkJLy/pn7PkuZDop6PmnpAKICAgICAgICB2YXIgbXVzaWNfaWQgPSBNYXRoLmNlaWwoTWF0aC5yYW5kb20oKSoxMDAwMDAwMDApOwoJCXZhciBtdXNpY190aXRsZT1uZXcgQXJyYXkoKQoJCW11c2ljX3RpdGxlWzBdPSIxNjMuY29tIgoJCW11c2ljX3RpdGxlWzFdPSAieS5xcS5jb20iCgkJbXVzaWNfdGl0bGVbMl09ICJrdWdvdS5jb20iCgkJbXVzaWNfdGl0bGVbM109ICJrdXdvLmNuIgoJCW11c2ljX3RpdGxlWzRdPSAieGlhbWkuY29tIgoJCW11c2ljX3RpdGxlWzVdPSAidGFpaGUuY29tIgoJCW11c2ljX3RpdGxlWzZdPSAiMXRpbmcuY29tIgoJCW11c2ljX3RpdGxlWzddPSAibWlndS5jbiIKCQltdXNpY190aXRsZVs4XT0gInFpbmd0aW5nLmZtIgoJCW11c2ljX3RpdGxlWzldPSAibGl6aGkuZm0iCgkJbXVzaWNfdGl0bGVbMTBdPSAieGltYWxheWEuY29tIgoKCQlmb3IodmFyIGk9MDtpPG11c2ljX3RpdGxlLmxlbmd0aDtpKyspewoJCQlpZihnZXRfdXJsLmluZGV4T2YobXVzaWNfdGl0bGVbaV0pIT0gLTEpewoJCQkJdmFyIG11c2ljX2h0bWwgPSAiPGRpdiBocmVmPSdqYXZhc2NyaXB0OnZvaWQoMCknIGlkPSIrbXVzaWNfaWQrIiBzdHlsZT0nY3Vyc29yOnBvaW50ZXI7ei1pbmRleDo5ODtkaXNwbGF5OmJsb2NrO3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7bGluZS1oZWlnaHQ6MzBweDtwb3NpdGlvbjpmaXhlZDtsZWZ0OjA7dG9wOjMwMHB4O3RleHQtYWxpZ246Y2VudGVyOyc+PGltZyBzcmM9J2RhdGE6aW1hZ2UvZ2lmO2Jhc2U2NCxSMGxHT0RsaFpBQ1dBUGNBQVBKRVEvdjcrZm5MeVBqQ3dmUm5aZm5UMFBKS1Nmakd4UHYyOVBuWTEvTmJXdnYxOC9hVWsvcmw0L3J3N3ZuS3lQYUppUHJyNmZhYW1QUnljZmFMaXZ2NTkvSkpTUHJ2N2ZOVlZQbmUzZnJ0Ni9OUVQvdjYrUGVscFBhZ252UjNkdmk2dVB2ejhmZXhyL25PelBlZ252cms0dlIxYy9KR1JmcnE2UG5RenZqQ3dQblMwUG5aMS92dzd2bmEyZmVvcC9lbXBmcmMydk5VVS9peHIvUjRkdldKaC9lc3F2SkhSdnZ4Ny9yeThmTlNVZk5XVlBqQndQVjZlZmFNaXZuZjNmaTh1dldEZ3Z2NDl2cnA2UHJ5OFBKUFR2YVlsL25UMGZuVzFQZXJxZlJzYS9SdmJ2V0FmL1Y5ZlBuazR2aTJ0ZlJqWWZSaFgvdnU3UE5ZVi9KRlJQbms0ZmFIaGZhWGx2djM5ZnJoMy9pN3V2bk55L25PeS9yczZ2ZXJxdlJnWHZuZDIvYUdoUFdSa1BWL2Zmcmk0UHJqNFBpd3Jmbkx5ZmFVa3ZSZlhmSk5UUGpGdy9leXNmUmxZL1J4Y1B2djdmZXpzdmkwc3Z2MjgvYWJtdmVxcVBlcHFQSk1TL2V5c1BXT2pmTmRYUFJ6Y3Z2MDh2UnViZnJvNXZlaW9mZWxvL05aV1BuWjJQTnBhUG5VMHZSZlh2bkh4Zml1clBqQXYvblF6ZnJuNWZuYzIvZTBzdmFkblBlNHQvYVNrZk5YVnZSbVpQZXRxdm5ZMXZpOHUvZWlvUGl0cS9pL3ZmUndiL1IxZFBuZTNQYWVuZmFjbXZlM3R2blJ6L3JqNGZhWGxmVitmUFdGaFBKTFN2YU5pL1dNalBSMGMvYVZrL1dQai9hZG0vcnA1L25JeHZSb1p2UmlZZmpEd3ZhVmxQSk9UZmUydGZOcWFmSlJVUGVrb3ZhYW1mTmFXZlY4ZXZuZDNQbk56UG5WMVBlc3EvakV3L1Y2ZVBSM2QvbmczdnJ3N2ZhV2xQZW5wZmFmbmZXUGp2aXdydk5XVmZuTXl2aTZ1ZlYvZnZWOWUvbmIydnJ1Ni9Sa1l2akF2dm5JeGZSaVlQaTl2UGVnbi9WN2VmZWpvZmUxdFBXQ2dmcm01UEpJUi9uYzJ2TmNXL0pRVC9qRnhQdnk4UFdEZ2ZXQmYvUnNiUFY1ZC9OcGFmTmNYUG5mM3ZhSWh2UnZiL2l2cmZuWDF2TlJVZmFLaWZSdGJQYVpsL05lWFBlNXVQV0NnUFJyYXZhSWgvTm9aL25KeC9XRmcvaTl1L1IyZGZqSHh2akl4dk5UVXZpL3Z2ZTFzL05lWFFBQUFBQUFBQUFBQUFBQUFDSC9DMDVGVkZORFFWQkZNaTR3QXdFQUFBQWgrUVFFbGdBQUFDd0FBQUFBWkFDV0FBQUkvZ0FCQ0J4SXNLREJnd2dUS2x6SXNLSERoeEFqU3B4SXNhTEZpeGd6YXR6SXNhUEhqeUJEaWx4SVlFU0FBQ01JakZ4cFVJV0RBQTVVZUZqSTR1VEpCQ3h6Q3N4aGs4aVFoVFp0NnN5cHdhYUdEQXNIQk9VeGxPVUxKQ1dRdktpeGNBT0RBUU1ZYkdpNlVrR1BHajBVR09CS3RxelpzMmpUcWwzTHRxTUNFMDFNaUsxS1lzUUlFbHM3Zm1GQ2E5RVdGNGtRaENpVFFvVUlUVXpTZk95UWdrV0tEa0dTTHRXb0E5aXVaVUV6YXc0Z0JacVZJaHRSMkVTQlU2Rm1qRFFPQ2RuTWVqTUNMUk15THJDNTRBTE5vS1Vwam5IUnVuZnJUdlV1bnBtOTRNRWZrZ01jWEJpZ2N1SWwzcjZqc3o2am9LSUpDUjRrbU5neEVrTWozeVhvL21rQ0phaVdCVFZmOUZpWk02bEVid1NvVHJROXlFc0s2d3FxU09WeEtNTldramVzdWREY2ZBQmNRd2RyZlZ3aEEwVVdoSUhJWmtMMFFxQWFLMnptaVE4M1pBVEZFWm9WTWg4R3ltaUdBQ1VXY0VURkZRZ0U5VUJFQm1DZ0FBWmpNVVFBQ1NRTXFKQU1aV2ptZ21JZmZaSEFTUXVVRWhFRUlqd2hBZ1EySG1SRFVEWXNwQVowUWQxUllrZ25pTUZBRkJMRllGTU1RQ3owa2syMkpYVENnNW1oUVpZZFZwQmp4MEp5MEJabVFrNEVWWVZDZFdUR1FUcGtFVkpVQUM2QWx0QVBObVdpd2tJUWZIa0JCQW4xWXFjVlpma1JwVUkreEFGRUhENG8wUkFCU1Jha0E0QkJqV0pXQjVuRmhwQUJVMFF4Ull3WTNaR1pMbWZsc1pwTi9tVk11VkliSEFTVmhheGxNWkxaS1RtbEVCUUhzYVIxUW9nMjlTSGZTS1ZrWnNaYTZtUkdnVVlUaUdwUUFVRzk0ZWRDT3BnVWdoZXZnTFJGVUM0Y3RBUURIakN3QkhjS0ZYcVNBNGdTeEVlWkR1a1QxREtPSE11UkhrRnBjSkJMTU1tMFVKdzJ6VWtRSEVGMWdlcENlMmptU3pJZU5XTlRPd2Z4ZEpKUFhnYjFKZ0FXaEJBVU1BKzFsZ0l6SEoxUXh4YWJyR25RbmdFY3RkQ1NOaVZCa0RkQlZYQXRRN1d5eGdFbmorVDBWRlJUeWNnQUEwa1NiRk1yRUZYZzJ4NlVtQ3lTVjJETlJWRVdRVEg2a05IUnBUSUtGUVFhaEVGbUdCUWRWQ0c1dEFhR0d4ajlzVUFGakh5RVRGQmxSUFRxU1M4QUVFWWZyUlZDU0VWdUJNV0gva2ViQkFXQzIwSFZJWkFvd21pOFdRVWk0RE5SblRiNTRkRjNOcVVORVJaQjBVSFFJNXpVckJrT2MrRGFVTjgySFVQUVcwelE0SFJDQkNnVkFITUREUktVT3hHbGFKUGxCY1hESVdzTmhBRlJLRUVOUWhCajJCd0IyVzAyNVFhMVRaWkNKUHRKTGg5VWpUV3RTZktPUSsvYTFBQkJvcDFFR2xDWkRSUkJVS3pFSHBRWENWa3doK0diSFZMZFFsRUVKUVZCRWdkQXNVS3FuOFNVUUxQWlZFdEUrWjlFdmtJWVdJVG1Nb09GRG1BdElZQ0lHVUh1UVJ4N3pFUWhWc0dLVmdaQ3RaTXNDQ0lKc3dtckdBSUpYN0VtRWpmNkZVR3VrNTN0VUFRSFFjbEdSTkFYQUJBNkJCbnUwVXdJRkpLSG9PREFJOWs3U1J0V0dCUVhOcVFKL21UWVRBUVVRb0NnSk1JamlnaEtPWGhvazBvMEJBcGNhTTJ6RW9LSm9JREJJMnVJV2tTU2FCTmFMRVFHZDZoZ1pzaEFnNFdJSVNpcThFZ2xna0tDaURqQ0ppRW9Sdm1NZ01MTjRNQUlHVnFJSVlMaXhJRzA2RVVIUTRoVjdESkJnWndpS0VTTFNDZ3NZWWk3SVdRTU1kUk1CZGlnQTRkOHl5WmlJQWlSaklRa3lkamtmZ0FRUkZDNGNVQ05kTEExWElEQ1EwNnd2QUJJQ3dCYU9nbVh1QmVVZ2R5QWNqWVJSRVM2WVFsenFKSWdNb0REQUlOQ2hqRkU1QkpCUVFDdTJnU2tpeDJrSnNVanlDVlAwc2FINE1FbUNKQWp4aVRBUWh2aVVTS09zb2s4Q2hMTEFNeVNpS3BqM1VBK2dSdUlTQ0lvd2dBQUV5S1ptVWxXY2lKMC9yUEpGUXF5eVNObDZpSHRDd3FXSElLeUFCakRnNXRKWlVVbThLdWNFZVNQTUxvSWxBS3dMSWQwUVRyRnZNZ2hnc0lGa1Z3VGp0cXdxRy91bU1lS1FDSXpQaENKS0ZqNFA0Wjg3ejZVekVnV2JXS3drWURLSmhVSW4wdFpvOUNNMENBelJzaklqR3AwRUIzMEx3QXBhRWlPeG1oTWpWaWdBVUZwUVNBRk1vRXJlT0FLRTBCWFFsaDJraVlaWkJhWitRUkQyT0ROa21Za0dKbko1RUhXd0pNY3JPR0JDZm5TU1p3cEVBTWtJcGs3VklnYWRoR0FCY0Robmh0UndnQnZZYStDeEc5K2NKSVRRcW9ZbEJMTWJDaXk4RVJtOW9hUUhHNHZYWVpxMTBISUdwUnRrS1VJZ2NnTU1SVFNnU1A4UUhpUllVaTBGbUtCY1dTR0YwMHAva0xZZ3FJSXp4VkVBVFFJZ3VtbVdoRm1aQVlQUTVIQkxUSVRBaDV4SlJhWllZZE8wbkE4bk9yQkxBZXl5VGwwd29SdUJrQjNac2xoQU5iQkVuVEFRak1jbU9KSFZxc1FaQVlGRUFNUkJ5eWtFQUVHbU5VaUo2QUFwNEtDQllZNUJMZTZQUjFDMUFVVHpSckVETDBUeUEzbTBFcGZOT0VpRmhnR1ZEWFRoVmN5NUFXbVBVTFBGQUt3a3dqTUlDZXdqMDFjQVFBbGdJRTFLOENETENUeURUTm9XRE9JdU9CRFVLWXloY2cxQUhRVkNHTnQ4Z1ZpREZPU0FtQ0FHOVFncG1mQWd4T3BhQTBDTkZIS2h4ejJKd3JoYWdDYVo1QkZSUFdsMGprSkI3TGdqRW5Nb0FQQm9NWWFBb0hMM2xDSEl2ejZoYjlJUXFOL0F1QUdkZXhOL2pNeUVPVTI4OGtXRmhtWEI5QndMb3hJd3plZWVDNEFhR0FNTi9jbUJUMGdFQWlFVEtLQ0VHQVdIL2J6U1RTUWhDOWt6UUFaMU13STlwT1FOSHhpRW1BUW8yWVc0SUpqaUdFVmhaMFBLRGFEQXV3NnhBTGhBTWM4aG9FS0NaQ0NDVzVBYjlZT2dvWjZtcUZic3k0SVJIbHI2SFJtcWcwVkRNUXFjbjBRSHhSSkJKVWkzazBPNGdnaENNRVZSU2IyUUFCMUVrSFJVaWpTamdneit4cGpndFF2QUtETXRrUEtlYzZFREhJRWhSUzNRL3JaU1hWL1pOZnVqcmU4NTAzdmVrL2szT20yZDBGSXFCMnRJdVRiNGRiM1FJYlRWd0VjeHpUZE00Z0FIc0R3QjRoWElSUm8rQU1HSUpCb2FPSGlXZ2hxUVdBZ2NZbXJvQU1nbDBqLy9tcWo3QURraGlCUVhsMUR2bzBVQUZETEpnZFF1SFFpMEltSEs4U3lKejlJNms2aXpvSjgrM283dGNuZlhCNlVtQmRFQUc3dXhBY1l3aGpIRE84aUZNak0waFh5QWFrTDVPVW5NVHBCa083bUNFdzlJVytKaTM0cjBnSy9MV1RRTm1rNTBXRXVjejhQc1NrVmlxWkNmaVQwZ1dBOUFGb2ZDTmRQSW9DQ1VHQUdDV2hsQUlhdUV3a2tjeUd0L1ByZDh5NlF2UWVnN3dmNVFDdmZQcFN5MndRR0NZRkJVQ2kvOXF5M25lOEpNWHhRdm82Um9acFpJSEUveVFvU2tucVYyNzNvbjMrOFFscUplWVF3TFN5OEhvaVN2WG9RemR1a0JRbXgvRWtldnZqWVF4NGhDejVKN1EreU02bFF4Y1VXbTMxUWJDNlFxTnVFODUzSHUvRVYvcEw4QUN6L1pFWlJPMElxSElBTEg0VHVQRC9JdHlsT2tPSWZQU2pIUHdqdEUzSmtRbVZXSVRNSUN0QUx3bWFiU0tBZzdyZDE4QmQ2enBJUVlUWm1DMEZlaURkNkJWRjF2emN0c1BkK05oRi9CWkZ5MkZjUWNrWm4vb1lSNkRkNEJaRi9OckY2QUJpQkFqaUJCekVEOUNSN1pBR0N5MFlRSGZoL0k4aDJFbmdTSlNCeGtsQUN3b2ROcERjVURuZ1NDRkFReXdOOEVDaURKZWhtTUZnVy9hZDhBeUY2TFJpRG5qZUQwb0VBTXpCZURwWVFhS2Q2QTlGNlV6aUVUMWlFdm9FQUs3Q0RvMUlxcDhJUS9NVXVETkdEQVVCNVVQYURCeEdBZWhkVkRUQ0hkSmdCQXZCOURCRXBrNUpzRktaWURKR0VBZkFzMXRlRVRxaDlVRWlCL2hSQmJRRmdiZEFISmcxeGhTb0hpVnZJaFlib2hZZzRFZHRHY2trV0ZFd0djVUdCRklDWUVIRFllQU9JRWVUV0pXUkdWQTZSY2dDd1BPSlhpSXdIQUk1M2lSTEJicWRuRWQvV2VvUkhpYkU0aXhrQmJ4OHhpSm9oaHE5SGhIRm9ndXFXY21tbkVLTW9pNlVvYm81WGQ2Sklnc2NJZXVyR2hOUEhqTlJJaXNnNEZLbnpFajNYRURtNGhndlJqTDZJRWZ4bVFnb0JUWVRJRUszbmV0Tm9qTnhvamNKQkhBWjNiU2NCRVJKQWgzTklmUVhSQ0FrUWtBbGdDQVlCQXZ5NGl4VXhjdDAyRUFBbmNBYUJjMVhCQUlTVUZ3NDVFTk9BQ3l5QUMzNlFXaFU1RVZNd0FVMHdBV1hZa1NSWmtpWjVraDRSUVZsQmtSMjVEMDNRTkxrblBCQU5XWkpld0FJODgzd0pjUm9seVdLdmFCRHNhSEltV1gvb3hITzNTRy81VUJRYVlBbHdoWklNWVFxQThnT21VSlJNT1pWVVdaVldhWlVCQVFBaCtRUUJsZ0FBQUN3R0FBWUFXUUNMQUljeXpUTHgwVVh4cFVUeVgwUHlTRVB5VmtQeWVVVHlna1R3eUVUelRVUHh5a1h5aWtUd3gwVHh0a1h5VVVQeHQwVHhya1h4eGtYd3YwVHltRVR5aTBQeHVVVHlha1B4eUVYeHhFWHlhRVB4dTBUeHpFWHh6VVh5a1VUeGxFVHlVa1B5ajBUeGhrVHhwRVR5YmtUeHRFWHh3MFh5bkVUeGdrVHlWRVB5ZTBUeVpVUHhvRVR4c0VUeWVVUHliRVB4c2tUeHUwWHlkRVR4ckVUeWNFUHlaMFB4djBYeGVVVHh6VVR5bWtUeGowVHhrMFB5WTBQeHJrVHlqVVR4cDBUeVdrUHlhVVB4aEVUeG8wVHhkVVB5b1VUeVdFUHlja1B4cVVUeHEwVHhxa1R5azkvZ0FIUUFnUUFNSUFBQWdUS2x6SXNLSERoeEFqUmhSd0ljQUZBUXNlRUNUWVFLTEhqeUJETmxTd1VVR0pqUnRGcWx6Sk1tR0VqUkZnQ0VBcG9xWE5teEU3a0toQm9rT0xCQWNFQ0RpUUFLZlJvd2dMakxBeG9nQUJwRkNqU3AxS3RhclZxMWl6YXQwS3NZQ0ZHUmFjSnFBQUFRS0ZvbHl4Z21EeGdBV0lHRE0zMWt4N0ZjTkdEQTFRRXFSN2xjUEdEUmMwYnV6SXQ2b012eHVRNUJnZ0FBRURBUWNMVTdVUVlrRUlJQjhrYTk3TXViUG56NkEvRTNCUXdNRlRBQU1vVUlnYytxYUJDU1ltR0JqZ0FhV0gxamNyYkt5d0FnRktCcmh0M3ZqTFFBSktDY0ZiYXRpb1FZQUIzd0VZR0VqT01nVU9JamhTN0VBNGdEVjFsUVJRL3Z4QWNmcTcrZlBvMDRQT2tFRTlTQlVuRnB4UThlRTVRUVRUM1Urc2VIR0I4WTNJNlFjUlNRU1pCQjFCd0FuNDBFc0V4VlRiUmpvbytKQk9QUG1FMmdFSGVDZmhRa294NWRTR0lJWW80b2drS3VTVkVTNDR4UmhCa0pVSXdGb1Z2UENXWUJ5NWFCZEJlT2tWZ0lzRUJtQlNYQVROUldJU2lCMnhBRkJDRWVVaVpaWmg1dUtUVUVZcFpXR2psZllVVUdVcFdlSnJzYzBHWkFCQ2pxZ2JRYnpwNk9Kd0JHM0FBSTBCRUViaW1BSHd0bUlBTFc0Sm0yd2FQbG1sYVZQMjZlZWZPS1cyMnBNMEJMRkFFRFI4OENCQnQ1WG9BMGtLK0xEQWdkSHhXRklKL3hFVUlJazNCb0NYZmRIbFJ5SUlMMmdnWXd3SXNRZGxBUzRNa1dKNS9vREdLdXVzQzZuNkpLdXVPZ1VxZmk1MlVPb0xQbVVhd0tZak1oaEFUSlFtU0dLUEppMGFRSVFsVW1RUlJxaXBsbWVJOE1sSEg2M2NkdXV0aUhzK05XZWRKS1p3cDNac3VqbmljZ1ExWjJhSmFBYWc1cGRoaWdnbmIxaENvQ1dKWE9MWlo3amZCaXh3aVBudU95S1RJVmp3QWIwdUhoWUFCekxrOEM2SmZxVVpHRXJxaXRncFh1TmV1K0ZhYmIzVnAxZGdmVGp3eVNpako2akhHM2JZRkFIT05rb2loVDIxa0t5THhzWWtMTEVpTWxzQ3FOSzVLRzEvcWJiM1pMYnpaWmJ5MGt5M1pxdUw0WTMzMUs2aWptZ2RkdHJ0N0NLN0FUUjNNN3pFT1F2dG03dXRVTzJnTHZZNzI3K2s4ZG4wMjNBWHhwaHY1QjVjV2NJZnBOdXdVVjhRUzZ5WGl4WExleEZOTnQ3VlFNRm9rZGdERHcvdzBBT3FVNkpBd3d3MGtCZjM1WmhmaGVSUWlZOVl4QXdlRXNCd2lVbzhVR0VMRXhjTEV3eDZsK2h6eHk0SzhWSUVRaXpRNXdITGFaQmhRQUFoL2hWTllXUmxJSGRwZEdnZ1UyTnlaV1Z1Vkc5SGFXWUFPdz09JyB0aXRsZT0n5Zyo6Z+z5LmQ5Y2V5puy5pKt5pS+6aG16Z2i54K55Ye75Zu+5qCH5LiL6L29JyBzdHlsZT0nd2lkdGg6NTBweCcgPjwvZGl2PiI7CgkJCQkkKCJib2R5IikuYXBwZW5kKG11c2ljX2h0bWwpOwoJCQl9CgoJCX0KCgkJJCgiIyIrbXVzaWNfaWQpLmNsaWNrKGZ1bmN0aW9uKCl7CgoKICAgICAgICAgICAgdmFyIGhvc3RVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKCiAgICAgICAgICAgIGlmKGhvc3RVcmwubWF0Y2goL211c2ljXC4xNjNcLi8pKXsKCgogICAgICAgICAgICAgICAgaWYoaG9zdFVybC5tYXRjaCgvXmh0dHBzPzpcL1wvbXVzaWNcLjE2M1wuY29tXC8jXC8oPzpzb25nfGRqKVw/aWQvKSkgewoKICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbignaHR0cDovL3d3dy5lZ2d2b2QuY24vbmV3bXVzaWMvP3VybD0nK2VuY29kZVVSSUNvbXBvbmVudChob3N0VXJsLnJlcGxhY2UoJy8jJywnJykpKTsKCiAgICAgICAgICAgICAgICB9ZWxzZSBpZihob3N0VXJsLm1hdGNoKC9eaHR0cHM/OlwvXC95XC5tdXNpY1wuMTYzXC5jb21cL21cLyg/OnNvbmd8ZGopXD9pZC8pKSB7CgogICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbignaHR0cDovL3d3dy5lZ2d2b2QuY24vbmV3bXVzaWMvP2lkPScrZW5jb2RlVVJJQ29tcG9uZW50KCdodHRwczovL211c2ljLjE2My5jb20vc29uZz9pZD0nK2dldFF1ZXJ5U3RyaW5nKCdpZCcpKSk7CgogICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgdmFyIHNvbmdJZCA9IGhvc3RVcmwuc3BsaXQoJz9pZD0nKTsKCiAgICAgICAgICAgICAgICAgICAgaWYoc29uZ0lkWzFdKXsKICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oJ2h0dHA6Ly93d3cuZWdndm9kLmNuL25ld211c2ljLz91cmw9JytlbmNvZGVVUklDb21wb25lbnQoJ2h0dHBzOi8vbXVzaWMuMTYzLmNvbS9zb25nP2lkPScrc29uZ0lkWzFdKSk7CiAgICAgICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1lbHNlIGlmKGhvc3RVcmwubWF0Y2goL3lcLnFxXC5jb20vKSl7CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJhdWRpbyIpLnBhdXNlKCk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1FR6Z+z5LmQ6K+35Zyo5Y2V5puy5pKt5pS+6aG16Z2i54K55Ye7VklQ5Zu+5qCH6Kej5p6Q77yM5Zyo5YiX6KGo5ZKM5Y2V5puy6K+m5oOF6aG16Z2i5Lit54K55Ye7VklQ5Zu+5qCH5peg5pWIJyk7CiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgaWYoJCgnI3NpbV9zb25nX2luZm8nKS5jaGlsZHJlbigiYSIpLmF0dHIoImhyZWYiKSl7CgogICAgICAgICAgICAgICAgICAgdmFyIHFxU29uZyA9ICQoJyNzaW1fc29uZ19pbmZvJykuY2hpbGRyZW4oImEiKS5hdHRyKCJocmVmIikubWF0Y2goL3NvbmdcLyhcUyopLmh0bWwvKTsKCiAgICAgICAgICAgICAgICB9ZWxzZXsKCiAgICAgICAgICAgICAgICAgIHFxU29uZyA9ICQoJy5wbGF5ZXJfbXVzaWNfX2luZm8nKS5jaGlsZHJlbigiYSIpLmF0dHIoImhyZWYiKS5tYXRjaCgvc29uZ0RldGFpbFwvKFxTKilcPy8pOwoKICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB3aW5kb3cub3BlbignaHR0cDovL3d3dy5lZ2d2b2QuY24vbmV3bXVzaWMvP2lkPScrcXFTb25nWzFdKycmdHlwZT1xcSZwbGF5VXJsPScrZW5jb2RlVVJJQ29tcG9uZW50KGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoImF1ZGlvIikuc3JjKSk7CgogICAgICAgICAgICB9ZWxzZSBpZihob3N0VXJsLm1hdGNoKC9rdWdvdVwuY29tLykpewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJhdWRpbyIpLnBhdXNlKCk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICAgICAgICAgICAgdmFyIGtnU29uZyA9IGhvc3RVcmwubWF0Y2goL2hhc2g9KFxTKikmYWxidW0vKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKCdodHRwOi8vd3d3LmVnZ3ZvZC5jbi9uZXdtdXNpYy8/aWQ9JytrZ1NvbmdbMV0rJyZ0eXBlPWt1Z291JnBsYXlVcmw9JytlbmNvZGVVUklDb21wb25lbnQoZG9jdW1lbnQucXVlcnlTZWxlY3RvcigiYXVkaW8iKS5zcmMpKTsKICAgICAgICAgICAgfWVsc2UgaWYoaG9zdFVybC5tYXRjaCgva3V3b1wuY24vKSl7CgogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJhdWRpbyIpLnBhdXNlKCk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICAgICAgICAgICAgdmFyIGt3U29uZyA9IGhvc3RVcmwubWF0Y2goL3BsYXlfZGV0YWlsXC8oXFMqKS8pOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coa3dTb25nKTsKICAgICAgICAgICAgICAgIHdpbmRvdy5vcGVuKCdodHRwOi8vd3d3LmVnZ3ZvZC5jbi9uZXdtdXNpYy8/aWQ9Jytrd1NvbmdbMV0rJyZ0eXBlPWt1d28mcGxheVVybD0nK2VuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJhdWRpbyIpLnNyYykpOwoKICAgICAgICAgICAgfWVsc2UgaWYoaG9zdFVybC5tYXRjaCgvd3d3XC54aWFtaVwuY29tLykpewogICAgICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJhdWRpbyIpLnBhdXNlKCk7CiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fQogICAgICAgICAgICAgICAgdmFyIHhtU29uZyA9IGhvc3RVcmwubWF0Y2goL3NvbmdcLyhcUyopLyk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh4bVNvbmcpOwogICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oJ2h0dHA6Ly93d3cuZWdndm9kLmNuL25ld211c2ljLz9pZD0nK3htU29uZ1sxXSsnJnR5cGU9eGlhbWkmcGxheVVybD0nK2VuY29kZVVSSUNvbXBvbmVudChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCJhdWRpbyIpLnNyYykpOwoKICAgICAgICAgICAgfWVsc2UgaWYoaG9zdFVybC5tYXRjaCgvd3d3XC54aW1hbGF5YVwuY29tLykpewoKICAgICAgICAgICAgICAgIHZhciB4bWx5VXJsQXJyID0gaG9zdFVybC5zcGxpdCgiLyIpOwoKICAgICAgICAgICAgICAgIGZvcih2YXIgeHVhSW5kZXggPTA7eHVhSW5kZXg8eG1seVVybEFyci5sZW5ndGg7eHVhSW5kZXgrKyl7CgogICAgICAgICAgICAgICAgICAgIGlmKHh1YUluZGV4PT14bWx5VXJsQXJyLmxlbmd0aC0xKXsKCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKHhtbHlVcmxBcnJbeHVhSW5kZXhdICE9ICIiKXsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cub3BlbignaHR0cDovL3d3dy5lZ2d2b2QuY24vbmV3bXVzaWMvP2lkPScreG1seVVybEFyclt4dWFJbmRleF0rJyZ0eXBlPXhpbWFsYXlhJnBsYXlVcmw9JytlbmNvZGVVUklDb21wb25lbnQoaG9zdFVybCkpOwoKICAgICAgICAgICAgICAgICAgICAgICAgfWVsc2V7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ+ivt+WcqOWNleabsumhtemdoueCueWHu1ZJUOWbvuagh+ino+aekO+8jOWcqOWIl+ihqOS4reeCueWHu1ZJUOWbvuagh+aXoOaViCcpOwogICAgICAgICAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH1lbHNlIGlmKGhvc3RVcmwubWF0Y2goL211c2ljXC50YWloZVwuY29tLykpewogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICB9CgoJCX0pOwoKCgl9CiAgICBmdW5jdGlvbiBzZXRDb29raWUoY25hbWUsY3ZhbHVlLGV4ZGF5cyl7CiAgICAgICAgdmFyIGQgPSBuZXcgRGF0ZSgpOwogICAgICAgIGQuc2V0VGltZShkLmdldFRpbWUoKSsoZXhkYXlzKjI0KjYwKjYwKjEwMDApKTsKICAgICAgICB2YXIgZXhwaXJlcyA9ICJleHBpcmVzPSIrZC50b0dNVFN0cmluZygpOwogICAgICAgIGRvY3VtZW50LmNvb2tpZSA9IGNuYW1lKyI9IitjdmFsdWUrIjsgIitleHBpcmVzOwogICAgfQogICAgZnVuY3Rpb24gZ2V0Q29va2llKGNuYW1lKXsKICAgICAgICB2YXIgbmFtZSA9IGNuYW1lICsgIj0iOwogICAgICAgIHZhciBjYSA9IGRvY3VtZW50LmNvb2tpZS5zcGxpdCgnOycpOwogICAgICAgIGZvcih2YXIgaT0wOyBpPGNhLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgIHZhciBjID0gY2FbaV0udHJpbSgpOwogICAgICAgICAgICBpZiAoYy5pbmRleE9mKG5hbWUpPT0wKSB7IHJldHVybiBjLnN1YnN0cmluZyhuYW1lLmxlbmd0aCxjLmxlbmd0aCk7IH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICIiOwogICAgfQoJLy/ojrflj5Z1cmzlj4LmlbA7CglmdW5jdGlvbiBnZXRRdWVyeVN0cmluZyhlKSB7CgkJdmFyIHQgPSBuZXcgUmVnRXhwKCIoXnwmKSIgKyBlICsgIj0oW14mXSopKCZ8JCkiKTsKCQl2YXIgYSA9IHdpbmRvdy5sb2NhdGlvbi5zZWFyY2guc3Vic3RyKDEpLm1hdGNoKHQpOwoJCWlmIChhICE9IG51bGwpIHJldHVybiBhWzJdOwoJCXJldHVybiAiIjsKCX0KCn0pKCk7","requires":[{"meta":{"name":"jquery.min.js","url":"https://cdn.jsdelivr.net/npm/jquery@3.2.1/dist/jquery.min.js","ts":1638677843380,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"sweetalert2.all.min.js","url":"https://cdn.jsdelivr.net/npm/sweetalert2@10.16.6/dist/sweetalert2.all.min.js","ts":1638677843384,"mimetype":"text/javascript"},"source":""}]},{"name":"AC-baidu-重定向优化百度搜狗谷歌必应搜索_favicon_双列","options":{"check_for_updates":true,"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_prototypes":false,"noframes":null,"run_at":null,"override":{"use_includes":[],"orig_includes":["*://ipv6.baidu.com/*","*://www.baidu.com/*","*://www1.baidu.com/*","*://m.baidu.com/*","*://xueshu.baidu.com/s*","*://www.so.com/s?*","*://*.bing.com/*","*://encrypted.google.*/search*","*://*.google*/search*","*://*.google*/webhp*","*://*.zhihu.com/*","*://*duckduckgo.com/*","*://*.dogedoge.com/*"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":["*://*.google*/sorry*","https://zhidao.baidu.com/*","https://*.zhidao.baidu.com/*","https://www.baidu.com/img/*"],"merge_excludes":true,"use_connects":[],"merge_connects":true,"use_blockers":[],"orig_run_at":"document-start","orig_noframes":null,"orig_connects":["baidu.com","google.com","google.com.hk","google.com.jp","bing.com","duckduckgo.com","dogedoge.com","so.com"]}},"storage":{"ts":1638700832207,"data":{"Config":"s{\"isRedirectEnable\":false,\"isAdsEnable\":false,\"isAutopage\":true,\"isBlockEnable\":false,\"isBlockDisplay\":false,\"isBlockBtnNotDisplay\":false,\"AdsStyleEnable\":true,\"baidu\":{\"name\":\"baidu\",\"AdsStyleMode\":\"1\",\"HuYanMode\":false},\"google\":{\"name\":\"google\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"bing\":{\"name\":\"bing\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"duck\":{\"name\":\"duck\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"doge\":{\"name\":\"doge\",\"AdsStyleMode\":\"3\",\"HuYanMode\":false},\"sogou\":{\"name\":\"sogou\",\"AdsStyleMode\":\"1\",\"HuYanMode\":false},\"zhihu\":{\"name\":\"zhihu\",\"AdsStyleMode\":\"0\",\"HuYanMode\":false},\"other\":{\"name\":\"other\",\"AdsStyleMode\":\"0\",\"HuYanMode\":false},\"Style_BaiduLite\":false,\"defaultHuYanColor\":\"#DEF1EF\",\"isUserColorEnable\":true,\"isFaviconEnable\":true,\"defaultFaviconUrl\":\"https://ae01.alicdn.com/kf/HTB1dRY0X8OD3KVjSZFFq6An9pXay.jpg\",\"doDisableSug\":true,\"isRightDisplayEnable\":true,\"isCounterEnable\":false,\"isALineEnable\":false,\"isUserStyleEnable\":false,\"normalizeDuck\":true,\"acceptLicense\":false,\"isEnLang\":false,\"isGooleInBaiduModeEnable\":false,\"UserBlockList\":[],\"UserStyleText\":\"/**计数器的颜色样式*/\\ndiv .AC-CounterT{\\n  background: #FD9999;\\n}\\n/**右侧栏的样式-其实不开启更好看一些*/\\n#content_right{\\n  padding: 20px 15px 15px;\\n  border-radius: 5px;\\n  background-color: #fff;\\n  box-sizing: border-box;\\n  box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -webkit-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n  -moz-box-shadow: 0 0 20px 2px rgba(0, 0, 0, .1);\\n}\\nbody[baidu] {\\n  position: relative;\\n}\\nbody[baidu]:before {\\n  position: fixed;\\n  width: 100%;\\n  height: 100%;\\n  top: 0;\\n  left: 0;\\n  content: '';\\n  background-image: url('https://img.tujidu.com/image/5fdde8468423e.jpg');\\n  background-size: 100% auto;\\n  opacity: 1; /*背景图透明度=0.8，最大1*/\\n}\\n/**隐藏首页的大图标-修复可能导致外援样式异常**/\\nbody[baidu] #s_lg_img_new{\\n  display:none !important;\\n}\\nbody[baidu] .c-container{\\n  border-radius: 5px;\\n  background-color: rgba(255,255,255, 0.3) !important; /*百度搜索块体的颜色；透明度=0.1，最大1*/\\n}\\nbody[baidu] .c-container h3{\\n  background-color: rgba(248,248,248, 0.3) !important; /*百度搜索块体 - 标题的颜色；透明度=0.1，最大1*/\\n}\",\"oldVersion\":\"24.29\",\"lastSaveTime\":1638700830201}"}},"enabled":true,"position":2,"file_url":"https://greasyfork.org/scripts/14178-ac-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2-favicon-%E5%8F%8C%E5%88%97/code/AC-baidu-%E9%87%8D%E5%AE%9A%E5%90%91%E4%BC%98%E5%8C%96%E7%99%BE%E5%BA%A6%E6%90%9C%E7%8B%97%E8%B0%B7%E6%AD%8C%E5%BF%85%E5%BA%94%E6%90%9C%E7%B4%A2_favicon_%E5%8F%8C%E5%88%97.user.js","uuid":"a872fa8f-76ac-46bf-bdd9-d2726d0fc469","source":"","resources":[{"meta":{"name":"baiduCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduCommonStyle.css?t=24.26","ts":1638677801117,"mimetype":"text/css"},"source":""},{"meta":{"name":"baiduOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduOnePageStyle.css?t=24.26","ts":1638677801124,"mimetype":"text/css"},"source":"LyoqU3RvcmUgQmFpZHVPbmVQYWdlU3R5bGUqKi8NCiN3cmFwcGVyX3dyYXBwZXIgI2NvbnRhaW5lcnsNCiAgICB3aWR0aDogMTAwJTsNCiAgICBtYXJnaW4tbGVmdDogdW5zZXQ7DQp9DQpmb3JtLmZtew0KICAgIHBvc2l0aW9uOnJlbGF0aXZlOw0KICAgIGJhY2tncm91bmQtY29sb3I6IHVuc2V0Ow0KfQ0KYm9keVtiYWlkdV0gLnBhZ2Vmb290Lmdqew0KICAgIG1hcmdpbi10b3A6IDEwMHB4Ow0KfQ0KLndyYXBwZXJfbmV3IC5oZWFkX3dyYXBwZXIgI3Jlc3VsdF9sb2dvew0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KI3NfdGFiIGIsI3NfdGFiIGF7DQogICAgcG9zaXRpb246cmVsYXRpdmU7DQp9DQojd3JhcHBlciAgLmhlYWRfbnVtc19jb250X291dGVyew0KICAgIHBvc2l0aW9uOmFic29sdXRlOw0KICAgIGxlZnQ6IDIwJTsNCiAgICB3aWR0aDogNjAlOw0KfQ0KI3dyYXBwZXIgICNjb250ZW50X2xlZnQsI3dyYXBwZXIgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjcnMsICN3cmFwcGVyICNwYWdlew0KICAgIHRvcDogMzVweDsNCiAgICBwb3NpdGlvbjpyZWxhdGl2ZTsNCiAgICBwYWRkaW5nLWxlZnQ6IDBweDsNCiAgICB3aWR0aDogNDAlICFpbXBvcnRhbnQ7DQogICAgbWluLXdpZHRoOiA2NzBweDsNCiAgICBmbG9hdDp1bnNldDsNCiAgICBtYXJnaW4tbGVmdDogdW5zZXQ7DQogICAgbWFyZ2luOiAwIGF1dG87DQp9DQoNCiN3cmFwcGVyICNwYWdlew0KICAgIGJhY2tncm91bmQ6IHVuc2V0Ow0KfQ0KI3dyYXBwZXIgI3JzIHRoew0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCiN3cmFwcGVyICNyc3sNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgbWFyZ2luOiAzMHB4IGF1dG8gLTIwcHggYXV0bzsNCn0NCiN3cmFwcGVyICAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lcnsNCiAgICB3aWR0aDogMTAwJSAhaW1wb3J0YW50Ow0KICAgIG1pbi13aWR0aDo2NTBweDsNCn0NCkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMDBweCkgew0KICAgICN3cmFwcGVyICAjY29udGVudF9sZWZ0LCAjd3JhcHBlciAgI3Jzew0KICAgICAgICBtaW4td2lkdGg6ODAwcHg7DQogICAgfQ0KfQ0KI3dyYXBwZXIgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjY29udGVudF9sZWZ0ew0KICAgIHBhZGRpbmctbGVmdDogMjBweDsNCiAgICBkaXNwbGF5OiBibG9jazsNCn0NCiN3cmFwcGVyICNjb250ZW50X3JpZ2h0ew0KICAgIGZsb2F0OiB1bnNldDsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQp9DQpib2R5LnNob3dSaWdodCAjd3JhcHBlciAjY29udGFpbmVyLnNhbV9uZXdncmlkICNjb250ZW50X2xlZnR7DQogICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKGNhbGMoNnZ3IC0gMjUxcHgpKTsNCn0NCmJvZHkuc2hvd1JpZ2h0ICN3cmFwcGVyICNjb250ZW50X3JpZ2h0ew0KICAgIHJpZ2h0OiBjYWxjKDM3LjV2dyAtIDQ3MHB4KTsNCn0NCkBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDEyODBweCl7DQogICAgYm9keS5zaG93UmlnaHQgI3dyYXBwZXIgI2NvbnRhaW5lci5zYW1fbmV3Z3JpZCAjY29udGVudF9sZWZ0ew0KICAgICAgICB0cmFuc2Zvcm06IHVuc2V0Ow0KICAgIH0NCiAgICBib2R5LnNob3dSaWdodCAjd3JhcHBlciAjY29udGVudF9yaWdodHsNCiAgICAgICAgZGlzcGxheTogbm9uZTsNCiAgICB9DQp9DQojd3JhcHBlciAjcGFnZSBhLCAjd3JhcHBlciAjcGFnZSBzdHJvbmd7DQogICAgbWFyZ2luLXJpZ2h0OiAyMnB4ICFpbXBvcnRhbnQ7DQp9DQojd3JhcHBlciAjcGFnZSAucGFnZS1pbm5lcnsNCiAgICBwYWRkaW5nLWxlZnQ6IDIycHg7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCi5zX3RhYl9pbm5lcnsNCiAgICBkaXNwbGF5OmJsb2NrICFpbXBvcnRhbnQ7DQp9DQojY29udGFpbmVyIC5oaW50X2NvbW1vbl9yZXN0b3B7DQogICAgcG9zaXRpb246IGFic29sdXRlOw0KICAgIGxlZnQ6IGNhbGMoNDV2dyAtIDUwMHB4KTsNCiAgICBtYXJnaW4tdG9wOiAyNXB4Ow0KfQ0KLkFDLnNwLXNlcGFyYXRvcnsNCiAgICB3aWR0aDogYXV0bzsNCn0NCi8qc2VhcmNoIGVuZ2luZSBqdW1wKi8NCiNzZWotY29udGFpbmVyew0KICAgIHBhZGRpbmctbGVmdDogMDsNCiAgICBtYXJnaW4tbGVmdDogMDsNCiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7DQp9DQouc19mb3JtX3dyYXBwZXIgew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQp9DQojd3JhcHBlciAjc190YWJ7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KICAgIG1hcmdpbi1sZWZ0OiAwOw0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQp9DQojd3JhcHBlciAjY29udGFpbmVyIC5oZWFkX251bXNfY29udF9vdXRlciAuc2VhcmNoX3Rvb2xfY29udGVyLA0KI3dyYXBwZXIgI2NvbnRhaW5lciAuaGVhZF9udW1zX2NvbnRfb3V0ZXIgLm51bXMgew0KICAgIHdpZHRoOiA2OSU7DQogICAgbWFyZ2luLWxlZnQ6IDE2JTsNCn0NCmZvcm0uZm0gLnNfaXB0X3dyLmJnew0KICAgIG1pbi13aWR0aDogY2FsYygzNy41dncgLSAxNTBweCk7DQp9DQoNCi5yZXN1bHQtbW9sZWN1bGUubmV3LXBtZCB7DQogICAgbWFyZ2luOiAwIGF1dG87DQogICAgbWluLXdpZHRoOiA4MDBweDsNCiAgICB3aWR0aDogNDAlICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luLXRvcDogNjBweDsNCiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7DQp9DQoNCi5uZXctcG1kICNyc19uZXcgew0KICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyMHB4KTsNCiAgICBwYWRkaW5nOiAxMHB4IDAgMTBweCAyMHB4Ow0KfQ0KDQoubmV3LXBtZCAjcnNfbmV3IHRhYmxlew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIG1hcmdpbi10b3A6IDEycHg7DQp9DQoNCkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE5MjFweCkgew0KICAgICNoZWFkIC5oZWFkX3dyYXBwZXJ7DQogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlM2QoMTQwcHgsMCwxcHgpOw0KICAgIH0NCiAgICAud3JhcHBlcl9uZXcgI3NfdGFiLnNfdGFiIC5zX3RhYl9pbm5lciB7DQogICAgICAgIHdpZHRoOiA5MDBweDsNCiAgICAgICAgcGFkZGluZy1sZWZ0OiAyOTZweDsNCiAgICB9DQogICAgZm9ybS5mbSAuc19pcHRfd3IuYmd7DQogICAgICAgIG1pbi13aWR0aDogY2FsYygzNy41dncgLSAxNTBweCk7DQogICAgfQ0KICAgIC5oZWFkX3dyYXBwZXIgI3Ugew0KICAgICAgICByaWdodDogMjAwcHg7DQogICAgfQ0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTM2NnB4KSBhbmQgKG1heC13aWR0aDogMTkyMHB4KSB7DQogICAgLndyYXBwZXJfbmV3IC5oZWFkX3dyYXBwZXIgI3Jlc3VsdF9sb2dvew0KICAgICAgICBtYXJnaW4tbGVmdDogMHB4Ow0KICAgIH0NCn0="},{"meta":{"name":"baiduTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduTwoPageStyle.css?t=24.26","ts":1638677801128,"mimetype":"text/css"},"source":"LyoqU3RvcmUgQmFpZHVUb3dQYWdlU3R5bGUqKi8NCiN3cmFwcGVyX3dyYXBwZXIgI2NvbnRhaW5lciB7DQogICAgd2lkdGg6IGF1dG87DQp9DQpmb3JtLmZtew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB1bnNldDsNCn0NCiNzX3RhYiBiLCAjc190YWIgYSB7DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KfQ0KI3dyYXBwZXIgI3NfdGFiew0KICAgIHBhZGRpbmctbGVmdDogMDsNCiAgICBtYXJnaW4tbGVmdDogMDsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KfQ0KI3dyYXBwZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5zZWFyY2hfdG9vbF9jb250ZXIsDQojd3JhcHBlciAuaGVhZF9udW1zX2NvbnRfb3V0ZXIgLm51bXMgew0KICAgIHdpZHRoOiA4MCU7DQogICAgbWFyZ2luLWxlZnQ6IDEwJTsNCn0NCiN3cmFwcGVyICAuaGVhZF9udW1zX2NvbnRfb3V0ZXIsDQouaGludF9jb21tb25fcmVzdG9wLA0KI2hlYWRlcl90b3BfYmFyIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgbGVmdDogMTAlOw0KICAgIHdpZHRoOiA4MCU7DQp9DQojd3JhcHBlciAjaGVhZGVyX3RvcF9iYXJ7DQogICAgbWFyZ2luLWJvdHRvbTogMHB4Ow0KfQ0KYm9keSAjY29udGFpbmVyLnNhbV9uZXdncmlkICNjb250ZW50X2xlZnR7DQogICAgd2lkdGg6IDgwJTsNCn0NCiN3cmFwcGVyICNjb250ZW50X2xlZnR7DQogICAgZGlzcGxheTogaW5saW5lLWdyaWQ7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlOw0KICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICJ4bWFpbiB4bWFpbiI7DQogICAgbWFyZ2luOiAwIGF1dG87DQogICAgcG9zaXRpb246IHJlbGF0aXZlOw0KICAgIHBhZGRpbmctbGVmdDogNSU7DQogICAgZmxvYXQ6IHVuc2V0Ow0KICAgIHdpZHRoOiA4MCU7DQogICAgbWFyZ2luLWxlZnQ6NyU7DQogICAgbWFyZ2luLWJvdHRvbTogMzBweDsNCn0NCmJvZHlbbmV3c10gI3dyYXBwZXIgI2NvbnRlbnRfbGVmdD5kaXY6bm90KFtjbGFzc10pOm5vdChbaWRdKXsNCiAgICBkaXNwbGF5OiBpbmxpbmUtZ3JpZDsNCiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDUwJSA1MCU7DQogICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogInhtYWluIHhtYWluIjsNCn0NCiN3cmFwcGVyICNjb250ZW50X3JpZ2h0ew0KICAgIGRpc3BsYXk6bm9uZSAhaW1wb3J0YW50Ow0KfQ0KI3dyYXBwZXJfd3JhcHBlciAjY29udGFpbmVyICNyc3sNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgbWFyZ2luOiAwIGF1dG87DQp9DQojd3JhcHBlciAjcGFnZSB7DQogICAgbWluLXdpZHRoOiA3MTBweDsNCiAgICBoZWlnaHQ6IDQwcHg7DQogICAgbGluZS1oZWlnaHQ6IDQwcHg7DQogICAgcGFkZGluZzogNXB4IDEwcHg7DQogICAgbWFyZ2luOiAwIGF1dG87DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCn0NCiN3cmFwcGVyICNwYWdlIC5wYWdlLWlubmVyew0KICAgIHBhZGRpbmctbGVmdDogMDsNCn0NCiN3cmFwcGVyICAjY29udGVudF9sZWZ0IC5yZXN1bHQsDQojd3JhcHBlciAgI2NvbnRlbnRfbGVmdCAuYy1jb250YWluZXIgew0KICAgIHdpZHRoOiB1bnNldCAhaW1wb3J0YW50Ow0KICAgIG1heC13aWR0aDogMTAwJTsNCiAgICBtYXJnaW4tbGVmdDogNXB4Ow0KICAgIG1hcmdpbi1yaWdodDogMTVweDsNCn0NCg0KI3dyYXBwZXIgICNjb250ZW50X2xlZnQ+Kjpub3QoW2NsYXNzKj0ncmVzdWx0J10pOm5vdChbY2xhc3MqPSdjLWdyb3VwLXdyYXBwZXInXSl7DQoJZ3JpZC1jb2x1bW4tc3RhcnQ6IDE7DQogICAgZ3JpZC1jb2x1bW4tZW5kOiB4bWFpbi1lbmQ7DQp9DQouYy1jb250YWluZXIgaDMgYXsNCiAgICB6LWluZGV4OjE7DQp9DQouQUMuc3Atc2VwYXJhdG9yew0KICAgIHdpZHRoOiBhdXRvOw0KfQ0KLypzZWFyY2ggZW5naW5lIGp1bXAqLw0KI3Nlai1jb250YWluZXJ7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KICAgIG1hcmdpbi1sZWZ0OiAwOw0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCi5zX2Zvcm1fd3JhcHBlciB7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZmxleDsNCn0NCg0KLnJlc3VsdC1tb2xlY3VsZS5uZXctcG1kIHsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICBtaW4td2lkdGg6IDgwMHB4Ow0KICAgIHdpZHRoOiA0MCUgIWltcG9ydGFudDsNCiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7DQp9DQoNCi5uZXctcG1kICNyc19uZXcgew0KICAgIGJhY2tncm91bmQtY29sb3I6IHdoaXRlOw0KICAgIHdpZHRoOiBjYWxjKDEwMCUgLSAyMHB4KTsNCiAgICBwYWRkaW5nOiAxMHB4IDAgMTBweCAyMHB4Ow0KfQ0KDQoubmV3LXBtZCAjcnNfbmV3IHRhYmxlew0KICAgIHdpZHRoOiAxMDAlOw0KICAgIG1hcmdpbi10b3A6IDEycHg7DQp9DQoNCiN3cmFwcGVyIC5oZWFkX251bXNfY29udF9vdXRlciAuc2VhcmNoX3Rvb2xfY29udGVyLA0KI3dyYXBwZXIgLmhlYWRfbnVtc19jb250X291dGVyIC5udW1zIHsNCiAgICB3aWR0aDogODAlOw0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDogMTUwMHB4KSB7DQogICAgZm9ybS5mbSAuc19pcHRfd3IuYmd7DQogICAgICAgIG1pbi13aWR0aDogNDUwcHgNCiAgICB9DQogICAgLndyYXBwZXJfbmV3IC5oZWFkX3dyYXBwZXIgI3Jlc3VsdF9sb2dvew0KICAgICAgICBtYXJnaW4tbGVmdDogLTE3MHB4Ow0KICAgIH0NCn0NCkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDE5MjFweCkgew0KICAgICNzX3RhYi5zX3RhYiAuc190YWJfaW5uZXIgew0KICAgICAgICB3aWR0aDogOTAwcHg7DQogICAgfQ0KICAgIGZvcm0uZm0gLnNfaXB0X3dyLmJnew0KICAgICAgICBtaW4td2lkdGg6IDkwMHB4DQogICAgfQ0KfQ=="},{"meta":{"name":"baiduLiteStyle.css","url":"http://ibaidu.tujidu.com/newcss/baiduLiteStyle.css?t=24.26","ts":1638677801137,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleCommonStyle.css?t=24.26","ts":1638677801141,"mimetype":"text/css"},"source":""},{"meta":{"name":"googleOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleOnePageStyle.css?t=24.26","ts":1638677801144,"mimetype":"text/css"},"source":"LyoqU3RvcmUgR29vZ2xlVHdvUGFnZVN0eWxlKiovDQojcnNvIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZmxvYXQ6IHVuc2V0Ow0KfQ0KI3JzbyAualVta0ZiOmhvdmVyIHsNCiAgICBtYXJnaW4tYm90dG9tOiAzMHB4Ow0KICAgIG1hcmdpbi1sZWZ0OiAyMHB4Ow0KfQ0KI3JzbyAuZ3sNCiAgICB3aWR0aDogdW5zZXQ7DQogICAgbWFyZ2luLWxlZnQ6IDIwcHg7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICBwYWRkaW5nOiAwcHggMjBweCAxNXB4Ow0KICAgIG1hcmdpbi10b3A6IDBweDsNCiAgICBtYXJnaW4tYm90dG9tOiAzMHB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOw0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQp9DQouc2VhcmNoPiNpcmVzICNyc28+Lmd7DQogICAgbWF4LXdpZHRoOiB1bnNldDsNCn0NCiNyc28+LmcgfiBkaXY6bm90KC5nKXsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KfQ0KI21haW4gI3JjbnR7DQogICAgbWF4LXdpZHRoOiB1bnNldDsNCn0NCmJvZHkgI2FwcGJhcixib2R5IC5yaHNjb2wsIGJvZHkgI3RvcF9uYXYsIGJvZHkgI2ZiYXJ7DQogICAgbWluLXdpZHRoOiB1bnNldDsNCn0NCiNyc28gZy1zY3JvbGxpbmctY2Fyb3VzZWx7DQogICAgbWFyZ2luOiB1bnNldDsNCiAgICBtYXJnaW4tbGVmdDogMjBweDsNCn0NCi5jb2x7DQogICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsNCn0NCi5jb2wgI2NlbnRlcl9jb2x7DQogICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDsNCiAgICBtYXJnaW4tbGVmdDogdW5zZXQgIWltcG9ydGFudDsNCn0NCi5zcnAgLmJpZyAjdHNmew0KICAgIHdpZHRoOiA4MzNweDsNCn0NCi8qKnNlYXJjaCBib3ggYWxpZ24gY2VudGVyKiovDQouc3JwIGZvcm17DQogICAgbWFyZ2luOiAwIGF1dG87DQp9DQojdG9wX25hdnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KfQ0KLyoqdmlkZW8gYm94IGFsaWduIGNlbnRlcioqLw0KZy1zZWN0aW9uLXdpdGgtaGVhZGVyew0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCn0NCiNoZHRiICNoZHRiLW1zYnsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICB3aWR0aDogMTAwJTsNCn0NCiNoZHRiICNoZHRiLW1zYi12aXN7DQogICAgbWFyZ2luLWxlZnQ6IC0xNjlweDsNCn0NCiNtYWluICNjbnQsICNjbnQgI2NlbnRlcl9jb2wsICNjbnQgI2Zvb3R7DQogICAgd2lkdGg6IGNhbGMoMzYuM3Z3ICsgNTI1cHgpOw0KfQ0KQG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDoxNDQwcHgpew0KICAgIC5STk5YZ2J7DQogICAgICAgIHdpZHRoOiA4MCUgIWltcG9ydGFudDsNCiAgICB9DQp9"},{"meta":{"name":"googleTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/googleTwoPageStyle.css?t=24.26","ts":1638677801147,"mimetype":"text/css"},"source":"LyoqU3RvcmUgR29vZ2xlVHdvUGFnZVN0eWxlKiovDQojcnNvIHsNCiAgICBwb3NpdGlvbjogcmVsYXRpdmU7DQogICAgZmxvYXQ6IHVuc2V0Ow0KfQ0KI3JzbyAualVta0ZiOmhvdmVyIHsNCiAgICBtYXJnaW4tYm90dG9tOiAzMHB4Ow0KICAgIG1hcmdpbi1sZWZ0OiAyMHB4Ow0KfQ0KI3JzbyAuZywgLnZrX2N7DQogICAgd2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAyMHB4Ow0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgcGFkZGluZzogMTBweCAyMHB4IDE1cHg7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICB0cmFuc2l0aW9uOiBhbGwgMC4yNXMgY3ViaWMtYmV6aWVyKC4yMywxLC4zMiwxKSAwczsNCn0NCi5zZWFyY2g+I2lyZXMgI3JzbyAuZ3sNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI21haW4gI3JjbnQgI3Joc3sNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQojbWFpbiAjcmNudHsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI21haW4gI2NudCwgI2NudCAjY2VudGVyX2NvbCwgI2NudCAjZm9vdHsNCiAgICB3aWR0aDogY2FsYyg1NHZ3ICsgMzYwcHgpOw0KfQ0KYm9keSAjYXBwYmFyLGJvZHkgLnJoc2NvbCwgYm9keSAjdG9wX25hdiwgYm9keSAjZmJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KfQ0KI3JzbyAuQ09Fb2lkew0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouY29sew0KICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQp9DQouY29sICNjZW50ZXJfY29sew0KICAgIHdpZHRoOiAxMDAlICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luLWxlZnQ6IHVuc2V0ICFpbXBvcnRhbnQ7DQp9DQouc3JnLCAjcnNvLCAjcnNvPmRpdnsNCglkaXNwbGF5OiBncmlkOw0KCWdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZml0LG1pbm1heCg1MCUsMWZyKSk7DQogICAgZ3JpZC10ZW1wbGF0ZS1hcmVhczogInhtYWluIHhtYWluIjsNCn0NCi8qI3Jzbz5kaXY6bm90KC5nKSwgI3JzbyAuc3JneyovDQovKiAgICBncmlkLWNvbHVtbi1zdGFydDogMTsqLw0KLyogICAgZ3JpZC1jb2x1bW4tZW5kOiB4bWFpbi1lbmQ7Ki8NCi8qfSovDQovKipzZWFyY2ggYm94IGFsaWduIGNlbnRlcioqLw0KLnNycCBmb3Jtew0KICAgIG1hcmdpbjowIGF1dG87DQp9DQpnLXNlY3Rpb24td2l0aC1oZWFkZXJ7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KI2hkdGIgI2hkdGItbXNiew0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIHdpZHRoOiAxMDAlOw0KfQ0KI2hkdGIgI2hkdGItbXNiLXZpc3sNCiAgICBtYXJnaW4tbGVmdDogLTE2OXB4Ow0KfQ=="},{"meta":{"name":"bingCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingCommonStyle.css?t=24.26","ts":1638677801154,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nQ29tbW9uU3R5bGUqLw0KYm9keSB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y1ZjVmNTsNCn0NCi5zaF9mYXZpY29uew0KICAgIG1hcmdpbi1sZWZ0OiAxNnB4Ow0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzPmxpOm5vdCgjbWZhX3Jvb3QpIHsNCiAgICB3aWR0aDogNjcwcHg7DQogICAgcGFkZGluZzogMTJweCAyMHB4ICFpbXBvcnRhbnQ7DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMSk7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGEgew0KICAgIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgICBjb2xvcjogIzM0NzZkMjsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhLCAjYl9yZXN1bHRzIGgyIHN0cm9uZ3sNCiAgICBmb250LXdlaWdodDogYm9sZDsNCiAgICBmb250LXNpemU6IG1lZGl1bTsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cz5saTpob3ZlciB7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjMpOw0KICAgIGJhY2tncm91bmQ6ICNGQ0ZDRkMgIWltcG9ydGFudDsNCiAgICBib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLW1vei1ib3gtc2hhZG93OiAwIDAgMXB4IGdyYXk7DQp9DQojYl9jb250ZW50ID4jYl9yZXN1bHRzIGxpOm5vdCgjbWZhX3Jvb3QpIGgyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Ow0KICAgIG1hcmdpbjogLTEycHggLTIwcHggMTBweCAtMjBweDsNCiAgICBwYWRkaW5nOiA4cHggMjBweCA1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAwcHggMHB4Ow0KfQ0KDQphLCBhIHN0cm9uZyB7DQogICAgdGV4dC1kZWNvcmF0aW9uOiBub25lOw0KfQ0KDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgYSBzdHJvbmcsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYSBzdHJvbmcgew0KICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTsNCn0NCi5iX2FsZ286Zmlyc3QtY2hpbGQ6aG92ZXIgaDIgYXsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmUgIWltcG9ydGFudDsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBhOmhvdmVyOmFmdGVyLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGE6aG92ZXI6YWZ0ZXIgew0KICAgIGxlZnQ6IDA7DQogICAgd2lkdGg6IDEwMCU7DQogICAgLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICAtbW96LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIHRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGE6aG92ZXIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgYTpob3ZlcnsNCiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHMgYTphZnRlciwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOmFmdGVyIHsNCiAgICBjb250ZW50OiAiIjsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMzNDc2ZDI7DQogICAgYm90dG9tOiAtMnB4Ow0KICAgIGxlZnQ6IDEwMCU7DQogICAgd2lkdGg6IDA7DQogICAgLXdlYmtpdC10cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCiAgICAtbW96LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KICAgIHRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGE6dmlzaXRlZCwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQgc3Ryb25nLA0KI2JfY29udGVudCAjYl9yZXN1bHRzIGgyIGgyIGE6dmlzaXRlZCwNCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBoMiBhOnZpc2l0ZWQgc3Ryb25nIHsNCiAgICBjb2xvcjogIzY2MDA5OTsNCn0NCiNiX2NvbnRlbnQgI2JfcmVzdWx0cyBoMiBhOnZpc2l0ZWQ6aG92ZXI6YWZ0ZXIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHMgaDIgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCiNiX2NvbnRlbnQ+b2wjYl9jb250ZXh0ew0KICAgIGRpc3BsYXk6bm9uZTsNCn0NCmJvZHkgI2JfaGVhZGVyew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQojYl9jb250ZW50IC5iX3VuZGVyU2VhcmNoYm94ew0KICAgIG1hcmdpbi10b3A6IDEwcHg7DQp9DQojYl9oZWFkZXIgLmJfc2NvcGViYXJ7DQogICAgbWFyZ2luOiB1bnNldDsNCn0NCi8qc2VhcmNoIGVuZ2luZSBqdW1wKi8NCi50c2YtcD4ubG9nb2NvbnQsICNzZWotY29udGFpbmVyew0KICAgIG1hcmdpbi1yaWdodDogMzUwcHg7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KLnRzZi1wPi5zZmliYmJjew0KICAgIG1hcmdpbi1yaWdodDogMzUwcHg7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KfQ0KLmJfc2VhcmNoYm94Rm9ybSAuc2FfdG17DQogICAgdGV4dC1hbGlnbjogbGVmdDsgLyogU2VhcmNoQm94IHRleHQgQ2VudGVyICovDQp9DQpib2R5ICNiX2hlYWRlciAjZXN0X3N3aXRjaHsNCiAgICBtYXJnaW46IDAgYXV0bzsNCiAgICBwYWRkaW5nLXJpZ2h0OiAxMCU7IC8qKlRPRE8qKiovDQp9DQpib2R5ICNlc3RfY246OmFmdGVyLCBib2R5ICNlc3RfZW46OmFmdGVyew0KICAgIHRyYW5zZm9ybTogc2NhbGUoMS4xLDEuMykgcGVyc3BlY3RpdmUoLjVlbSkgcm90YXRlWCgwZGVnKTsNCiAgICAtd2Via2l0LXRyYW5zZm9ybTogc2NhbGUoMS4xLDEuMykgcGVyc3BlY3RpdmUoLjVlbSkgcm90YXRlWCgwZGVnKTsNCn0NCkBtZWRpYSAobWF4LXdpZHRoOiAxMTAwcHgpew0KICAgIGJvZHkgI2JfaGVhZGVyICNlc3Rfc3dpdGNoew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoMS4ycmVtKTsNCiAgICB9DQp9DQovKiBTZWFyY2hJdG1lcyBCb3R0b20gdG8gVG9wIGFuaSAqLw0KI2JfY29udGVudHsNCiAgICBhbmltYXRpb24tbmFtZTogYW5pX2JvdHRvbVRvdG9wOw0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlOw0KfQ0KDQovKiBTZWFyY2hCYXIgTGVmdCB0byBSaWdodCBhbmkgKi8NCmJvZHkgI2JfaGVhZGVyIHsNCiAgICBhbmltYXRpb24tbmFtZTogYW5pX3RvcFRvYnV0dG9tOw0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCmJvZHl7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9oaWRlVG9TaG93Ow0KICAgIGFuaW1hdGlvbi1kdXJhdGlvbjogMC42czsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCi5BQy5zcC1zZXBhcmF0b3J7DQogICAgbWFyZ2luLXRvcDogLTE1cHg7DQp9DQpAa2V5ZnJhbWVzIGFuaV9sZWZ0VG9yaWdodCB7DQogICAgMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCi8qIGFuaSAqLw0KQGtleWZyYW1lcyBhbmlfYm90dG9tVG90b3Agew0KICAgIDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKDMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCkAtd2Via2l0LWtleWZyYW1lcyBhbmlfdG9wVG9idXR0b20gew0KICAgIDAlIHsNCiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTMycHgpOw0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAyMCUgew0KICAgICAgICBvcGFjaXR5OiAwOw0KICAgIH0NCiAgICAzMCUgew0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCkAtd2Via2l0LWtleWZyYW1lcyBhbmlfaGlkZVRvU2hvdyB7DQogICAgMCUgew0KICAgICAgICBkaXNwbGF5Om5vbmU7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIGRpc3BsYXk6bm9uZTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgZGlzcGxheTpub25lOw0KICAgICAgICBvcGFjaXR5OiAwLjg7DQogICAgfQ0KICAgIDEwMCUgew0KICAgICAgICBvcGFjaXR5OiAxOw0KICAgIH0NCn0NCg=="},{"meta":{"name":"bingOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingOnePageStyle.css?t=24.26","ts":1638677801156,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nT25lUGFnZVN0eWxlKi8NCiNiX2NvbnRlbnQgYXNpZGV7DQogICAgZGlzcGxheTpub25lOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzew0KICAgIHdpZHRoOiA3M3Z3Ow0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsNCiAgICBhbGlnbi1pdGVtczogY2VudGVyOw0KICAgIG1heC13aWR0aDogMTAwMHB4Ow0KfQ0KYm9keSAjYl9oZWFkZXJ7DQogICAgd2lkdGg6IDcydnc7DQogICAgdGV4dC1hbGlnbjogY2VudGVyOw0KICAgIG1hcmdpbjogMCBhdXRvOw0KfQ0KYm9keSAjYl9jb250ZW50ew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgbWFyZ2luLWxlZnQ6IHVuc2V0Ow0KICAgIHBhZGRpbmctbGVmdDogdW5zZXQ7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCkgew0KICAgIHdpZHRoOjk4JTsNCn0NCg=="},{"meta":{"name":"bingTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/bingTwoPageStyle.css?t=24.26","ts":1638677801160,"mimetype":"text/css"},"source":"LypTdG9yZSBCaW5nVHdvUGFnZVN0eWxlKi8NCiNjb250YWluZXIgI2NvbnRlbnRfbGVmdCAuaGl0X3RvcF9uZXcsDQojYl9jb250ZW50IGFzaWRlLCAjYl9yZXN1bHRzICNtZmFfcm9vdHsNCiAgICBkaXNwbGF5Om5vbmU7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHN7DQogICAgd2lkdGg6IDczdnc7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiByZXBlYXQoYXV0by1maXQsbWlubWF4KDUwJSwxZnIpKTsNCiAgICBncmlkLXRlbXBsYXRlLWFyZWFzOiAieG1haW4geG1haW4iOw0KICAgIGRpc3BsYXk6IGlubGluZS1ncmlkOw0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzPmxpOm5vdCgjbWZhX3Jvb3QpIHsNCiAgICB3aWR0aDo5OCU7DQogICAgbWFyZ2luLWxlZnQ6IDElOw0KfQ0KI2JfcmVzdWx0cyAuYl9hbGdvIC5iX2RlZXAgdWx7DQogICAgd2lkdGg6IDUwJTsNCn0NCiNiX21zZywgI2JfcGFnew0KICAgIGdyaWQtY29sdW1uLWVuZDogeG1haW4tZW5kOw0KICAgIGdyaWQtY29sdW1uLXN0YXJ0OiAxOw0KICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQp9DQpib2R5ICNiX2NvbnRlbnR7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBtYXJnaW4tbGVmdDogdW5zZXQ7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCmJvZHkgI2JfaGVhZGVyew0KICAgIHdpZHRoOiA3MnZ3Ow0KICAgIHRleHQtYWxpZ246IGNlbnRlcjsNCiAgICBtYXJnaW46IDAgYXV0bzsNCn0NCg=="},{"meta":{"name":"duckCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckCommonStyle.css?t=24.26","ts":1638677801163,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb0NvbW1vblN0eWxlKi8NCmJvZHkgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQoucmVzdWx0X19pY29uIC5yZXN1bHRfX2ljb25fX2ltZywgLnJlc3VsdF9faWNvbiAucmVzdWx0X19pY29uIGltZ3sNCiAgICBkaXNwbGF5OiBub25lOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7DQogICAgZm9udC13ZWlnaHQ6IDYwMDsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIG1heC13aWR0aDogNjcwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCB7DQogICAgd2lkdGg6IDY3MHB4Ow0KICAgIG92ZXJmbG93OiBoaWRkZW47DQogICAgbWFyZ2luLXRvcDogMHB4Ow0KICAgIG1hcmdpbi1ib3R0b206IDI1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4Ow0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQogICAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgICBib3JkZXI6IDFweCBzb2xpZCByZ2JhKDAsMCwwLDAuMSk7DQogICAgdHJhbnNpdGlvbjogYWxsIDAuMjVzIGN1YmljLWJlemllciguMjMsMSwuMzIsMSkgMHM7DQp9DQouZGFyay1iZyAjbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjMzMzOw0KfQ0KLmRhcmstYmcgI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICMzNDU7DQp9DQouZGFyay1iZyAjbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X190aXRsZSBhIHsNCiAgICBjb2xvcjogI0NDQ0NDQzsNCn0NCi5kYXJrLWJnICNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIC5yZXN1bHRfX3RpdGxlIGE6dmlzaXRlZCB7DQogICAgY29sb3I6ICNiNzY2M2U7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X190aXRsZSBhIHsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOw0KICAgIG1heC13aWR0aDogNjQwcHg7DQogICAgY29sb3I6ICMzNDc2ZDI7DQogICAgZm9udC1zaXplOiBzbWFsbGVyOw0KfQ0KDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X19ib2R5ew0KICAgIHBhZGRpbmc6IDEycHggMjBweCAhaW1wb3J0YW50Ow0KfQ0KDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcDpob3ZlciB7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjMpOw0KICAgIGJveC1zaGFkb3c6IDAgMCAxcHggZ3JleTsNCiAgICAtd2Via2l0LWJveC1zaGFkb3c6IDAgMCAxcHggZ3JleTsNCiAgICAtbW96LWJveC1zaGFkb3c6IDAgMCAxcHggZ3JheTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZjhmOGY4Ow0KICAgIG1hcmdpbjogLTEycHggLTIwcHggMHB4IC0yMHB4Ow0KICAgIHBhZGRpbmc6IDhweCAyMHB4IDVweDsNCiAgICBib3JkZXItcmFkaXVzOiA1cHggNXB4IDBweCAwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6YWZ0ZXIgew0KICAgIGNvbnRlbnQ6ICIiOw0KICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTsNCiAgICBib3JkZXItYm90dG9tOiAycHggc29saWQgIzM0NzZkMjsNCiAgICBib3R0b206IDFweDsNCiAgICBsZWZ0OiAxMDAlOw0KICAgIHdpZHRoOiAwOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtcywgbGVmdCAzNTBtczsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZCwNCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZCBzdHJvbmcgew0KICAgIGNvbG9yOiAjNjYwMDk5Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyLA0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTp2aXNpdGVkOmhvdmVyOmFmdGVyIHsNCiAgICBsZWZ0OiAwOw0KICAgIHdpZHRoOiAxMDAlOw0KICAgIC13ZWJraXQtdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgLW1vei10cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCiAgICB0cmFuc2l0aW9uOiB3aWR0aCAzNTBtczsNCn0NCg0KLyogU2VhcmNoSXRtZXMgQm90dG9tIHRvIFRvcCBhbmkgKi8NCiNsaW5rc193cmFwcGVyICNsaW5rcyB7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9ib3R0b21Ub3RvcDsNCiAgICBhbmltYXRpb24tZHVyYXRpb246IC4zczsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlOw0KfQ0KDQovKiBTZWFyY2hCYXIgTGVmdCB0byBSaWdodCBhbmkgKi8NCiNoZWFkZXJfd3JhcHBlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgYW5pbWF0aW9uLW5hbWU6IGFuaV9sZWZ0VG9yaWdodDsNCiAgICBhbmltYXRpb24tZHVyYXRpb246IC4zczsNCiAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBlYXNlLW91dDsNCn0NCkBrZXlmcmFtZXMgYW5pX2xlZnRUb3JpZ2h0IHsNCiAgICAwJSB7DQogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMzJweCk7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDMwJSB7DQogICAgICAgIG9wYWNpdHk6IDAuODsNCiAgICB9DQogICAgMTAwJSB7DQogICAgICAgIG9wYWNpdHk6IDE7DQogICAgfQ0KfQ0KLyogYW5pICovDQpAa2V5ZnJhbWVzIGFuaV9ib3R0b21Ub3RvcCB7DQogICAgMCUgew0KICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMzJweCk7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDIwJSB7DQogICAgICAgIG9wYWNpdHk6IDA7DQogICAgfQ0KICAgIDMwJSB7DQogICAgICAgIG9wYWNpdHk6IDAuODsNCiAgICB9DQogICAgMTAwJSB7DQogICAgICAgIG9wYWNpdHk6IDE7DQogICAgfQ0KfQ0K"},{"meta":{"name":"duckOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckOnePageStyle.css?t=24.26","ts":1638677801165,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb09uZVBhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsICNvcmdhbmljLW1vZHVsZSwgLnBpbm5lZC10by1ib3R0b217DQogICAgZGlzcGxheTogbm9uZTsNCn0NCi5qcy1yZXN1bHQtaGlkZGVuLWVsew0KICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCn0NCi5zaXRlLXdyYXBwZXIgI3dlYl9jb250ZW50X3dyYXBwZXIgLmN3IHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIG1heC13aWR0aDogdW5zZXQ7DQogICAgbWFyZ2luLWxlZnQ6IC0xNTBweDsNCn0NCg0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAuc2VhcmNoLWZpbHRlcnMtd3JhcCwNCiN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tZXNzYWdlew0KICAgIGp1c3RpZnktY29udGVudDogY2VudGVyOw0KICAgIGRpc3BsYXk6IGdyaWQ7DQp9DQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciB7DQogICAgbWF4LXdpZHRoOiB1bnNldDsNCn0NCg0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgd2lkdGg6IDUwMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXJ7DQogICAgZGlzcGxheTogaW5saW5lLWZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWFpbnsNCiAgICBmbG9hdDogdW5zZXQ7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouYm9keS0tc2VycCAuZm9vdGVyew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCg=="},{"meta":{"name":"duckTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/duckTwoPageStyle.css?t=24.26","ts":1638677801166,"mimetype":"text/css"},"source":"LypTdG9yZTogRHVja0R1Y2tHb1R3b1BhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsDQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhciwNCiNvcmdhbmljLW1vZHVsZSwNCi5waW5uZWQtdG8tYm90dG9tew0KICAgIGRpc3BsYXk6IG5vbmU7DQp9DQouanMtcmVzdWx0LWhpZGRlbi1lbHsNCiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQp9DQouc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jdyB7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnNlYXJjaC1maWx0ZXJzLXdyYXAsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWVzc2FnZXsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBncmlkOw0KfQ0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIgew0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIC5oZWFkZXJfX3NlYXJjaC13cmFwIHsNCiAgICB3aWR0aDogNTAwcHg7DQp9DQojbGlua3Nfd3JhcHBlcnsNCiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIGZsb2F0OiB1bnNldDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLXNpZGViYXJ7DQogICAgbWluLXdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW46IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzew0KICAgIHdpZHRoOiA4MHZ3Ow0KICAgIC8qIFRoaXMgbWF5IGNhdXNlIFBhZ2UgZmFpbGVkICovDQogICAgZGlzcGxheTogaW5saW5lLWdyaWQ7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlOw0KICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICJ4bWFpbiB4bWFpbiI7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWFpbiAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcHsNCiAgICB3aWR0aDogdW5zZXQ7DQogICAgbWFyZ2luLXJpZ2h0OiAxNXB4Ow0KfQ0KI2xpbmtzIC5yZXN1bHQtLW1vcmUsICNsaW5rcyAucmVzdWx0LS1zZXB7DQogICAgZ3JpZC1jb2x1bW4tc3RhcnQ6IDE7DQogICAgZ3JpZC1jb2x1bW4tZW5kOiB4bWFpbi1lbmQ7DQogICAgd2lkdGg6IHVuc2V0ICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMDsNCiAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4Ow0KfQ0KI2xpbmtzIC5yZXN1bHQtLXNlcHsNCiAgICBtYXJnaW4tYm90dG9tOiAyZW07DQp9DQouYm9keS0tc2VycCAuZm9vdGVyew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCg=="},{"meta":{"name":"dogeCommonStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeCommonStyle.css?t=24.26","ts":1638677801166,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZUNvbW1vblN0eWxlKi8NCmJvZHkgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmNWY1ZjU7DQp9DQoucmVzdWx0c19saW5rc19kZWVwIC5yZXN1bHRfX2ljb257DQogICAgZGlzcGxheTogbm9uZTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyew0KICAgIGZvbnQtd2VpZ2h0OiA2MDA7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWFpbnsNCiAgICBtYXgtd2lkdGg6IDY3MHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgew0KICAgIHdpZHRoOiA2NzBweDsNCiAgICBvdmVyZmxvdzogaGlkZGVuOw0KICAgIG1hcmdpbi10b3A6IDBweDsNCiAgICBtYXJnaW4tYm90dG9tOiAyNXB4Ow0KICAgIGJvcmRlci1yYWRpdXM6IDVweDsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmOw0KICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7DQogICAgYm9yZGVyOiAxcHggc29saWQgcmdiYSgwLDAsMCwwLjEpOw0KICAgIHRyYW5zaXRpb246IGFsbCAwLjI1cyBjdWJpYy1iZXppZXIoLjIzLDEsLjMyLDEpIDBzOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdGl0bGUgYSB7DQogICAgb3ZlcmZsb3c6IGhpZGRlbjsNCiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsNCiAgICBtYXgtd2lkdGg6IDY0MHB4Ow0KICAgIGNvbG9yOiAjMzQ3NmQyOw0KICAgIGZvbnQtc2l6ZTogc21hbGxlcjsNCn0NCg0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fYm9keXsNCiAgICBwYWRkaW5nOiAxMnB4IDIwcHggIWltcG9ydGFudDsNCn0NCg0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXA6aG92ZXIgew0KICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYmEoMCwwLDAsMC4zKTsNCiAgICBib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLXdlYmtpdC1ib3gtc2hhZG93OiAwIDAgMXB4IGdyZXk7DQogICAgLW1vei1ib3gtc2hhZG93OiAwIDAgMXB4IGdyYXk7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2Y4ZjhmODsNCiAgICBtYXJnaW46IC0xMnB4IC0yMHB4IDBweCAtMjBweDsNCiAgICBwYWRkaW5nOiA4cHggMjBweCA1cHg7DQogICAgYm9yZGVyLXJhZGl1czogNXB4IDVweCAwcHggMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDIgYTpob3ZlcjphZnRlciB7DQogICAgbGVmdDogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOmFmdGVyIHsNCiAgICBjb250ZW50OiAiIjsNCiAgICBwb3NpdGlvbjogYWJzb2x1dGU7DQogICAgYm9yZGVyLWJvdHRvbTogMnB4IHNvbGlkICMzNDc2ZDI7DQogICAgYm90dG9tOiAxcHg7DQogICAgbGVmdDogMTAwJTsNCiAgICB3aWR0aDogMDsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zLCBsZWZ0IDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXMsIGxlZnQgMzUwbXM7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQsDQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcCBoMiBhOnZpc2l0ZWQgc3Ryb25nIHsNCiAgICBjb2xvcjogIzY2MDA5OTsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlciwNCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIGE6dmlzaXRlZDpob3ZlcjphZnRlciB7DQogICAgbGVmdDogMDsNCiAgICB3aWR0aDogMTAwJTsNCiAgICAtd2Via2l0LXRyYW5zaXRpb246IHdpZHRoIDM1MG1zOw0KICAgIC1tb3otdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQogICAgdHJhbnNpdGlvbjogd2lkdGggMzUwbXM7DQp9DQoNCi8qIFNlYXJjaEl0bWVzIEJvdHRvbSB0byBUb3AgYW5pICovDQojbGlua3Nfd3JhcHBlciAjbGlua3Mgew0KICAgIGFuaW1hdGlvbi1uYW1lOiBhbmlfYm90dG9tVG90b3A7DQogICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAuM3M7DQogICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZTsNCn0NCg0KLyogU2VhcmNoQmFyIExlZnQgdG8gUmlnaHQgYW5pICovDQojaGVhZGVyX3dyYXBwZXIgLmhlYWRlcl9fc2VhcmNoLXdyYXAgew0KICAgIGFuaW1hdGlvbi1uYW1lOiBhbmlfbGVmdFRvcmlnaHQ7DQogICAgYW5pbWF0aW9uLWR1cmF0aW9uOiAuM3M7DQogICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogZWFzZS1vdXQ7DQp9DQouQUMuc3Atc2VwYXJhdG9yew0KICAgIG1hcmdpbi10b3A6IC0xNXB4Ow0KfQ0KQGtleWZyYW1lcyBhbmlfbGVmdFRvcmlnaHQgew0KICAgIDAlIHsNCiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC0zMnB4KTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMjAlIHsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgb3BhY2l0eTogMC44Ow0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICB9DQp9DQovKiBhbmkgKi8NCkBrZXlmcmFtZXMgYW5pX2JvdHRvbVRvdG9wIHsNCiAgICAwJSB7DQogICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgzMnB4KTsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMjAlIHsNCiAgICAgICAgb3BhY2l0eTogMDsNCiAgICB9DQogICAgMzAlIHsNCiAgICAgICAgb3BhY2l0eTogMC44Ow0KICAgIH0NCiAgICAxMDAlIHsNCiAgICAgICAgb3BhY2l0eTogMTsNCiAgICB9DQp9DQo="},{"meta":{"name":"dogeOnePageStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeOnePageStyle.css?t=24.26","ts":1638677801168,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZU9uZVBhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsICNvcmdhbmljLW1vZHVsZSwgLnBpbm5lZC10by1ib3R0b217DQogICAgZGlzcGxheTogbm9uZTsNCn0NCi5qcy1yZXN1bHQtaGlkZGVuLWVsew0KICAgIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsNCn0NCi5zaXRlLXdyYXBwZXIgI3dlYl9jb250ZW50X3dyYXBwZXIgLmN3IHsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBmbGV4Ow0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCkBtZWRpYSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMDBweCkgew0KICAgICNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIHsNCiAgICAgICAgd2lkdGg6IDEwMCU7DQogICAgfQ0KfQ0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciwNCiN3ZWJfY29udGVudF93cmFwcGVyICNsaW5rc193cmFwcGVyIC5zZWFyY2gtZmlsdGVycy13cmFwLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1lc3NhZ2V7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZ3JpZDsNCn0NCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIHsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KDQojaGVhZGVyX3dyYXBwZXIgI2hlYWRlciAuaGVhZGVyX19zZWFyY2gtd3JhcCB7DQogICAgd2lkdGg6IDUwMHB4Ow0KfQ0KI2xpbmtzX3dyYXBwZXJ7DQogICAgZGlzcGxheTogaW5saW5lLWZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiAwOw0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW57DQogICAgZmxvYXQ6IHVuc2V0Ow0KICAgIG1heC13aWR0aDogODYwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhcnsNCiAgICBtaW4td2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbjogdW5zZXQ7DQp9DQouYm9keS0tc2VycCAuZm9vdGVyew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCg=="},{"meta":{"name":"dogeTwoPageStyle.css","url":"http://ibaidu.tujidu.com/newcss/dogeTwoPageStyle.css?t=24.26","ts":1638677801169,"mimetype":"text/css"},"source":"LypTdG9yZTogRG9nZVR3b1BhZ2VTdHlsZSovDQouanMtc2lkZWJhci1hZHMsDQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tc2lkZWJhciwNCiNvcmdhbmljLW1vZHVsZSwNCi5waW5uZWQtdG8tYm90dG9tew0KICAgIGRpc3BsYXk6IG5vbmU7DQp9DQouanMtcmVzdWx0LWhpZGRlbi1lbHsNCiAgICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7DQp9DQouc2l0ZS13cmFwcGVyICN3ZWJfY29udGVudF93cmFwcGVyIC5jdyB7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgZGlzcGxheTogZmxleDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KICAgIG1hcmdpbi1sZWZ0OiAtMTUwcHg7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyLA0KI3dlYl9jb250ZW50X3dyYXBwZXIgI2xpbmtzX3dyYXBwZXIgLnNlYXJjaC1maWx0ZXJzLXdyYXAsDQojd2ViX2NvbnRlbnRfd3JhcHBlciAjbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWVzc2FnZXsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCiAgICBkaXNwbGF5OiBncmlkOw0KfQ0KI2hlYWRlcl93cmFwcGVyICNoZWFkZXIgew0KICAgIG1heC13aWR0aDogdW5zZXQ7DQp9DQoNCiNoZWFkZXJfd3JhcHBlciAjaGVhZGVyIC5oZWFkZXJfX3NlYXJjaC13cmFwIHsNCiAgICB3aWR0aDogNTAwcHg7DQp9DQojbGlua3Nfd3JhcHBlcnsNCiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDsNCiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsNCn0NCiNsaW5rc193cmFwcGVyIC5yZXN1bHRzLS1tYWluew0KICAgIGZsb2F0OiB1bnNldDsNCiAgICBtYXgtd2lkdGg6IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLXNpZGViYXJ7DQogICAgbWluLXdpZHRoOiB1bnNldDsNCiAgICBtYXJnaW46IHVuc2V0Ow0KfQ0KI2xpbmtzX3dyYXBwZXIgLnJlc3VsdHMtLW1haW4gI2xpbmtzew0KICAgIHdpZHRoOiA4MHZ3Ow0KICAgIC8qIFRoaXMgbWF5IGNhdXNlIFBhZ2UgZmFpbGVkICovDQogICAgZGlzcGxheTogaW5saW5lLWdyaWQ7DQogICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlOw0KICAgIGdyaWQtdGVtcGxhdGUtYXJlYXM6ICJ4bWFpbiB4bWFpbiI7DQp9DQojbGlua3Nfd3JhcHBlciAucmVzdWx0cy0tbWFpbiAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcHsNCiAgICB3aWR0aDogdW5zZXQ7DQogICAgbWFyZ2luLXJpZ2h0OiAxNXB4Ow0KfQ0KI2xpbmtzIC5yZXN1bHQtLW1vcmUsICNsaW5rcyAucmVzdWx0LS1zZXB7DQogICAgZ3JpZC1jb2x1bW4tc3RhcnQ6IDE7DQogICAgZ3JpZC1jb2x1bW4tZW5kOiB4bWFpbi1lbmQ7DQogICAgd2lkdGg6IHVuc2V0ICFpbXBvcnRhbnQ7DQogICAgcGFkZGluZzogMDsNCiAgICBwYWRkaW5nLXJpZ2h0OiAxNXB4Ow0KfQ0KI2xpbmtzIC5yZXN1bHQtLXNlcHsNCiAgICBtYXJnaW4tYm90dG9tOiAyZW07DQp9DQouYm9keS0tc2VycCAuZm9vdGVyew0KICAgIGRpc3BsYXk6IGZsZXg7DQogICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7DQogICAgcGFkZGluZy1sZWZ0OiB1bnNldDsNCn0NCg=="},{"meta":{"name":"HuYanStyle.css","url":"http://ibaidu.tujidu.com/newcss/HuYanStyle.css?t=24.26","ts":1638677801171,"mimetype":"text/css"},"source":"LyoqU3RvcmUgSHVZYW5TdHlsZSoqLw0KLyoqKioqQmFpZHUtSHVZYW5TdHlsZSoqKioqLw0KYm9keVtiYWlkdV0sDQojd3JhcHBlciAjaGVhZCwNCiN3cmFwcGVyICNzX3RhYiwNCmZvcm0uZm0gLnNfaXB0X3dyLmJnew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNGRkZGRkY7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3AsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IGFydGljbGUsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciwNCiN3cmFwcGVyICNycywNCiN3cmFwcGVyICNjb250ZW50X3JpZ2h0ew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IGRvdWJsZSAjQTJEN0Q0IDsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3A6aG92ZXIsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQ6aG92ZXIsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3A6aG92ZXIgYXJ0aWNsZXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQp9DQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQgaDMsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5yZXN1bHQtb3AgaDMsDQojd3JhcHBlciAjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciBoMywNCiN3cmFwcGVyICNycyAudHR7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQovKioqQmluZy1IdVlhblN0eWxlKioqKi8NCi5uYV9jbnQgLm53c19pdG0sDQoubndzX2l0bWIsDQojYl9jb250ZW50ICNiX3Jlc3VsdHM+bGk6bm90KCNtZmFfcm9vdCksDQpib2R5ICNiX2hlYWRlcnsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQUFBQUFBIDsNCiAgICBib3JkZXI6IDFweCBkb3VibGUgI0EyRDdENCA7DQogICAgYm9yZGVyLXJhZGl1czogMHB4Ow0KfQ0KI2JfY29udGVudCAjYl9yZXN1bHRzIGxpOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQp9DQojYl9jb250ZW50ICNiX3Jlc3VsdHMgbGkgaDJ7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQovKioqR29vZ2xlLUh1WWFuU3R5bGUqKioqLw0KYm9keVtnb29nbGVdew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNmRGZEZkQ7DQp9DQojcnNvIC5nLCAuYmtXTWdkPi5nLA0KLmJrV01nZCBnLWlubmVyLWNhcmQsDQojcmhzY29sICNyaHMsDQojcmhzY29sICNyaHMgLmc+ZGl2LA0KLmMyeHpUYiAuZywNCi5ydVRjSWQgLmcsDQouZm0wNklmIC5nLA0KLmNVblFLZSAuZywNCi5IYW5RbWYgLmcsDQojcnNvIC5nLA0KI3JzbyAua3AtYmxrLA0KI3JzbyAuTUdxakssDQojcnNvPmRpdjpub3QoLmcpPip7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0FBQUFBQSA7DQogICAgYm9yZGVyOiAxcHggc29saWQgIzljZDJjZkFBOw0KICAgIGJvcmRlci1yYWRpdXM6IDBweDsNCn0NCiNyc28gLmc6aG92ZXIsDQouYmtXTWdkPi5nOmhvdmVyIHsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQ0NDQ0NDICFpbXBvcnRhbnQ7DQogICAgYm9yZGVyOiAxcHggZG91YmxlICM5Y2QyY2Y7DQp9DQouYmtXTWdkIC5nIGRpdi5yLA0KI3JzbyAuZyBoM3sNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkJCQkJCIDsNCn0NCi8qKipTb2dvdS1IdVlhblN0eWxlKioqKi8NCmJvZHlbc29nb3VdLCAjcGFnZWJhcl9jb250YWluZXIgYXsNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZkRmRGZEOw0KfQ0KI21haW4gLnJlc3VsdHM+ZGl2ew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICM5Y2QyY2ZBQTsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojbWFpbiAucmVzdWx0cz5kaXY6aG92ZXIgew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNDQ0NDQ0MgIWltcG9ydGFudDsNCiAgICBib3JkZXI6IDFweCBkb3VibGUgIzljZDJjZjsNCn0NCiNtYWluIC5yZXN1bHRzPmRpdiBoM3sNCiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjQkJCQkJCIDsNCn0NCi8qKipEdWNrX0RvZ2UtSHVZYW5TdHlsZSoqKiovDQpib2R5W2R1Y2tdLGJvZHlbZG9nZV17DQogICAgYmFja2dyb3VuZC1jb2xvcjogI2ZEZkRmRDsNCn0NCiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwew0KICAgIGJhY2tncm91bmQtY29sb3I6ICNBQUFBQUEgOw0KICAgIGJvcmRlcjogMXB4IHNvbGlkICM5Y2QyY2ZBQTsNCiAgICBib3JkZXItcmFkaXVzOiAwcHg7DQp9DQojbGlua3Nfd3JhcHBlciAjbGlua3MgLnJlc3VsdHNfbGlua3NfZGVlcDpob3ZlciB7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0NDQ0NDQyAhaW1wb3J0YW50Ow0KICAgIGJvcmRlcjogMXB4IGRvdWJsZSAjOWNkMmNmOw0KfQ0KI2xpbmtzX3dyYXBwZXIgI2xpbmtzIC5yZXN1bHRzX2xpbmtzX2RlZXAgaDJ7DQogICAgYmFja2dyb3VuZC1jb2xvcjogI0JCQkJCQiA7DQp9DQo="},{"meta":{"name":"SiteConfigRules.conf","url":"http://ibaidu.tujidu.com/newcss/SiteConfigRules.conf?t=24.26","ts":1638677801173,"mimetype":"text/plain"},"source":"b25saW5lREIgPSB7DQogICBiYWlkdTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDEsDQogICAgICAgTWFpblR5cGU6ICIjY29udGVudF9sZWZ0IC5jLWNvbnRhaW5lciIsDQogICAgICAgU3R5cGVfTm9ybWFsOiAiaDMudD5hLCAuYy1jb250YWluZXIgYXJ0aWNsZSBhIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5jLXNob3d1cmwiLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNjb250ZW50X2xlZnQ+I2RvdWJsZT5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dLCNjb250ZW50X2xlZnQ+ZGl2W3NyY2lkXSAqW2NsYXNzfj10XSxbY2xhc3N+PW9wX2Jlc3RfYW5zd2VyX3F1ZXN0aW9uXSIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogJy8vZGl2W0BpZD0icGFnZSJdLy9hW2NvbnRhaW5zKHRleHQoKSwiw6TCuMKLw6TCuMKAw6nCocK1IildW0BocmVmXScsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiY3NzO2RpdiNjb250ZW50X2xlZnQgPiAqIiwNCiAgICAgICAgICAgSFRfaW5zZXJ0OiBbICJjc3M7ZGl2I2NvbnRlbnRfbGVmdCIsIDIgXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJjc3M7I3BhZ2UiLA0KICAgICAgICAgICBzdHlsaXNoOiAiLmF1dG9wYWdlcml6ZV9wYWdlX2luZm8sIGRpdi5zcC1zZXBhcmF0b3Ige21hcmdpbi1ib3R0b206IDEwcHggIWltcG9ydGFudDt9LmMtaW1nLWJvcmRlcntkaXNwbGF5Om5vbmV9IiwNCiAgICAgICB9DQogICB9LA0KICAgc29nb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAyLA0KICAgICAgIE1haW5UeXBlOiAiI21haW4gLnJlc3VsdHM+ZGl2IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy5wdD5hLCBoMy52clRpdGxlPmEiLA0KICAgICAgIEZhdmljb25UeXBlOiAiY2l0ZVtpZCo9J2NhY2hlcmVzdWx0X2luZm9fJ10iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgzIiwNCiAgICAgICBDb3VudGVyVHlwZTogIi5yZXN1bHRzPmRpdiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDMgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vZGl2W0BpZD1cInBhZ2ViYXJfY29udGFpbmVyXCJdLy9hW0BpZD1cInNvZ291X25leHRcIl0iLA0KICAgICAgICAgICBwYWdlRWxlbWVudDogIi8vZGl2W0BjbGFzcz0ncmVzdWx0cyddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAY2xhc3M9J3Jlc3VsdHMnXSIsIDJdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKCdwYWdlYmFyX2NvbnRhaW5lcicpIg0KICAgICAgIH0NCiAgIH0sDQogICBoYW9zb3U6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAzLA0KICAgICAgIE1haW5UeXBlOiAiLnJlcy1saXN0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICIucmVzLWxpc3QgaDM+YSIsDQogICAgICAgRmF2aWNvblR5cGU6ICJjaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIucmVzdWx0cz5kaXYiLA0KICAgICAgIEJsb2NrVHlwZTogImgzIGEiLA0KICAgICAgIHBhZ2VyOnsNCiAgICAgICAgICAgbmV4dExpbms6ICIvL2RpdltAaWQ9J3BhZ2UnXS8vYVt0ZXh0KCk9J8OkwrjCi8OkwrjCgMOpwqHCtT4nXSB8IGlkKCdzbmV4dCcpIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICIvL2RpdltAaWQ9J2NvbnRhaW5lciddL2RpdiIsDQogICAgICAgICAgIEhUX2luc2VydDogWyIvL2RpdltAaWQ9J2NvbnRhaW5lciddIiwgMl0sDQogICAgICAgICAgIHJlcGxhY2VFOiAiaWQoJ3BhZ2UnKSINCiAgICAgICB9DQogICB9LA0KICAgZ29vZ2xlOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNCwNCiAgICAgICBNYWluVHlwZTogIiNyc28gLmciLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmlVaDMwIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMyIsDQogICAgICAgQ291bnRlclR5cGU6ICIjcnNvIC5nIGgzLC5feUU+ZGl2W2NsYXNzfj1fa2tdIGgzIiwNCiAgICAgICBCbG9ja1R5cGU6ICIucmM+ZGl2PmEsICNycywgI3JzbyAuZyBhIiwNCiAgICAgICBwYWdlcjp7DQogICAgICAgICAgIG5leHRMaW5rOiAnaWQoInBubmV4dCIpIHwgaWQoIm5hdmJhciBuYXZjbnQgbmF2IikvL3RkW3NwYW5dL2ZvbGxvd2luZy1zaWJsaW5nOjp0ZFsxXS9hIHwgaWQoIm5uIikvcGFyZW50OjphJywNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICcvL2RpdltAaWQ9InJlcyJdJywNCiAgICAgICAgICAgSFRfaW5zZXJ0OiBbICJjc3M7I3JlcyIsIDIgXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICcvL2RpdltAaWQ9Im5hdmNudCJdIHwgLy9kaXZbQGlkPSJyY250Il0vL2RpdltAcm9sZT0ibmF2aWdhdGlvbiJdJw0KICAgICAgIH0NCiAgIH0sDQogICBiaW5nOiB7DQogICAgICAgU2l0ZVR5cGVJRDogNSwNCiAgICAgICBNYWluVHlwZTogIiNiX3Jlc3VsdHM+bGkiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLmJfYXR0cmlidXRpb24+Y2l0ZSIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDIiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbnNdPmgyLCNiX3Jlc3VsdHM+bGlbY2xhc3N+PWJfYWxnb10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiIsDQogICAgICAgQmxvY2tUeXBlOiAiaDIgYSIsDQogICAgICAgcGFnZXI6ew0KICAgICAgICAgICBuZXh0TGluazogIi8vYVtjb250YWlucyhAY2xhc3MsXCJzYl9wYWdOXCIpXSIsDQogICAgICAgICAgIHBhZ2VFbGVtZW50OiAiaWQoXCJiX3Jlc3VsdHNcIikvbGlbbm90KGNvbnRhaW5zKEBjbGFzcyxcImJfcGFnXCIpIG9yIGNvbnRhaW5zKEBjbGFzcyxcImJfYW5zIGJfdG9wXCIpKV0iLA0KICAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoXCJiX3Jlc3VsdHNcIikvbGlbQGNsYXNzPVwiYl9wYWdcIl0iLCAxXSwNCiAgICAgICAgICAgcmVwbGFjZUU6ICJpZChcImJfcmVzdWx0c1wiKS8vbmF2W0Byb2xlPVwibmF2aWdhdGlvblwiXSIsDQogICAgICAgfQ0KICAgfSwNCiAgIGR1Y2s6IHsNCiAgICAgICBTaXRlVHlwZUlEOiAxMCwNCiAgICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgICBGYXZpY29uVHlwZTogIi5yZXN1bHRzX2xpbmtzX2RlZXAgLnJlc3VsdF9fdXJsX19kb21haW4iLA0KICAgICAgIEZhdmljb25BZGRUbzogImgyIiwNCiAgICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgICAgICBwYWdlcjp7DQogICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcyxcInNiX3BhZ05cIildIiwNCiAgICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZChcImJfcmVzdWx0c1wiKS9saVtub3QoY29udGFpbnMoQGNsYXNzLFwiYl9wYWdcIikgb3IgY29udGFpbnMoQGNsYXNzLFwiYl9hbnMgYl90b3BcIikpXSIsDQogICAgICAgICAgIEhUX2luc2VydDogWyJpZChcImJfcmVzdWx0c1wiKS9saVtAY2xhc3M9XCJiX3BhZ1wiXSIsIDFdLA0KICAgICAgICAgICByZXBsYWNlRTogImlkKFwiYl9yZXN1bHRzXCIpLy9uYXZbQHJvbGU9XCJuYXZpZ2F0aW9uXCJdIiwNCiAgICAgICB9DQogICB9LA0KICAgZG9nZTogew0KICAgICAgU2l0ZVR5cGVJRDogMTEsDQogICAgICBNYWluVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIiwNCiAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdHNfbGlua3NfZGVlcCAucmVzdWx0X191cmxfX2RvbWFpbiIsDQogICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICBDb3VudGVyVHlwZTogIiNsaW5rc193cmFwcGVyICNsaW5rcyAucmVzdWx0c19saW5rc19kZWVwIGgyIiwNCiAgICAgIEJsb2NrVHlwZTogImgyIGEiLA0KICAgICAgcGFnZXI6ew0KICAgICAgICAgIG5leHRMaW5rOiAiLy9hW2NvbnRhaW5zKEBjbGFzcywgJ3Jlc3VsdC0tbW9yZScpXSIsDQogICAgICAgICAgcGFnZUVsZW1lbnQ6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0c19saW5rc19kZWVwJyldIiwNCiAgICAgICAgICBIVF9pbnNlcnQ6IFsiaWQoJ2xpbmtzX3dyYXBwZXInKS8vZGl2W0BpZD0nbGlua3MnXS9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldIiwgMV0sDQogICAgICAgICAgcmVwbGFjZUU6ICJpZCgnbGlua3Nfd3JhcHBlcicpLy9kaXZbY29udGFpbnMoQGNsYXNzLCAncmVzdWx0LS1tb3JlJyldL2FbY29udGFpbnModGV4dCgpLCAnw6TCuMKLw6TCuMKAw6nCocK1JyldW0BocmVmXSIsDQogICAgICB9DQogICB9LA0KICAgbUJhaWR1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA2LA0KICAgICAgIE1haW5UeXBlOiAiI2JfcmVzdWx0cz5saSIsDQogICAgICAgRmF2aWNvblR5cGU6ICIuYl9hdHRyaWJ1dGlvbj5jaXRlIiwNCiAgICAgICBGYXZpY29uQWRkVG86ICJoMiIsDQogICAgICAgQ291bnRlclR5cGU6ICIjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2Fuc10+aDIsI2JfcmVzdWx0cz5saVtjbGFzc349Yl9hbGdvXT5oMiwjYl9yZXN1bHRzPmxpW2NsYXNzfj1iX2FsZ29dPmgyIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMiBhIiwNCiAgIH0sDQogICB6aGlodTogew0KICAgICAgIFNpdGVUeXBlSUQ6IDcsDQogICB9LA0KICAgYmFpZHVfeHVlc2h1OnsNCiAgICAgICBTaXRlVHlwZUlEOiA4LA0KICAgICAgIE1haW5UeXBlOiAiI2NvbnRlbnRfbGVmdCAucmVzdWx0IiwNCiAgICAgICBTdHlwZV9Ob3JtYWw6ICJoMy50PmEsICNyZXN1bHRzIC5jLWNvbnRhaW5lcj4uYy1ibG9ja2EiLA0KICAgICAgIEZhdmljb25UeXBlOiAiLnJlc3VsdC1vcCwgLmMtc2hvd3VybCIsDQogICAgICAgRmF2aWNvbkFkZFRvOiAiaDMiLA0KICAgICAgIENvdW50ZXJUeXBlOiAiI2NvbnRlbnRfbGVmdD4jZG91YmxlPmRpdltzcmNpZF0gKltjbGFzc349dF0sW2NsYXNzfj1vcF9iZXN0X2Fuc3dlcl9xdWVzdGlvbl0sI2NvbnRlbnRfbGVmdD5kaXZbc3JjaWRdICpbY2xhc3N+PXRdLFtjbGFzc349b3BfYmVzdF9hbnN3ZXJfcXVlc3Rpb25dIiwNCiAgICAgICBCbG9ja1R5cGU6ICJoMyBhIiwNCiAgIH0sDQogICBvdGhlcjogew0KICAgICAgIFNpdGVUeXBlSUQ6IDksDQogICB9DQp9DQo="}],"requires":[{"meta":{"name":"vue.min.js","url":"https://cdn.staticfile.org/vue/2.6.11/vue.min.js","ts":1638677801301,"mimetype":"text/javascript"},"source":""},{"meta":{"name":"vue.min.js","url":"https://cdn.jsdelivr.net/npm/vue@2.6.12/dist/vue.min.js","ts":1638677801309,"mimetype":"text/javascript"},"source":"LyohCiAqIFZ1ZS5qcyB2Mi42LjEyCiAqIChjKSAyMDE0LTIwMjAgRXZhbiBZb3UKICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLgogKi8KIWZ1bmN0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYidW5kZWZpbmVkIiE9dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz10KCk6ImZ1bmN0aW9uIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6KGU9ZXx8c2VsZikuVnVlPXQoKX0odGhpcyxmdW5jdGlvbigpeyJ1c2Ugc3RyaWN0Ijt2YXIgZT1PYmplY3QuZnJlZXplKHt9KTtmdW5jdGlvbiB0KGUpe3JldHVybiBudWxsPT1lfWZ1bmN0aW9uIG4oZSl7cmV0dXJuIG51bGwhPWV9ZnVuY3Rpb24gcihlKXtyZXR1cm4hMD09PWV9ZnVuY3Rpb24gaShlKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIGV8fCJudW1iZXIiPT10eXBlb2YgZXx8InN5bWJvbCI9PXR5cGVvZiBlfHwiYm9vbGVhbiI9PXR5cGVvZiBlfWZ1bmN0aW9uIG8oZSl7cmV0dXJuIG51bGwhPT1lJiYib2JqZWN0Ij09dHlwZW9mIGV9dmFyIGE9T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztmdW5jdGlvbiBzKGUpe3JldHVybiJbb2JqZWN0IE9iamVjdF0iPT09YS5jYWxsKGUpfWZ1bmN0aW9uIGMoZSl7dmFyIHQ9cGFyc2VGbG9hdChTdHJpbmcoZSkpO3JldHVybiB0Pj0wJiZNYXRoLmZsb29yKHQpPT09dCYmaXNGaW5pdGUoZSl9ZnVuY3Rpb24gdShlKXtyZXR1cm4gbihlKSYmImZ1bmN0aW9uIj09dHlwZW9mIGUudGhlbiYmImZ1bmN0aW9uIj09dHlwZW9mIGUuY2F0Y2h9ZnVuY3Rpb24gbChlKXtyZXR1cm4gbnVsbD09ZT8iIjpBcnJheS5pc0FycmF5KGUpfHxzKGUpJiZlLnRvU3RyaW5nPT09YT9KU09OLnN0cmluZ2lmeShlLG51bGwsMik6U3RyaW5nKGUpfWZ1bmN0aW9uIGYoZSl7dmFyIHQ9cGFyc2VGbG9hdChlKTtyZXR1cm4gaXNOYU4odCk/ZTp0fWZ1bmN0aW9uIHAoZSx0KXtmb3IodmFyIG49T2JqZWN0LmNyZWF0ZShudWxsKSxyPWUuc3BsaXQoIiwiKSxpPTA7aTxyLmxlbmd0aDtpKyspbltyW2ldXT0hMDtyZXR1cm4gdD9mdW5jdGlvbihlKXtyZXR1cm4gbltlLnRvTG93ZXJDYXNlKCldfTpmdW5jdGlvbihlKXtyZXR1cm4gbltlXX19dmFyIGQ9cCgic2xvdCxjb21wb25lbnQiLCEwKSx2PXAoImtleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzIik7ZnVuY3Rpb24gaChlLHQpe2lmKGUubGVuZ3RoKXt2YXIgbj1lLmluZGV4T2YodCk7aWYobj4tMSlyZXR1cm4gZS5zcGxpY2UobiwxKX19dmFyIG09T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtmdW5jdGlvbiB5KGUsdCl7cmV0dXJuIG0uY2FsbChlLHQpfWZ1bmN0aW9uIGcoZSl7dmFyIHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gZnVuY3Rpb24obil7cmV0dXJuIHRbbl18fCh0W25dPWUobikpfX12YXIgXz0vLShcdykvZyxiPWcoZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVwbGFjZShfLGZ1bmN0aW9uKGUsdCl7cmV0dXJuIHQ/dC50b1VwcGVyQ2FzZSgpOiIifSl9KSwkPWcoZnVuY3Rpb24oZSl7cmV0dXJuIGUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKX0pLHc9L1xCKFtBLVpdKS9nLEM9ZyhmdW5jdGlvbihlKXtyZXR1cm4gZS5yZXBsYWNlKHcsIi0kMSIpLnRvTG93ZXJDYXNlKCl9KTt2YXIgeD1GdW5jdGlvbi5wcm90b3R5cGUuYmluZD9mdW5jdGlvbihlLHQpe3JldHVybiBlLmJpbmQodCl9OmZ1bmN0aW9uKGUsdCl7ZnVuY3Rpb24gbihuKXt2YXIgcj1hcmd1bWVudHMubGVuZ3RoO3JldHVybiByP3I+MT9lLmFwcGx5KHQsYXJndW1lbnRzKTplLmNhbGwodCxuKTplLmNhbGwodCl9cmV0dXJuIG4uX2xlbmd0aD1lLmxlbmd0aCxufTtmdW5jdGlvbiBrKGUsdCl7dD10fHwwO2Zvcih2YXIgbj1lLmxlbmd0aC10LHI9bmV3IEFycmF5KG4pO24tLTspcltuXT1lW24rdF07cmV0dXJuIHJ9ZnVuY3Rpb24gQShlLHQpe2Zvcih2YXIgbiBpbiB0KWVbbl09dFtuXTtyZXR1cm4gZX1mdW5jdGlvbiBPKGUpe2Zvcih2YXIgdD17fSxuPTA7bjxlLmxlbmd0aDtuKyspZVtuXSYmQSh0LGVbbl0pO3JldHVybiB0fWZ1bmN0aW9uIFMoZSx0LG4pe312YXIgVD1mdW5jdGlvbihlLHQsbil7cmV0dXJuITF9LEU9ZnVuY3Rpb24oZSl7cmV0dXJuIGV9O2Z1bmN0aW9uIE4oZSx0KXtpZihlPT09dClyZXR1cm4hMDt2YXIgbj1vKGUpLHI9byh0KTtpZighbnx8IXIpcmV0dXJuIW4mJiFyJiZTdHJpbmcoZSk9PT1TdHJpbmcodCk7dHJ5e3ZhciBpPUFycmF5LmlzQXJyYXkoZSksYT1BcnJheS5pc0FycmF5KHQpO2lmKGkmJmEpcmV0dXJuIGUubGVuZ3RoPT09dC5sZW5ndGgmJmUuZXZlcnkoZnVuY3Rpb24oZSxuKXtyZXR1cm4gTihlLHRbbl0pfSk7aWYoZSBpbnN0YW5jZW9mIERhdGUmJnQgaW5zdGFuY2VvZiBEYXRlKXJldHVybiBlLmdldFRpbWUoKT09PXQuZ2V0VGltZSgpO2lmKGl8fGEpcmV0dXJuITE7dmFyIHM9T2JqZWN0LmtleXMoZSksYz1PYmplY3Qua2V5cyh0KTtyZXR1cm4gcy5sZW5ndGg9PT1jLmxlbmd0aCYmcy5ldmVyeShmdW5jdGlvbihuKXtyZXR1cm4gTihlW25dLHRbbl0pfSl9Y2F0Y2goZSl7cmV0dXJuITF9fWZ1bmN0aW9uIGooZSx0KXtmb3IodmFyIG49MDtuPGUubGVuZ3RoO24rKylpZihOKGVbbl0sdCkpcmV0dXJuIG47cmV0dXJuLTF9ZnVuY3Rpb24gRChlKXt2YXIgdD0hMTtyZXR1cm4gZnVuY3Rpb24oKXt0fHwodD0hMCxlLmFwcGx5KHRoaXMsYXJndW1lbnRzKSl9fXZhciBMPSJkYXRhLXNlcnZlci1yZW5kZXJlZCIsTT1bImNvbXBvbmVudCIsImRpcmVjdGl2ZSIsImZpbHRlciJdLEk9WyJiZWZvcmVDcmVhdGUiLCJjcmVhdGVkIiwiYmVmb3JlTW91bnQiLCJtb3VudGVkIiwiYmVmb3JlVXBkYXRlIiwidXBkYXRlZCIsImJlZm9yZURlc3Ryb3kiLCJkZXN0cm95ZWQiLCJhY3RpdmF0ZWQiLCJkZWFjdGl2YXRlZCIsImVycm9yQ2FwdHVyZWQiLCJzZXJ2ZXJQcmVmZXRjaCJdLEY9e29wdGlvbk1lcmdlU3RyYXRlZ2llczpPYmplY3QuY3JlYXRlKG51bGwpLHNpbGVudDohMSxwcm9kdWN0aW9uVGlwOiExLGRldnRvb2xzOiExLHBlcmZvcm1hbmNlOiExLGVycm9ySGFuZGxlcjpudWxsLHdhcm5IYW5kbGVyOm51bGwsaWdub3JlZEVsZW1lbnRzOltdLGtleUNvZGVzOk9iamVjdC5jcmVhdGUobnVsbCksaXNSZXNlcnZlZFRhZzpULGlzUmVzZXJ2ZWRBdHRyOlQsaXNVbmtub3duRWxlbWVudDpULGdldFRhZ05hbWVzcGFjZTpTLHBhcnNlUGxhdGZvcm1UYWdOYW1lOkUsbXVzdFVzZVByb3A6VCxhc3luYzohMCxfbGlmZWN5Y2xlSG9va3M6SX0sUD0vYS16QS1aXHUwMEI3XHUwMEMwLVx1MDBENlx1MDBEOC1cdTAwRjZcdTAwRjgtXHUwMzdEXHUwMzdGLVx1MUZGRlx1MjAwQy1cdTIwMERcdTIwM0YtXHUyMDQwXHUyMDcwLVx1MjE4Rlx1MkMwMC1cdTJGRUZcdTMwMDEtXHVEN0ZGXHVGOTAwLVx1RkRDRlx1RkRGMC1cdUZGRkQvO2Z1bmN0aW9uIFIoZSx0LG4scil7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6bixlbnVtZXJhYmxlOiEhcix3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITB9KX12YXIgSD1uZXcgUmVnRXhwKCJbXiIrUC5zb3VyY2UrIi4kX1xcZF0iKTt2YXIgQixVPSJfX3Byb3RvX18iaW57fSx6PSJ1bmRlZmluZWQiIT10eXBlb2Ygd2luZG93LFY9InVuZGVmaW5lZCIhPXR5cGVvZiBXWEVudmlyb25tZW50JiYhIVdYRW52aXJvbm1lbnQucGxhdGZvcm0sSz1WJiZXWEVudmlyb25tZW50LnBsYXRmb3JtLnRvTG93ZXJDYXNlKCksSj16JiZ3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLHE9SiYmL21zaWV8dHJpZGVudC8udGVzdChKKSxXPUomJkouaW5kZXhPZigibXNpZSA5LjAiKT4wLFo9SiYmSi5pbmRleE9mKCJlZGdlLyIpPjAsRz0oSiYmSi5pbmRleE9mKCJhbmRyb2lkIiksSiYmL2lwaG9uZXxpcGFkfGlwb2R8aW9zLy50ZXN0KEopfHwiaW9zIj09PUspLFg9KEomJi9jaHJvbWVcL1xkKy8udGVzdChKKSxKJiYvcGhhbnRvbWpzLy50ZXN0KEopLEomJkoubWF0Y2goL2ZpcmVmb3hcLyhcZCspLykpLFk9e30ud2F0Y2gsUT0hMTtpZih6KXRyeXt2YXIgZWU9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KGVlLCJwYXNzaXZlIix7Z2V0OmZ1bmN0aW9uKCl7UT0hMH19KSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigidGVzdC1wYXNzaXZlIixudWxsLGVlKX1jYXRjaChlKXt9dmFyIHRlPWZ1bmN0aW9uKCl7cmV0dXJuIHZvaWQgMD09PUImJihCPSF6JiYhViYmInVuZGVmaW5lZCIhPXR5cGVvZiBnbG9iYWwmJihnbG9iYWwucHJvY2VzcyYmInNlcnZlciI9PT1nbG9iYWwucHJvY2Vzcy5lbnYuVlVFX0VOVikpLEJ9LG5lPXomJndpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO2Z1bmN0aW9uIHJlKGUpe3JldHVybiJmdW5jdGlvbiI9PXR5cGVvZiBlJiYvbmF0aXZlIGNvZGUvLnRlc3QoZS50b1N0cmluZygpKX12YXIgaWUsb2U9InVuZGVmaW5lZCIhPXR5cGVvZiBTeW1ib2wmJnJlKFN5bWJvbCkmJiJ1bmRlZmluZWQiIT10eXBlb2YgUmVmbGVjdCYmcmUoUmVmbGVjdC5vd25LZXlzKTtpZT0idW5kZWZpbmVkIiE9dHlwZW9mIFNldCYmcmUoU2V0KT9TZXQ6ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKCl7dGhpcy5zZXQ9T2JqZWN0LmNyZWF0ZShudWxsKX1yZXR1cm4gZS5wcm90b3R5cGUuaGFzPWZ1bmN0aW9uKGUpe3JldHVybiEwPT09dGhpcy5zZXRbZV19LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihlKXt0aGlzLnNldFtlXT0hMH0sZS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXt0aGlzLnNldD1PYmplY3QuY3JlYXRlKG51bGwpfSxlfSgpO3ZhciBhZT1TLHNlPTAsY2U9ZnVuY3Rpb24oKXt0aGlzLmlkPXNlKyssdGhpcy5zdWJzPVtdfTtjZS5wcm90b3R5cGUuYWRkU3ViPWZ1bmN0aW9uKGUpe3RoaXMuc3Vicy5wdXNoKGUpfSxjZS5wcm90b3R5cGUucmVtb3ZlU3ViPWZ1bmN0aW9uKGUpe2godGhpcy5zdWJzLGUpfSxjZS5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uKCl7Y2UudGFyZ2V0JiZjZS50YXJnZXQuYWRkRGVwKHRoaXMpfSxjZS5wcm90b3R5cGUubm90aWZ5PWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuc3Vicy5zbGljZSgpLHQ9MCxuPWUubGVuZ3RoO3Q8bjt0KyspZVt0XS51cGRhdGUoKX0sY2UudGFyZ2V0PW51bGw7dmFyIHVlPVtdO2Z1bmN0aW9uIGxlKGUpe3VlLnB1c2goZSksY2UudGFyZ2V0PWV9ZnVuY3Rpb24gZmUoKXt1ZS5wb3AoKSxjZS50YXJnZXQ9dWVbdWUubGVuZ3RoLTFdfXZhciBwZT1mdW5jdGlvbihlLHQsbixyLGksbyxhLHMpe3RoaXMudGFnPWUsdGhpcy5kYXRhPXQsdGhpcy5jaGlsZHJlbj1uLHRoaXMudGV4dD1yLHRoaXMuZWxtPWksdGhpcy5ucz12b2lkIDAsdGhpcy5jb250ZXh0PW8sdGhpcy5mbkNvbnRleHQ9dm9pZCAwLHRoaXMuZm5PcHRpb25zPXZvaWQgMCx0aGlzLmZuU2NvcGVJZD12b2lkIDAsdGhpcy5rZXk9dCYmdC5rZXksdGhpcy5jb21wb25lbnRPcHRpb25zPWEsdGhpcy5jb21wb25lbnRJbnN0YW5jZT12b2lkIDAsdGhpcy5wYXJlbnQ9dm9pZCAwLHRoaXMucmF3PSExLHRoaXMuaXNTdGF0aWM9ITEsdGhpcy5pc1Jvb3RJbnNlcnQ9ITAsdGhpcy5pc0NvbW1lbnQ9ITEsdGhpcy5pc0Nsb25lZD0hMSx0aGlzLmlzT25jZT0hMSx0aGlzLmFzeW5jRmFjdG9yeT1zLHRoaXMuYXN5bmNNZXRhPXZvaWQgMCx0aGlzLmlzQXN5bmNQbGFjZWhvbGRlcj0hMX0sZGU9e2NoaWxkOntjb25maWd1cmFibGU6ITB9fTtkZS5jaGlsZC5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5jb21wb25lbnRJbnN0YW5jZX0sT2JqZWN0LmRlZmluZVByb3BlcnRpZXMocGUucHJvdG90eXBlLGRlKTt2YXIgdmU9ZnVuY3Rpb24oZSl7dm9pZCAwPT09ZSYmKGU9IiIpO3ZhciB0PW5ldyBwZTtyZXR1cm4gdC50ZXh0PWUsdC5pc0NvbW1lbnQ9ITAsdH07ZnVuY3Rpb24gaGUoZSl7cmV0dXJuIG5ldyBwZSh2b2lkIDAsdm9pZCAwLHZvaWQgMCxTdHJpbmcoZSkpfWZ1bmN0aW9uIG1lKGUpe3ZhciB0PW5ldyBwZShlLnRhZyxlLmRhdGEsZS5jaGlsZHJlbiYmZS5jaGlsZHJlbi5zbGljZSgpLGUudGV4dCxlLmVsbSxlLmNvbnRleHQsZS5jb21wb25lbnRPcHRpb25zLGUuYXN5bmNGYWN0b3J5KTtyZXR1cm4gdC5ucz1lLm5zLHQuaXNTdGF0aWM9ZS5pc1N0YXRpYyx0LmtleT1lLmtleSx0LmlzQ29tbWVudD1lLmlzQ29tbWVudCx0LmZuQ29udGV4dD1lLmZuQ29udGV4dCx0LmZuT3B0aW9ucz1lLmZuT3B0aW9ucyx0LmZuU2NvcGVJZD1lLmZuU2NvcGVJZCx0LmFzeW5jTWV0YT1lLmFzeW5jTWV0YSx0LmlzQ2xvbmVkPSEwLHR9dmFyIHllPUFycmF5LnByb3RvdHlwZSxnZT1PYmplY3QuY3JlYXRlKHllKTtbInB1c2giLCJwb3AiLCJzaGlmdCIsInVuc2hpZnQiLCJzcGxpY2UiLCJzb3J0IiwicmV2ZXJzZSJdLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9eWVbZV07UihnZSxlLGZ1bmN0aW9uKCl7Zm9yKHZhciBuPVtdLHI9YXJndW1lbnRzLmxlbmd0aDtyLS07KW5bcl09YXJndW1lbnRzW3JdO3ZhciBpLG89dC5hcHBseSh0aGlzLG4pLGE9dGhpcy5fX29iX187c3dpdGNoKGUpe2Nhc2UicHVzaCI6Y2FzZSJ1bnNoaWZ0IjppPW47YnJlYWs7Y2FzZSJzcGxpY2UiOmk9bi5zbGljZSgyKX1yZXR1cm4gaSYmYS5vYnNlcnZlQXJyYXkoaSksYS5kZXAubm90aWZ5KCksb30pfSk7dmFyIF9lPU9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGdlKSxiZT0hMDtmdW5jdGlvbiAkZShlKXtiZT1lfXZhciB3ZT1mdW5jdGlvbihlKXt2YXIgdDt0aGlzLnZhbHVlPWUsdGhpcy5kZXA9bmV3IGNlLHRoaXMudm1Db3VudD0wLFIoZSwiX19vYl9fIix0aGlzKSxBcnJheS5pc0FycmF5KGUpPyhVPyh0PWdlLGUuX19wcm90b19fPXQpOmZ1bmN0aW9uKGUsdCxuKXtmb3IodmFyIHI9MCxpPW4ubGVuZ3RoO3I8aTtyKyspe3ZhciBvPW5bcl07UihlLG8sdFtvXSl9fShlLGdlLF9lKSx0aGlzLm9ic2VydmVBcnJheShlKSk6dGhpcy53YWxrKGUpfTtmdW5jdGlvbiBDZShlLHQpe3ZhciBuO2lmKG8oZSkmJiEoZSBpbnN0YW5jZW9mIHBlKSlyZXR1cm4geShlLCJfX29iX18iKSYmZS5fX29iX18gaW5zdGFuY2VvZiB3ZT9uPWUuX19vYl9fOmJlJiYhdGUoKSYmKEFycmF5LmlzQXJyYXkoZSl8fHMoZSkpJiZPYmplY3QuaXNFeHRlbnNpYmxlKGUpJiYhZS5faXNWdWUmJihuPW5ldyB3ZShlKSksdCYmbiYmbi52bUNvdW50Kyssbn1mdW5jdGlvbiB4ZShlLHQsbixyLGkpe3ZhciBvPW5ldyBjZSxhPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSx0KTtpZighYXx8ITEhPT1hLmNvbmZpZ3VyYWJsZSl7dmFyIHM9YSYmYS5nZXQsYz1hJiZhLnNldDtzJiYhY3x8MiE9PWFyZ3VtZW50cy5sZW5ndGh8fChuPWVbdF0pO3ZhciB1PSFpJiZDZShuKTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXt2YXIgdD1zP3MuY2FsbChlKTpuO3JldHVybiBjZS50YXJnZXQmJihvLmRlcGVuZCgpLHUmJih1LmRlcC5kZXBlbmQoKSxBcnJheS5pc0FycmF5KHQpJiZmdW5jdGlvbiBlKHQpe2Zvcih2YXIgbj12b2lkIDAscj0wLGk9dC5sZW5ndGg7cjxpO3IrKykobj10W3JdKSYmbi5fX29iX18mJm4uX19vYl9fLmRlcC5kZXBlbmQoKSxBcnJheS5pc0FycmF5KG4pJiZlKG4pfSh0KSkpLHR9LHNldDpmdW5jdGlvbih0KXt2YXIgcj1zP3MuY2FsbChlKTpuO3Q9PT1yfHx0IT10JiZyIT1yfHxzJiYhY3x8KGM/Yy5jYWxsKGUsdCk6bj10LHU9IWkmJkNlKHQpLG8ubm90aWZ5KCkpfX0pfX1mdW5jdGlvbiBrZShlLHQsbil7aWYoQXJyYXkuaXNBcnJheShlKSYmYyh0KSlyZXR1cm4gZS5sZW5ndGg9TWF0aC5tYXgoZS5sZW5ndGgsdCksZS5zcGxpY2UodCwxLG4pLG47aWYodCBpbiBlJiYhKHQgaW4gT2JqZWN0LnByb3RvdHlwZSkpcmV0dXJuIGVbdF09bixuO3ZhciByPWUuX19vYl9fO3JldHVybiBlLl9pc1Z1ZXx8ciYmci52bUNvdW50P246cj8oeGUoci52YWx1ZSx0LG4pLHIuZGVwLm5vdGlmeSgpLG4pOihlW3RdPW4sbil9ZnVuY3Rpb24gQWUoZSx0KXtpZihBcnJheS5pc0FycmF5KGUpJiZjKHQpKWUuc3BsaWNlKHQsMSk7ZWxzZXt2YXIgbj1lLl9fb2JfXztlLl9pc1Z1ZXx8biYmbi52bUNvdW50fHx5KGUsdCkmJihkZWxldGUgZVt0XSxuJiZuLmRlcC5ub3RpZnkoKSl9fXdlLnByb3RvdHlwZS53YWxrPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1PYmplY3Qua2V5cyhlKSxuPTA7bjx0Lmxlbmd0aDtuKyspeGUoZSx0W25dKX0sd2UucHJvdG90eXBlLm9ic2VydmVBcnJheT1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MCxuPWUubGVuZ3RoO3Q8bjt0KyspQ2UoZVt0XSl9O3ZhciBPZT1GLm9wdGlvbk1lcmdlU3RyYXRlZ2llcztmdW5jdGlvbiBTZShlLHQpe2lmKCF0KXJldHVybiBlO2Zvcih2YXIgbixyLGksbz1vZT9SZWZsZWN0Lm93bktleXModCk6T2JqZWN0LmtleXModCksYT0wO2E8by5sZW5ndGg7YSsrKSJfX29iX18iIT09KG49b1thXSkmJihyPWVbbl0saT10W25dLHkoZSxuKT9yIT09aSYmcyhyKSYmcyhpKSYmU2UocixpKTprZShlLG4saSkpO3JldHVybiBlfWZ1bmN0aW9uIFRlKGUsdCxuKXtyZXR1cm4gbj9mdW5jdGlvbigpe3ZhciByPSJmdW5jdGlvbiI9PXR5cGVvZiB0P3QuY2FsbChuLG4pOnQsaT0iZnVuY3Rpb24iPT10eXBlb2YgZT9lLmNhbGwobixuKTplO3JldHVybiByP1NlKHIsaSk6aX06dD9lP2Z1bmN0aW9uKCl7cmV0dXJuIFNlKCJmdW5jdGlvbiI9PXR5cGVvZiB0P3QuY2FsbCh0aGlzLHRoaXMpOnQsImZ1bmN0aW9uIj09dHlwZW9mIGU/ZS5jYWxsKHRoaXMsdGhpcyk6ZSl9OnQ6ZX1mdW5jdGlvbiBFZShlLHQpe3ZhciBuPXQ/ZT9lLmNvbmNhdCh0KTpBcnJheS5pc0FycmF5KHQpP3Q6W3RdOmU7cmV0dXJuIG4/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PVtdLG49MDtuPGUubGVuZ3RoO24rKyktMT09PXQuaW5kZXhPZihlW25dKSYmdC5wdXNoKGVbbl0pO3JldHVybiB0fShuKTpufWZ1bmN0aW9uIE5lKGUsdCxuLHIpe3ZhciBpPU9iamVjdC5jcmVhdGUoZXx8bnVsbCk7cmV0dXJuIHQ/QShpLHQpOml9T2UuZGF0YT1mdW5jdGlvbihlLHQsbil7cmV0dXJuIG4/VGUoZSx0LG4pOnQmJiJmdW5jdGlvbiIhPXR5cGVvZiB0P2U6VGUoZSx0KX0sSS5mb3JFYWNoKGZ1bmN0aW9uKGUpe09lW2VdPUVlfSksTS5mb3JFYWNoKGZ1bmN0aW9uKGUpe09lW2UrInMiXT1OZX0pLE9lLndhdGNoPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKGU9PT1ZJiYoZT12b2lkIDApLHQ9PT1ZJiYodD12b2lkIDApLCF0KXJldHVybiBPYmplY3QuY3JlYXRlKGV8fG51bGwpO2lmKCFlKXJldHVybiB0O3ZhciBpPXt9O2Zvcih2YXIgbyBpbiBBKGksZSksdCl7dmFyIGE9aVtvXSxzPXRbb107YSYmIUFycmF5LmlzQXJyYXkoYSkmJihhPVthXSksaVtvXT1hP2EuY29uY2F0KHMpOkFycmF5LmlzQXJyYXkocyk/czpbc119cmV0dXJuIGl9LE9lLnByb3BzPU9lLm1ldGhvZHM9T2UuaW5qZWN0PU9lLmNvbXB1dGVkPWZ1bmN0aW9uKGUsdCxuLHIpe2lmKCFlKXJldHVybiB0O3ZhciBpPU9iamVjdC5jcmVhdGUobnVsbCk7cmV0dXJuIEEoaSxlKSx0JiZBKGksdCksaX0sT2UucHJvdmlkZT1UZTt2YXIgamU9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dD9lOnR9O2Z1bmN0aW9uIERlKGUsdCxuKXtpZigiZnVuY3Rpb24iPT10eXBlb2YgdCYmKHQ9dC5vcHRpb25zKSxmdW5jdGlvbihlLHQpe3ZhciBuPWUucHJvcHM7aWYobil7dmFyIHIsaSxvPXt9O2lmKEFycmF5LmlzQXJyYXkobikpZm9yKHI9bi5sZW5ndGg7ci0tOykic3RyaW5nIj09dHlwZW9mKGk9bltyXSkmJihvW2IoaSldPXt0eXBlOm51bGx9KTtlbHNlIGlmKHMobikpZm9yKHZhciBhIGluIG4paT1uW2FdLG9bYihhKV09cyhpKT9pOnt0eXBlOml9O2UucHJvcHM9b319KHQpLGZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5pbmplY3Q7aWYobil7dmFyIHI9ZS5pbmplY3Q9e307aWYoQXJyYXkuaXNBcnJheShuKSlmb3IodmFyIGk9MDtpPG4ubGVuZ3RoO2krKylyW25baV1dPXtmcm9tOm5baV19O2Vsc2UgaWYocyhuKSlmb3IodmFyIG8gaW4gbil7dmFyIGE9bltvXTtyW29dPXMoYSk/QSh7ZnJvbTpvfSxhKTp7ZnJvbTphfX19fSh0KSxmdW5jdGlvbihlKXt2YXIgdD1lLmRpcmVjdGl2ZXM7aWYodClmb3IodmFyIG4gaW4gdCl7dmFyIHI9dFtuXTsiZnVuY3Rpb24iPT10eXBlb2YgciYmKHRbbl09e2JpbmQ6cix1cGRhdGU6cn0pfX0odCksIXQuX2Jhc2UmJih0LmV4dGVuZHMmJihlPURlKGUsdC5leHRlbmRzLG4pKSx0Lm1peGlucykpZm9yKHZhciByPTAsaT10Lm1peGlucy5sZW5ndGg7cjxpO3IrKyllPURlKGUsdC5taXhpbnNbcl0sbik7dmFyIG8sYT17fTtmb3IobyBpbiBlKWMobyk7Zm9yKG8gaW4gdCl5KGUsbyl8fGMobyk7ZnVuY3Rpb24gYyhyKXt2YXIgaT1PZVtyXXx8amU7YVtyXT1pKGVbcl0sdFtyXSxuLHIpfXJldHVybiBhfWZ1bmN0aW9uIExlKGUsdCxuLHIpe2lmKCJzdHJpbmciPT10eXBlb2Ygbil7dmFyIGk9ZVt0XTtpZih5KGksbikpcmV0dXJuIGlbbl07dmFyIG89YihuKTtpZih5KGksbykpcmV0dXJuIGlbb107dmFyIGE9JChvKTtyZXR1cm4geShpLGEpP2lbYV06aVtuXXx8aVtvXXx8aVthXX19ZnVuY3Rpb24gTWUoZSx0LG4scil7dmFyIGk9dFtlXSxvPSF5KG4sZSksYT1uW2VdLHM9UGUoQm9vbGVhbixpLnR5cGUpO2lmKHM+LTEpaWYobyYmIXkoaSwiZGVmYXVsdCIpKWE9ITE7ZWxzZSBpZigiIj09PWF8fGE9PT1DKGUpKXt2YXIgYz1QZShTdHJpbmcsaS50eXBlKTsoYzwwfHxzPGMpJiYoYT0hMCl9aWYodm9pZCAwPT09YSl7YT1mdW5jdGlvbihlLHQsbil7aWYoIXkodCwiZGVmYXVsdCIpKXJldHVybjt2YXIgcj10LmRlZmF1bHQ7aWYoZSYmZS4kb3B0aW9ucy5wcm9wc0RhdGEmJnZvaWQgMD09PWUuJG9wdGlvbnMucHJvcHNEYXRhW25dJiZ2b2lkIDAhPT1lLl9wcm9wc1tuXSlyZXR1cm4gZS5fcHJvcHNbbl07cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIHImJiJGdW5jdGlvbiIhPT1JZSh0LnR5cGUpP3IuY2FsbChlKTpyfShyLGksZSk7dmFyIHU9YmU7JGUoITApLENlKGEpLCRlKHUpfXJldHVybiBhfWZ1bmN0aW9uIEllKGUpe3ZhciB0PWUmJmUudG9TdHJpbmcoKS5tYXRjaCgvXlxzKmZ1bmN0aW9uIChcdyspLyk7cmV0dXJuIHQ/dFsxXToiIn1mdW5jdGlvbiBGZShlLHQpe3JldHVybiBJZShlKT09PUllKHQpfWZ1bmN0aW9uIFBlKGUsdCl7aWYoIUFycmF5LmlzQXJyYXkodCkpcmV0dXJuIEZlKHQsZSk/MDotMTtmb3IodmFyIG49MCxyPXQubGVuZ3RoO248cjtuKyspaWYoRmUodFtuXSxlKSlyZXR1cm4gbjtyZXR1cm4tMX1mdW5jdGlvbiBSZShlLHQsbil7bGUoKTt0cnl7aWYodClmb3IodmFyIHI9dDtyPXIuJHBhcmVudDspe3ZhciBpPXIuJG9wdGlvbnMuZXJyb3JDYXB0dXJlZDtpZihpKWZvcih2YXIgbz0wO288aS5sZW5ndGg7bysrKXRyeXtpZighMT09PWlbb10uY2FsbChyLGUsdCxuKSlyZXR1cm59Y2F0Y2goZSl7QmUoZSxyLCJlcnJvckNhcHR1cmVkIGhvb2siKX19QmUoZSx0LG4pfWZpbmFsbHl7ZmUoKX19ZnVuY3Rpb24gSGUoZSx0LG4scixpKXt2YXIgbzt0cnl7KG89bj9lLmFwcGx5KHQsbik6ZS5jYWxsKHQpKSYmIW8uX2lzVnVlJiZ1KG8pJiYhby5faGFuZGxlZCYmKG8uY2F0Y2goZnVuY3Rpb24oZSl7cmV0dXJuIFJlKGUscixpKyIgKFByb21pc2UvYXN5bmMpIil9KSxvLl9oYW5kbGVkPSEwKX1jYXRjaChlKXtSZShlLHIsaSl9cmV0dXJuIG99ZnVuY3Rpb24gQmUoZSx0LG4pe2lmKEYuZXJyb3JIYW5kbGVyKXRyeXtyZXR1cm4gRi5lcnJvckhhbmRsZXIuY2FsbChudWxsLGUsdCxuKX1jYXRjaCh0KXt0IT09ZSYmVWUodCxudWxsLCJjb25maWcuZXJyb3JIYW5kbGVyIil9VWUoZSx0LG4pfWZ1bmN0aW9uIFVlKGUsdCxuKXtpZigheiYmIVZ8fCJ1bmRlZmluZWQiPT10eXBlb2YgY29uc29sZSl0aHJvdyBlO2NvbnNvbGUuZXJyb3IoZSl9dmFyIHplLFZlPSExLEtlPVtdLEplPSExO2Z1bmN0aW9uIHFlKCl7SmU9ITE7dmFyIGU9S2Uuc2xpY2UoMCk7S2UubGVuZ3RoPTA7Zm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0KyspZVt0XSgpfWlmKCJ1bmRlZmluZWQiIT10eXBlb2YgUHJvbWlzZSYmcmUoUHJvbWlzZSkpe3ZhciBXZT1Qcm9taXNlLnJlc29sdmUoKTt6ZT1mdW5jdGlvbigpe1dlLnRoZW4ocWUpLEcmJnNldFRpbWVvdXQoUyl9LFZlPSEwfWVsc2UgaWYocXx8InVuZGVmaW5lZCI9PXR5cGVvZiBNdXRhdGlvbk9ic2VydmVyfHwhcmUoTXV0YXRpb25PYnNlcnZlcikmJiJbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0iIT09TXV0YXRpb25PYnNlcnZlci50b1N0cmluZygpKXplPSJ1bmRlZmluZWQiIT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZyZShzZXRJbW1lZGlhdGUpP2Z1bmN0aW9uKCl7c2V0SW1tZWRpYXRlKHFlKX06ZnVuY3Rpb24oKXtzZXRUaW1lb3V0KHFlLDApfTtlbHNle3ZhciBaZT0xLEdlPW5ldyBNdXRhdGlvbk9ic2VydmVyKHFlKSxYZT1kb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoWmUpKTtHZS5vYnNlcnZlKFhlLHtjaGFyYWN0ZXJEYXRhOiEwfSksemU9ZnVuY3Rpb24oKXtaZT0oWmUrMSklMixYZS5kYXRhPVN0cmluZyhaZSl9LFZlPSEwfWZ1bmN0aW9uIFllKGUsdCl7dmFyIG47aWYoS2UucHVzaChmdW5jdGlvbigpe2lmKGUpdHJ5e2UuY2FsbCh0KX1jYXRjaChlKXtSZShlLHQsIm5leHRUaWNrIil9ZWxzZSBuJiZuKHQpfSksSmV8fChKZT0hMCx6ZSgpKSwhZSYmInVuZGVmaW5lZCIhPXR5cGVvZiBQcm9taXNlKXJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbihlKXtuPWV9KX12YXIgUWU9bmV3IGllO2Z1bmN0aW9uIGV0KGUpeyFmdW5jdGlvbiBlKHQsbil7dmFyIHIsaTt2YXIgYT1BcnJheS5pc0FycmF5KHQpO2lmKCFhJiYhbyh0KXx8T2JqZWN0LmlzRnJvemVuKHQpfHx0IGluc3RhbmNlb2YgcGUpcmV0dXJuO2lmKHQuX19vYl9fKXt2YXIgcz10Ll9fb2JfXy5kZXAuaWQ7aWYobi5oYXMocykpcmV0dXJuO24uYWRkKHMpfWlmKGEpZm9yKHI9dC5sZW5ndGg7ci0tOyllKHRbcl0sbik7ZWxzZSBmb3IoaT1PYmplY3Qua2V5cyh0KSxyPWkubGVuZ3RoO3ItLTspZSh0W2lbcl1dLG4pfShlLFFlKSxRZS5jbGVhcigpfXZhciB0dD1nKGZ1bmN0aW9uKGUpe3ZhciB0PSImIj09PWUuY2hhckF0KDApLG49In4iPT09KGU9dD9lLnNsaWNlKDEpOmUpLmNoYXJBdCgwKSxyPSIhIj09PShlPW4/ZS5zbGljZSgxKTplKS5jaGFyQXQoMCk7cmV0dXJue25hbWU6ZT1yP2Uuc2xpY2UoMSk6ZSxvbmNlOm4sY2FwdHVyZTpyLHBhc3NpdmU6dH19KTtmdW5jdGlvbiBudChlLHQpe2Z1bmN0aW9uIG4oKXt2YXIgZT1hcmd1bWVudHMscj1uLmZucztpZighQXJyYXkuaXNBcnJheShyKSlyZXR1cm4gSGUocixudWxsLGFyZ3VtZW50cyx0LCJ2LW9uIGhhbmRsZXIiKTtmb3IodmFyIGk9ci5zbGljZSgpLG89MDtvPGkubGVuZ3RoO28rKylIZShpW29dLG51bGwsZSx0LCJ2LW9uIGhhbmRsZXIiKX1yZXR1cm4gbi5mbnM9ZSxufWZ1bmN0aW9uIHJ0KGUsbixpLG8sYSxzKXt2YXIgYyx1LGwsZjtmb3IoYyBpbiBlKXU9ZVtjXSxsPW5bY10sZj10dChjKSx0KHUpfHwodChsKT8odCh1LmZucykmJih1PWVbY109bnQodSxzKSkscihmLm9uY2UpJiYodT1lW2NdPWEoZi5uYW1lLHUsZi5jYXB0dXJlKSksaShmLm5hbWUsdSxmLmNhcHR1cmUsZi5wYXNzaXZlLGYucGFyYW1zKSk6dSE9PWwmJihsLmZucz11LGVbY109bCkpO2ZvcihjIGluIG4pdChlW2NdKSYmbygoZj10dChjKSkubmFtZSxuW2NdLGYuY2FwdHVyZSl9ZnVuY3Rpb24gaXQoZSxpLG8pe3ZhciBhO2UgaW5zdGFuY2VvZiBwZSYmKGU9ZS5kYXRhLmhvb2t8fChlLmRhdGEuaG9vaz17fSkpO3ZhciBzPWVbaV07ZnVuY3Rpb24gYygpe28uYXBwbHkodGhpcyxhcmd1bWVudHMpLGgoYS5mbnMsYyl9dChzKT9hPW50KFtjXSk6bihzLmZucykmJnIocy5tZXJnZWQpPyhhPXMpLmZucy5wdXNoKGMpOmE9bnQoW3MsY10pLGEubWVyZ2VkPSEwLGVbaV09YX1mdW5jdGlvbiBvdChlLHQscixpLG8pe2lmKG4odCkpe2lmKHkodCxyKSlyZXR1cm4gZVtyXT10W3JdLG98fGRlbGV0ZSB0W3JdLCEwO2lmKHkodCxpKSlyZXR1cm4gZVtyXT10W2ldLG98fGRlbGV0ZSB0W2ldLCEwfXJldHVybiExfWZ1bmN0aW9uIGF0KGUpe3JldHVybiBpKGUpP1toZShlKV06QXJyYXkuaXNBcnJheShlKT9mdW5jdGlvbiBlKG8sYSl7dmFyIHM9W107dmFyIGMsdSxsLGY7Zm9yKGM9MDtjPG8ubGVuZ3RoO2MrKyl0KHU9b1tjXSl8fCJib29sZWFuIj09dHlwZW9mIHV8fChsPXMubGVuZ3RoLTEsZj1zW2xdLEFycmF5LmlzQXJyYXkodSk/dS5sZW5ndGg+MCYmKHN0KCh1PWUodSwoYXx8IiIpKyJfIitjKSlbMF0pJiZzdChmKSYmKHNbbF09aGUoZi50ZXh0K3VbMF0udGV4dCksdS5zaGlmdCgpKSxzLnB1c2guYXBwbHkocyx1KSk6aSh1KT9zdChmKT9zW2xdPWhlKGYudGV4dCt1KToiIiE9PXUmJnMucHVzaChoZSh1KSk6c3QodSkmJnN0KGYpP3NbbF09aGUoZi50ZXh0K3UudGV4dCk6KHIoby5faXNWTGlzdCkmJm4odS50YWcpJiZ0KHUua2V5KSYmbihhKSYmKHUua2V5PSJfX3ZsaXN0IithKyJfIitjKyJfXyIpLHMucHVzaCh1KSkpO3JldHVybiBzfShlKTp2b2lkIDB9ZnVuY3Rpb24gc3QoZSl7cmV0dXJuIG4oZSkmJm4oZS50ZXh0KSYmITE9PT1lLmlzQ29tbWVudH1mdW5jdGlvbiBjdChlLHQpe2lmKGUpe2Zvcih2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpLHI9b2U/UmVmbGVjdC5vd25LZXlzKGUpOk9iamVjdC5rZXlzKGUpLGk9MDtpPHIubGVuZ3RoO2krKyl7dmFyIG89cltpXTtpZigiX19vYl9fIiE9PW8pe2Zvcih2YXIgYT1lW29dLmZyb20scz10O3M7KXtpZihzLl9wcm92aWRlZCYmeShzLl9wcm92aWRlZCxhKSl7bltvXT1zLl9wcm92aWRlZFthXTticmVha31zPXMuJHBhcmVudH1pZighcyYmImRlZmF1bHQiaW4gZVtvXSl7dmFyIGM9ZVtvXS5kZWZhdWx0O25bb109ImZ1bmN0aW9uIj09dHlwZW9mIGM/Yy5jYWxsKHQpOmN9fX1yZXR1cm4gbn19ZnVuY3Rpb24gdXQoZSx0KXtpZighZXx8IWUubGVuZ3RoKXJldHVybnt9O2Zvcih2YXIgbj17fSxyPTAsaT1lLmxlbmd0aDtyPGk7cisrKXt2YXIgbz1lW3JdLGE9by5kYXRhO2lmKGEmJmEuYXR0cnMmJmEuYXR0cnMuc2xvdCYmZGVsZXRlIGEuYXR0cnMuc2xvdCxvLmNvbnRleHQhPT10JiZvLmZuQ29udGV4dCE9PXR8fCFhfHxudWxsPT1hLnNsb3QpKG4uZGVmYXVsdHx8KG4uZGVmYXVsdD1bXSkpLnB1c2gobyk7ZWxzZXt2YXIgcz1hLnNsb3QsYz1uW3NdfHwobltzXT1bXSk7InRlbXBsYXRlIj09PW8udGFnP2MucHVzaC5hcHBseShjLG8uY2hpbGRyZW58fFtdKTpjLnB1c2gobyl9fWZvcih2YXIgdSBpbiBuKW5bdV0uZXZlcnkobHQpJiZkZWxldGUgblt1XTtyZXR1cm4gbn1mdW5jdGlvbiBsdChlKXtyZXR1cm4gZS5pc0NvbW1lbnQmJiFlLmFzeW5jRmFjdG9yeXx8IiAiPT09ZS50ZXh0fWZ1bmN0aW9uIGZ0KHQsbixyKXt2YXIgaSxvPU9iamVjdC5rZXlzKG4pLmxlbmd0aD4wLGE9dD8hIXQuJHN0YWJsZTohbyxzPXQmJnQuJGtleTtpZih0KXtpZih0Ll9ub3JtYWxpemVkKXJldHVybiB0Ll9ub3JtYWxpemVkO2lmKGEmJnImJnIhPT1lJiZzPT09ci4ka2V5JiYhbyYmIXIuJGhhc05vcm1hbClyZXR1cm4gcjtmb3IodmFyIGMgaW4gaT17fSx0KXRbY10mJiIkIiE9PWNbMF0mJihpW2NdPXB0KG4sYyx0W2NdKSl9ZWxzZSBpPXt9O2Zvcih2YXIgdSBpbiBuKXUgaW4gaXx8KGlbdV09ZHQobix1KSk7cmV0dXJuIHQmJk9iamVjdC5pc0V4dGVuc2libGUodCkmJih0Ll9ub3JtYWxpemVkPWkpLFIoaSwiJHN0YWJsZSIsYSksUihpLCIka2V5IixzKSxSKGksIiRoYXNOb3JtYWwiLG8pLGl9ZnVuY3Rpb24gcHQoZSx0LG4pe3ZhciByPWZ1bmN0aW9uKCl7dmFyIGU9YXJndW1lbnRzLmxlbmd0aD9uLmFwcGx5KG51bGwsYXJndW1lbnRzKTpuKHt9KTtyZXR1cm4oZT1lJiYib2JqZWN0Ij09dHlwZW9mIGUmJiFBcnJheS5pc0FycmF5KGUpP1tlXTphdChlKSkmJigwPT09ZS5sZW5ndGh8fDE9PT1lLmxlbmd0aCYmZVswXS5pc0NvbW1lbnQpP3ZvaWQgMDplfTtyZXR1cm4gbi5wcm94eSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7Z2V0OnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KSxyfWZ1bmN0aW9uIGR0KGUsdCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGVbdF19fWZ1bmN0aW9uIHZ0KGUsdCl7dmFyIHIsaSxhLHMsYztpZihBcnJheS5pc0FycmF5KGUpfHwic3RyaW5nIj09dHlwZW9mIGUpZm9yKHI9bmV3IEFycmF5KGUubGVuZ3RoKSxpPTAsYT1lLmxlbmd0aDtpPGE7aSsrKXJbaV09dChlW2ldLGkpO2Vsc2UgaWYoIm51bWJlciI9PXR5cGVvZiBlKWZvcihyPW5ldyBBcnJheShlKSxpPTA7aTxlO2krKylyW2ldPXQoaSsxLGkpO2Vsc2UgaWYobyhlKSlpZihvZSYmZVtTeW1ib2wuaXRlcmF0b3JdKXtyPVtdO2Zvcih2YXIgdT1lW1N5bWJvbC5pdGVyYXRvcl0oKSxsPXUubmV4dCgpOyFsLmRvbmU7KXIucHVzaCh0KGwudmFsdWUsci5sZW5ndGgpKSxsPXUubmV4dCgpfWVsc2UgZm9yKHM9T2JqZWN0LmtleXMoZSkscj1uZXcgQXJyYXkocy5sZW5ndGgpLGk9MCxhPXMubGVuZ3RoO2k8YTtpKyspYz1zW2ldLHJbaV09dChlW2NdLGMsaSk7cmV0dXJuIG4ocil8fChyPVtdKSxyLl9pc1ZMaXN0PSEwLHJ9ZnVuY3Rpb24gaHQoZSx0LG4scil7dmFyIGksbz10aGlzLiRzY29wZWRTbG90c1tlXTtvPyhuPW58fHt9LHImJihuPUEoQSh7fSxyKSxuKSksaT1vKG4pfHx0KTppPXRoaXMuJHNsb3RzW2VdfHx0O3ZhciBhPW4mJm4uc2xvdDtyZXR1cm4gYT90aGlzLiRjcmVhdGVFbGVtZW50KCJ0ZW1wbGF0ZSIse3Nsb3Q6YX0saSk6aX1mdW5jdGlvbiBtdChlKXtyZXR1cm4gTGUodGhpcy4kb3B0aW9ucywiZmlsdGVycyIsZSl8fEV9ZnVuY3Rpb24geXQoZSx0KXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT8tMT09PWUuaW5kZXhPZih0KTplIT09dH1mdW5jdGlvbiBndChlLHQsbixyLGkpe3ZhciBvPUYua2V5Q29kZXNbdF18fG47cmV0dXJuIGkmJnImJiFGLmtleUNvZGVzW3RdP3l0KGkscik6bz95dChvLGUpOnI/QyhyKSE9PXQ6dm9pZCAwfWZ1bmN0aW9uIF90KGUsdCxuLHIsaSl7aWYobilpZihvKG4pKXt2YXIgYTtBcnJheS5pc0FycmF5KG4pJiYobj1PKG4pKTt2YXIgcz1mdW5jdGlvbihvKXtpZigiY2xhc3MiPT09b3x8InN0eWxlIj09PW98fHYobykpYT1lO2Vsc2V7dmFyIHM9ZS5hdHRycyYmZS5hdHRycy50eXBlO2E9cnx8Ri5tdXN0VXNlUHJvcCh0LHMsbyk/ZS5kb21Qcm9wc3x8KGUuZG9tUHJvcHM9e30pOmUuYXR0cnN8fChlLmF0dHJzPXt9KX12YXIgYz1iKG8pLHU9QyhvKTtjIGluIGF8fHUgaW4gYXx8KGFbb109bltvXSxpJiYoKGUub258fChlLm9uPXt9KSlbInVwZGF0ZToiK29dPWZ1bmN0aW9uKGUpe25bb109ZX0pKX07Zm9yKHZhciBjIGluIG4pcyhjKX1lbHNlO3JldHVybiBlfWZ1bmN0aW9uIGJ0KGUsdCl7dmFyIG49dGhpcy5fc3RhdGljVHJlZXN8fCh0aGlzLl9zdGF0aWNUcmVlcz1bXSkscj1uW2VdO3JldHVybiByJiYhdD9yOih3dChyPW5bZV09dGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbZV0uY2FsbCh0aGlzLl9yZW5kZXJQcm94eSxudWxsLHRoaXMpLCJfX3N0YXRpY19fIitlLCExKSxyKX1mdW5jdGlvbiAkdChlLHQsbil7cmV0dXJuIHd0KGUsIl9fb25jZV9fIit0KyhuPyJfIituOiIiKSwhMCksZX1mdW5jdGlvbiB3dChlLHQsbil7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIHI9MDtyPGUubGVuZ3RoO3IrKyllW3JdJiYic3RyaW5nIiE9dHlwZW9mIGVbcl0mJkN0KGVbcl0sdCsiXyIrcixuKTtlbHNlIEN0KGUsdCxuKX1mdW5jdGlvbiBDdChlLHQsbil7ZS5pc1N0YXRpYz0hMCxlLmtleT10LGUuaXNPbmNlPW59ZnVuY3Rpb24geHQoZSx0KXtpZih0KWlmKHModCkpe3ZhciBuPWUub249ZS5vbj9BKHt9LGUub24pOnt9O2Zvcih2YXIgciBpbiB0KXt2YXIgaT1uW3JdLG89dFtyXTtuW3JdPWk/W10uY29uY2F0KGksbyk6b319ZWxzZTtyZXR1cm4gZX1mdW5jdGlvbiBrdChlLHQsbixyKXt0PXR8fHskc3RhYmxlOiFufTtmb3IodmFyIGk9MDtpPGUubGVuZ3RoO2krKyl7dmFyIG89ZVtpXTtBcnJheS5pc0FycmF5KG8pP2t0KG8sdCxuKTpvJiYoby5wcm94eSYmKG8uZm4ucHJveHk9ITApLHRbby5rZXldPW8uZm4pfXJldHVybiByJiYodC4ka2V5PXIpLHR9ZnVuY3Rpb24gQXQoZSx0KXtmb3IodmFyIG49MDtuPHQubGVuZ3RoO24rPTIpe3ZhciByPXRbbl07InN0cmluZyI9PXR5cGVvZiByJiZyJiYoZVt0W25dXT10W24rMV0pfXJldHVybiBlfWZ1bmN0aW9uIE90KGUsdCl7cmV0dXJuInN0cmluZyI9PXR5cGVvZiBlP3QrZTplfWZ1bmN0aW9uIFN0KGUpe2UuX289JHQsZS5fbj1mLGUuX3M9bCxlLl9sPXZ0LGUuX3Q9aHQsZS5fcT1OLGUuX2k9aixlLl9tPWJ0LGUuX2Y9bXQsZS5faz1ndCxlLl9iPV90LGUuX3Y9aGUsZS5fZT12ZSxlLl91PWt0LGUuX2c9eHQsZS5fZD1BdCxlLl9wPU90fWZ1bmN0aW9uIFR0KHQsbixpLG8sYSl7dmFyIHMsYz10aGlzLHU9YS5vcHRpb25zO3kobywiX3VpZCIpPyhzPU9iamVjdC5jcmVhdGUobykpLl9vcmlnaW5hbD1vOihzPW8sbz1vLl9vcmlnaW5hbCk7dmFyIGw9cih1Ll9jb21waWxlZCksZj0hbDt0aGlzLmRhdGE9dCx0aGlzLnByb3BzPW4sdGhpcy5jaGlsZHJlbj1pLHRoaXMucGFyZW50PW8sdGhpcy5saXN0ZW5lcnM9dC5vbnx8ZSx0aGlzLmluamVjdGlvbnM9Y3QodS5pbmplY3QsbyksdGhpcy5zbG90cz1mdW5jdGlvbigpe3JldHVybiBjLiRzbG90c3x8ZnQodC5zY29wZWRTbG90cyxjLiRzbG90cz11dChpLG8pKSxjLiRzbG90c30sT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsInNjb3BlZFNsb3RzIix7ZW51bWVyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZnQodC5zY29wZWRTbG90cyx0aGlzLnNsb3RzKCkpfX0pLGwmJih0aGlzLiRvcHRpb25zPXUsdGhpcy4kc2xvdHM9dGhpcy5zbG90cygpLHRoaXMuJHNjb3BlZFNsb3RzPWZ0KHQuc2NvcGVkU2xvdHMsdGhpcy4kc2xvdHMpKSx1Ll9zY29wZUlkP3RoaXMuX2M9ZnVuY3Rpb24oZSx0LG4scil7dmFyIGk9UHQocyxlLHQsbixyLGYpO3JldHVybiBpJiYhQXJyYXkuaXNBcnJheShpKSYmKGkuZm5TY29wZUlkPXUuX3Njb3BlSWQsaS5mbkNvbnRleHQ9byksaX06dGhpcy5fYz1mdW5jdGlvbihlLHQsbixyKXtyZXR1cm4gUHQocyxlLHQsbixyLGYpfX1mdW5jdGlvbiBFdChlLHQsbixyLGkpe3ZhciBvPW1lKGUpO3JldHVybiBvLmZuQ29udGV4dD1uLG8uZm5PcHRpb25zPXIsdC5zbG90JiYoKG8uZGF0YXx8KG8uZGF0YT17fSkpLnNsb3Q9dC5zbG90KSxvfWZ1bmN0aW9uIE50KGUsdCl7Zm9yKHZhciBuIGluIHQpZVtiKG4pXT10W25dfVN0KFR0LnByb3RvdHlwZSk7dmFyIGp0PXtpbml0OmZ1bmN0aW9uKGUsdCl7aWYoZS5jb21wb25lbnRJbnN0YW5jZSYmIWUuY29tcG9uZW50SW5zdGFuY2UuX2lzRGVzdHJveWVkJiZlLmRhdGEua2VlcEFsaXZlKXt2YXIgcj1lO2p0LnByZXBhdGNoKHIscil9ZWxzZXsoZS5jb21wb25lbnRJbnN0YW5jZT1mdW5jdGlvbihlLHQpe3ZhciByPXtfaXNDb21wb25lbnQ6ITAsX3BhcmVudFZub2RlOmUscGFyZW50OnR9LGk9ZS5kYXRhLmlubGluZVRlbXBsYXRlO24oaSkmJihyLnJlbmRlcj1pLnJlbmRlcixyLnN0YXRpY1JlbmRlckZucz1pLnN0YXRpY1JlbmRlckZucyk7cmV0dXJuIG5ldyBlLmNvbXBvbmVudE9wdGlvbnMuQ3RvcihyKX0oZSxXdCkpLiRtb3VudCh0P2UuZWxtOnZvaWQgMCx0KX19LHByZXBhdGNoOmZ1bmN0aW9uKHQsbil7dmFyIHI9bi5jb21wb25lbnRPcHRpb25zOyFmdW5jdGlvbih0LG4scixpLG8pe3ZhciBhPWkuZGF0YS5zY29wZWRTbG90cyxzPXQuJHNjb3BlZFNsb3RzLGM9ISEoYSYmIWEuJHN0YWJsZXx8cyE9PWUmJiFzLiRzdGFibGV8fGEmJnQuJHNjb3BlZFNsb3RzLiRrZXkhPT1hLiRrZXkpLHU9ISEob3x8dC4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW58fGMpO3QuJG9wdGlvbnMuX3BhcmVudFZub2RlPWksdC4kdm5vZGU9aSx0Ll92bm9kZSYmKHQuX3Zub2RlLnBhcmVudD1pKTtpZih0LiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbj1vLHQuJGF0dHJzPWkuZGF0YS5hdHRyc3x8ZSx0LiRsaXN0ZW5lcnM9cnx8ZSxuJiZ0LiRvcHRpb25zLnByb3BzKXskZSghMSk7Zm9yKHZhciBsPXQuX3Byb3BzLGY9dC4kb3B0aW9ucy5fcHJvcEtleXN8fFtdLHA9MDtwPGYubGVuZ3RoO3ArKyl7dmFyIGQ9ZltwXSx2PXQuJG9wdGlvbnMucHJvcHM7bFtkXT1NZShkLHYsbix0KX0kZSghMCksdC4kb3B0aW9ucy5wcm9wc0RhdGE9bn1yPXJ8fGU7dmFyIGg9dC4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO3QuJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycz1yLHF0KHQscixoKSx1JiYodC4kc2xvdHM9dXQobyxpLmNvbnRleHQpLHQuJGZvcmNlVXBkYXRlKCkpfShuLmNvbXBvbmVudEluc3RhbmNlPXQuY29tcG9uZW50SW5zdGFuY2Usci5wcm9wc0RhdGEsci5saXN0ZW5lcnMsbixyLmNoaWxkcmVuKX0saW5zZXJ0OmZ1bmN0aW9uKGUpe3ZhciB0LG49ZS5jb250ZXh0LHI9ZS5jb21wb25lbnRJbnN0YW5jZTtyLl9pc01vdW50ZWR8fChyLl9pc01vdW50ZWQ9ITAsWXQociwibW91bnRlZCIpKSxlLmRhdGEua2VlcEFsaXZlJiYobi5faXNNb3VudGVkPygodD1yKS5faW5hY3RpdmU9ITEsZW4ucHVzaCh0KSk6WHQociwhMCkpfSxkZXN0cm95OmZ1bmN0aW9uKGUpe3ZhciB0PWUuY29tcG9uZW50SW5zdGFuY2U7dC5faXNEZXN0cm95ZWR8fChlLmRhdGEua2VlcEFsaXZlP2Z1bmN0aW9uIGUodCxuKXtpZihuJiYodC5fZGlyZWN0SW5hY3RpdmU9ITAsR3QodCkpKXJldHVybjtpZighdC5faW5hY3RpdmUpe3QuX2luYWN0aXZlPSEwO2Zvcih2YXIgcj0wO3I8dC4kY2hpbGRyZW4ubGVuZ3RoO3IrKyllKHQuJGNoaWxkcmVuW3JdKTtZdCh0LCJkZWFjdGl2YXRlZCIpfX0odCwhMCk6dC4kZGVzdHJveSgpKX19LER0PU9iamVjdC5rZXlzKGp0KTtmdW5jdGlvbiBMdChpLGEscyxjLGwpe2lmKCF0KGkpKXt2YXIgZj1zLiRvcHRpb25zLl9iYXNlO2lmKG8oaSkmJihpPWYuZXh0ZW5kKGkpKSwiZnVuY3Rpb24iPT10eXBlb2YgaSl7dmFyIHA7aWYodChpLmNpZCkmJnZvaWQgMD09PShpPWZ1bmN0aW9uKGUsaSl7aWYocihlLmVycm9yKSYmbihlLmVycm9yQ29tcCkpcmV0dXJuIGUuZXJyb3JDb21wO2lmKG4oZS5yZXNvbHZlZCkpcmV0dXJuIGUucmVzb2x2ZWQ7dmFyIGE9SHQ7YSYmbihlLm93bmVycykmJi0xPT09ZS5vd25lcnMuaW5kZXhPZihhKSYmZS5vd25lcnMucHVzaChhKTtpZihyKGUubG9hZGluZykmJm4oZS5sb2FkaW5nQ29tcCkpcmV0dXJuIGUubG9hZGluZ0NvbXA7aWYoYSYmIW4oZS5vd25lcnMpKXt2YXIgcz1lLm93bmVycz1bYV0sYz0hMCxsPW51bGwsZj1udWxsO2EuJG9uKCJob29rOmRlc3Ryb3llZCIsZnVuY3Rpb24oKXtyZXR1cm4gaChzLGEpfSk7dmFyIHA9ZnVuY3Rpb24oZSl7Zm9yKHZhciB0PTAsbj1zLmxlbmd0aDt0PG47dCsrKXNbdF0uJGZvcmNlVXBkYXRlKCk7ZSYmKHMubGVuZ3RoPTAsbnVsbCE9PWwmJihjbGVhclRpbWVvdXQobCksbD1udWxsKSxudWxsIT09ZiYmKGNsZWFyVGltZW91dChmKSxmPW51bGwpKX0sZD1EKGZ1bmN0aW9uKHQpe2UucmVzb2x2ZWQ9QnQodCxpKSxjP3MubGVuZ3RoPTA6cCghMCl9KSx2PUQoZnVuY3Rpb24odCl7bihlLmVycm9yQ29tcCkmJihlLmVycm9yPSEwLHAoITApKX0pLG09ZShkLHYpO3JldHVybiBvKG0pJiYodShtKT90KGUucmVzb2x2ZWQpJiZtLnRoZW4oZCx2KTp1KG0uY29tcG9uZW50KSYmKG0uY29tcG9uZW50LnRoZW4oZCx2KSxuKG0uZXJyb3IpJiYoZS5lcnJvckNvbXA9QnQobS5lcnJvcixpKSksbihtLmxvYWRpbmcpJiYoZS5sb2FkaW5nQ29tcD1CdChtLmxvYWRpbmcsaSksMD09PW0uZGVsYXk/ZS5sb2FkaW5nPSEwOmw9c2V0VGltZW91dChmdW5jdGlvbigpe2w9bnVsbCx0KGUucmVzb2x2ZWQpJiZ0KGUuZXJyb3IpJiYoZS5sb2FkaW5nPSEwLHAoITEpKX0sbS5kZWxheXx8MjAwKSksbihtLnRpbWVvdXQpJiYoZj1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Zj1udWxsLHQoZS5yZXNvbHZlZCkmJnYobnVsbCl9LG0udGltZW91dCkpKSksYz0hMSxlLmxvYWRpbmc/ZS5sb2FkaW5nQ29tcDplLnJlc29sdmVkfX0ocD1pLGYpKSlyZXR1cm4gZnVuY3Rpb24oZSx0LG4scixpKXt2YXIgbz12ZSgpO3JldHVybiBvLmFzeW5jRmFjdG9yeT1lLG8uYXN5bmNNZXRhPXtkYXRhOnQsY29udGV4dDpuLGNoaWxkcmVuOnIsdGFnOml9LG99KHAsYSxzLGMsbCk7YT1hfHx7fSwkbihpKSxuKGEubW9kZWwpJiZmdW5jdGlvbihlLHQpe3ZhciByPWUubW9kZWwmJmUubW9kZWwucHJvcHx8InZhbHVlIixpPWUubW9kZWwmJmUubW9kZWwuZXZlbnR8fCJpbnB1dCI7KHQuYXR0cnN8fCh0LmF0dHJzPXt9KSlbcl09dC5tb2RlbC52YWx1ZTt2YXIgbz10Lm9ufHwodC5vbj17fSksYT1vW2ldLHM9dC5tb2RlbC5jYWxsYmFjaztuKGEpPyhBcnJheS5pc0FycmF5KGEpPy0xPT09YS5pbmRleE9mKHMpOmEhPT1zKSYmKG9baV09W3NdLmNvbmNhdChhKSk6b1tpXT1zfShpLm9wdGlvbnMsYSk7dmFyIGQ9ZnVuY3Rpb24oZSxyLGkpe3ZhciBvPXIub3B0aW9ucy5wcm9wcztpZighdChvKSl7dmFyIGE9e30scz1lLmF0dHJzLGM9ZS5wcm9wcztpZihuKHMpfHxuKGMpKWZvcih2YXIgdSBpbiBvKXt2YXIgbD1DKHUpO290KGEsYyx1LGwsITApfHxvdChhLHMsdSxsLCExKX1yZXR1cm4gYX19KGEsaSk7aWYocihpLm9wdGlvbnMuZnVuY3Rpb25hbCkpcmV0dXJuIGZ1bmN0aW9uKHQscixpLG8sYSl7dmFyIHM9dC5vcHRpb25zLGM9e30sdT1zLnByb3BzO2lmKG4odSkpZm9yKHZhciBsIGluIHUpY1tsXT1NZShsLHUscnx8ZSk7ZWxzZSBuKGkuYXR0cnMpJiZOdChjLGkuYXR0cnMpLG4oaS5wcm9wcykmJk50KGMsaS5wcm9wcyk7dmFyIGY9bmV3IFR0KGksYyxhLG8sdCkscD1zLnJlbmRlci5jYWxsKG51bGwsZi5fYyxmKTtpZihwIGluc3RhbmNlb2YgcGUpcmV0dXJuIEV0KHAsaSxmLnBhcmVudCxzKTtpZihBcnJheS5pc0FycmF5KHApKXtmb3IodmFyIGQ9YXQocCl8fFtdLHY9bmV3IEFycmF5KGQubGVuZ3RoKSxoPTA7aDxkLmxlbmd0aDtoKyspdltoXT1FdChkW2hdLGksZi5wYXJlbnQscyk7cmV0dXJuIHZ9fShpLGQsYSxzLGMpO3ZhciB2PWEub247aWYoYS5vbj1hLm5hdGl2ZU9uLHIoaS5vcHRpb25zLmFic3RyYWN0KSl7dmFyIG09YS5zbG90O2E9e30sbSYmKGEuc2xvdD1tKX0hZnVuY3Rpb24oZSl7Zm9yKHZhciB0PWUuaG9va3x8KGUuaG9vaz17fSksbj0wO248RHQubGVuZ3RoO24rKyl7dmFyIHI9RHRbbl0saT10W3JdLG89anRbcl07aT09PW98fGkmJmkuX21lcmdlZHx8KHRbcl09aT9NdChvLGkpOm8pfX0oYSk7dmFyIHk9aS5vcHRpb25zLm5hbWV8fGw7cmV0dXJuIG5ldyBwZSgidnVlLWNvbXBvbmVudC0iK2kuY2lkKyh5PyItIit5OiIiKSxhLHZvaWQgMCx2b2lkIDAsdm9pZCAwLHMse0N0b3I6aSxwcm9wc0RhdGE6ZCxsaXN0ZW5lcnM6dix0YWc6bCxjaGlsZHJlbjpjfSxwKX19fWZ1bmN0aW9uIE10KGUsdCl7dmFyIG49ZnVuY3Rpb24obixyKXtlKG4sciksdChuLHIpfTtyZXR1cm4gbi5fbWVyZ2VkPSEwLG59dmFyIEl0PTEsRnQ9MjtmdW5jdGlvbiBQdChlLGEscyxjLHUsbCl7cmV0dXJuKEFycmF5LmlzQXJyYXkocyl8fGkocykpJiYodT1jLGM9cyxzPXZvaWQgMCkscihsKSYmKHU9RnQpLGZ1bmN0aW9uKGUsaSxhLHMsYyl7aWYobihhKSYmbihhLl9fb2JfXykpcmV0dXJuIHZlKCk7bihhKSYmbihhLmlzKSYmKGk9YS5pcyk7aWYoIWkpcmV0dXJuIHZlKCk7QXJyYXkuaXNBcnJheShzKSYmImZ1bmN0aW9uIj09dHlwZW9mIHNbMF0mJigoYT1hfHx7fSkuc2NvcGVkU2xvdHM9e2RlZmF1bHQ6c1swXX0scy5sZW5ndGg9MCk7Yz09PUZ0P3M9YXQocyk6Yz09PUl0JiYocz1mdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKylpZihBcnJheS5pc0FycmF5KGVbdF0pKXJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLGUpO3JldHVybiBlfShzKSk7dmFyIHUsbDtpZigic3RyaW5nIj09dHlwZW9mIGkpe3ZhciBmO2w9ZS4kdm5vZGUmJmUuJHZub2RlLm5zfHxGLmdldFRhZ05hbWVzcGFjZShpKSx1PUYuaXNSZXNlcnZlZFRhZyhpKT9uZXcgcGUoRi5wYXJzZVBsYXRmb3JtVGFnTmFtZShpKSxhLHMsdm9pZCAwLHZvaWQgMCxlKTphJiZhLnByZXx8IW4oZj1MZShlLiRvcHRpb25zLCJjb21wb25lbnRzIixpKSk/bmV3IHBlKGksYSxzLHZvaWQgMCx2b2lkIDAsZSk6THQoZixhLGUscyxpKX1lbHNlIHU9THQoaSxhLGUscyk7cmV0dXJuIEFycmF5LmlzQXJyYXkodSk/dTpuKHUpPyhuKGwpJiZmdW5jdGlvbiBlKGksbyxhKXtpLm5zPW87ImZvcmVpZ25PYmplY3QiPT09aS50YWcmJihvPXZvaWQgMCxhPSEwKTtpZihuKGkuY2hpbGRyZW4pKWZvcih2YXIgcz0wLGM9aS5jaGlsZHJlbi5sZW5ndGg7czxjO3MrKyl7dmFyIHU9aS5jaGlsZHJlbltzXTtuKHUudGFnKSYmKHQodS5ucyl8fHIoYSkmJiJzdmciIT09dS50YWcpJiZlKHUsbyxhKX19KHUsbCksbihhKSYmZnVuY3Rpb24oZSl7byhlLnN0eWxlKSYmZXQoZS5zdHlsZSk7byhlLmNsYXNzKSYmZXQoZS5jbGFzcyl9KGEpLHUpOnZlKCl9KGUsYSxzLGMsdSl9dmFyIFJ0LEh0PW51bGw7ZnVuY3Rpb24gQnQoZSx0KXtyZXR1cm4oZS5fX2VzTW9kdWxlfHxvZSYmIk1vZHVsZSI9PT1lW1N5bWJvbC50b1N0cmluZ1RhZ10pJiYoZT1lLmRlZmF1bHQpLG8oZSk/dC5leHRlbmQoZSk6ZX1mdW5jdGlvbiBVdChlKXtyZXR1cm4gZS5pc0NvbW1lbnQmJmUuYXN5bmNGYWN0b3J5fWZ1bmN0aW9uIHp0KGUpe2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKHZhciB0PTA7dDxlLmxlbmd0aDt0Kyspe3ZhciByPWVbdF07aWYobihyKSYmKG4oci5jb21wb25lbnRPcHRpb25zKXx8VXQocikpKXJldHVybiByfX1mdW5jdGlvbiBWdChlLHQpe1J0LiRvbihlLHQpfWZ1bmN0aW9uIEt0KGUsdCl7UnQuJG9mZihlLHQpfWZ1bmN0aW9uIEp0KGUsdCl7dmFyIG49UnQ7cmV0dXJuIGZ1bmN0aW9uIHIoKXtudWxsIT09dC5hcHBseShudWxsLGFyZ3VtZW50cykmJm4uJG9mZihlLHIpfX1mdW5jdGlvbiBxdChlLHQsbil7UnQ9ZSxydCh0LG58fHt9LFZ0LEt0LEp0LGUpLFJ0PXZvaWQgMH12YXIgV3Q9bnVsbDtmdW5jdGlvbiBadChlKXt2YXIgdD1XdDtyZXR1cm4gV3Q9ZSxmdW5jdGlvbigpe1d0PXR9fWZ1bmN0aW9uIEd0KGUpe2Zvcig7ZSYmKGU9ZS4kcGFyZW50KTspaWYoZS5faW5hY3RpdmUpcmV0dXJuITA7cmV0dXJuITF9ZnVuY3Rpb24gWHQoZSx0KXtpZih0KXtpZihlLl9kaXJlY3RJbmFjdGl2ZT0hMSxHdChlKSlyZXR1cm59ZWxzZSBpZihlLl9kaXJlY3RJbmFjdGl2ZSlyZXR1cm47aWYoZS5faW5hY3RpdmV8fG51bGw9PT1lLl9pbmFjdGl2ZSl7ZS5faW5hY3RpdmU9ITE7Zm9yKHZhciBuPTA7bjxlLiRjaGlsZHJlbi5sZW5ndGg7bisrKVh0KGUuJGNoaWxkcmVuW25dKTtZdChlLCJhY3RpdmF0ZWQiKX19ZnVuY3Rpb24gWXQoZSx0KXtsZSgpO3ZhciBuPWUuJG9wdGlvbnNbdF0scj10KyIgaG9vayI7aWYobilmb3IodmFyIGk9MCxvPW4ubGVuZ3RoO2k8bztpKyspSGUobltpXSxlLG51bGwsZSxyKTtlLl9oYXNIb29rRXZlbnQmJmUuJGVtaXQoImhvb2s6Iit0KSxmZSgpfXZhciBRdD1bXSxlbj1bXSx0bj17fSxubj0hMSxybj0hMSxvbj0wO3ZhciBhbj0wLHNuPURhdGUubm93O2lmKHomJiFxKXt2YXIgY249d2luZG93LnBlcmZvcm1hbmNlO2NuJiYiZnVuY3Rpb24iPT10eXBlb2YgY24ubm93JiZzbigpPmRvY3VtZW50LmNyZWF0ZUV2ZW50KCJFdmVudCIpLnRpbWVTdGFtcCYmKHNuPWZ1bmN0aW9uKCl7cmV0dXJuIGNuLm5vdygpfSl9ZnVuY3Rpb24gdW4oKXt2YXIgZSx0O2Zvcihhbj1zbigpLHJuPSEwLFF0LnNvcnQoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZS5pZC10LmlkfSksb249MDtvbjxRdC5sZW5ndGg7b24rKykoZT1RdFtvbl0pLmJlZm9yZSYmZS5iZWZvcmUoKSx0PWUuaWQsdG5bdF09bnVsbCxlLnJ1bigpO3ZhciBuPWVuLnNsaWNlKCkscj1RdC5zbGljZSgpO29uPVF0Lmxlbmd0aD1lbi5sZW5ndGg9MCx0bj17fSxubj1ybj0hMSxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MDt0PGUubGVuZ3RoO3QrKyllW3RdLl9pbmFjdGl2ZT0hMCxYdChlW3RdLCEwKX0obiksZnVuY3Rpb24oZSl7dmFyIHQ9ZS5sZW5ndGg7Zm9yKDt0LS07KXt2YXIgbj1lW3RdLHI9bi52bTtyLl93YXRjaGVyPT09biYmci5faXNNb3VudGVkJiYhci5faXNEZXN0cm95ZWQmJll0KHIsInVwZGF0ZWQiKX19KHIpLG5lJiZGLmRldnRvb2xzJiZuZS5lbWl0KCJmbHVzaCIpfXZhciBsbj0wLGZuPWZ1bmN0aW9uKGUsdCxuLHIsaSl7dGhpcy52bT1lLGkmJihlLl93YXRjaGVyPXRoaXMpLGUuX3dhdGNoZXJzLnB1c2godGhpcykscj8odGhpcy5kZWVwPSEhci5kZWVwLHRoaXMudXNlcj0hIXIudXNlcix0aGlzLmxhenk9ISFyLmxhenksdGhpcy5zeW5jPSEhci5zeW5jLHRoaXMuYmVmb3JlPXIuYmVmb3JlKTp0aGlzLmRlZXA9dGhpcy51c2VyPXRoaXMubGF6eT10aGlzLnN5bmM9ITEsdGhpcy5jYj1uLHRoaXMuaWQ9Kytsbix0aGlzLmFjdGl2ZT0hMCx0aGlzLmRpcnR5PXRoaXMubGF6eSx0aGlzLmRlcHM9W10sdGhpcy5uZXdEZXBzPVtdLHRoaXMuZGVwSWRzPW5ldyBpZSx0aGlzLm5ld0RlcElkcz1uZXcgaWUsdGhpcy5leHByZXNzaW9uPSIiLCJmdW5jdGlvbiI9PXR5cGVvZiB0P3RoaXMuZ2V0dGVyPXQ6KHRoaXMuZ2V0dGVyPWZ1bmN0aW9uKGUpe2lmKCFILnRlc3QoZSkpe3ZhciB0PWUuc3BsaXQoIi4iKTtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciBuPTA7bjx0Lmxlbmd0aDtuKyspe2lmKCFlKXJldHVybjtlPWVbdFtuXV19cmV0dXJuIGV9fX0odCksdGhpcy5nZXR0ZXJ8fCh0aGlzLmdldHRlcj1TKSksdGhpcy52YWx1ZT10aGlzLmxhenk/dm9pZCAwOnRoaXMuZ2V0KCl9O2ZuLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oKXt2YXIgZTtsZSh0aGlzKTt2YXIgdD10aGlzLnZtO3RyeXtlPXRoaXMuZ2V0dGVyLmNhbGwodCx0KX1jYXRjaChlKXtpZighdGhpcy51c2VyKXRocm93IGU7UmUoZSx0LCdnZXR0ZXIgZm9yIHdhdGNoZXIgIicrdGhpcy5leHByZXNzaW9uKyciJyl9ZmluYWxseXt0aGlzLmRlZXAmJmV0KGUpLGZlKCksdGhpcy5jbGVhbnVwRGVwcygpfXJldHVybiBlfSxmbi5wcm90b3R5cGUuYWRkRGVwPWZ1bmN0aW9uKGUpe3ZhciB0PWUuaWQ7dGhpcy5uZXdEZXBJZHMuaGFzKHQpfHwodGhpcy5uZXdEZXBJZHMuYWRkKHQpLHRoaXMubmV3RGVwcy5wdXNoKGUpLHRoaXMuZGVwSWRzLmhhcyh0KXx8ZS5hZGRTdWIodGhpcykpfSxmbi5wcm90b3R5cGUuY2xlYW51cERlcHM9ZnVuY3Rpb24oKXtmb3IodmFyIGU9dGhpcy5kZXBzLmxlbmd0aDtlLS07KXt2YXIgdD10aGlzLmRlcHNbZV07dGhpcy5uZXdEZXBJZHMuaGFzKHQuaWQpfHx0LnJlbW92ZVN1Yih0aGlzKX12YXIgbj10aGlzLmRlcElkczt0aGlzLmRlcElkcz10aGlzLm5ld0RlcElkcyx0aGlzLm5ld0RlcElkcz1uLHRoaXMubmV3RGVwSWRzLmNsZWFyKCksbj10aGlzLmRlcHMsdGhpcy5kZXBzPXRoaXMubmV3RGVwcyx0aGlzLm5ld0RlcHM9bix0aGlzLm5ld0RlcHMubGVuZ3RoPTB9LGZuLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt0aGlzLmxhenk/dGhpcy5kaXJ0eT0hMDp0aGlzLnN5bmM/dGhpcy5ydW4oKTpmdW5jdGlvbihlKXt2YXIgdD1lLmlkO2lmKG51bGw9PXRuW3RdKXtpZih0blt0XT0hMCxybil7Zm9yKHZhciBuPVF0Lmxlbmd0aC0xO24+b24mJlF0W25dLmlkPmUuaWQ7KW4tLTtRdC5zcGxpY2UobisxLDAsZSl9ZWxzZSBRdC5wdXNoKGUpO25ufHwobm49ITAsWWUodW4pKX19KHRoaXMpfSxmbi5wcm90b3R5cGUucnVuPWZ1bmN0aW9uKCl7aWYodGhpcy5hY3RpdmUpe3ZhciBlPXRoaXMuZ2V0KCk7aWYoZSE9PXRoaXMudmFsdWV8fG8oZSl8fHRoaXMuZGVlcCl7dmFyIHQ9dGhpcy52YWx1ZTtpZih0aGlzLnZhbHVlPWUsdGhpcy51c2VyKXRyeXt0aGlzLmNiLmNhbGwodGhpcy52bSxlLHQpfWNhdGNoKGUpe1JlKGUsdGhpcy52bSwnY2FsbGJhY2sgZm9yIHdhdGNoZXIgIicrdGhpcy5leHByZXNzaW9uKyciJyl9ZWxzZSB0aGlzLmNiLmNhbGwodGhpcy52bSxlLHQpfX19LGZuLnByb3RvdHlwZS5ldmFsdWF0ZT1mdW5jdGlvbigpe3RoaXMudmFsdWU9dGhpcy5nZXQoKSx0aGlzLmRpcnR5PSExfSxmbi5wcm90b3R5cGUuZGVwZW5kPWZ1bmN0aW9uKCl7Zm9yKHZhciBlPXRoaXMuZGVwcy5sZW5ndGg7ZS0tOyl0aGlzLmRlcHNbZV0uZGVwZW5kKCl9LGZuLnByb3RvdHlwZS50ZWFyZG93bj1mdW5jdGlvbigpe2lmKHRoaXMuYWN0aXZlKXt0aGlzLnZtLl9pc0JlaW5nRGVzdHJveWVkfHxoKHRoaXMudm0uX3dhdGNoZXJzLHRoaXMpO2Zvcih2YXIgZT10aGlzLmRlcHMubGVuZ3RoO2UtLTspdGhpcy5kZXBzW2VdLnJlbW92ZVN1Yih0aGlzKTt0aGlzLmFjdGl2ZT0hMX19O3ZhciBwbj17ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OlMsc2V0OlN9O2Z1bmN0aW9uIGRuKGUsdCxuKXtwbi5nZXQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpc1t0XVtuXX0scG4uc2V0PWZ1bmN0aW9uKGUpe3RoaXNbdF1bbl09ZX0sT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsbixwbil9ZnVuY3Rpb24gdm4oZSl7ZS5fd2F0Y2hlcnM9W107dmFyIHQ9ZS4kb3B0aW9uczt0LnByb3BzJiZmdW5jdGlvbihlLHQpe3ZhciBuPWUuJG9wdGlvbnMucHJvcHNEYXRhfHx7fSxyPWUuX3Byb3BzPXt9LGk9ZS4kb3B0aW9ucy5fcHJvcEtleXM9W107ZS4kcGFyZW50JiYkZSghMSk7dmFyIG89ZnVuY3Rpb24obyl7aS5wdXNoKG8pO3ZhciBhPU1lKG8sdCxuLGUpO3hlKHIsbyxhKSxvIGluIGV8fGRuKGUsIl9wcm9wcyIsbyl9O2Zvcih2YXIgYSBpbiB0KW8oYSk7JGUoITApfShlLHQucHJvcHMpLHQubWV0aG9kcyYmZnVuY3Rpb24oZSx0KXtlLiRvcHRpb25zLnByb3BzO2Zvcih2YXIgbiBpbiB0KWVbbl09ImZ1bmN0aW9uIiE9dHlwZW9mIHRbbl0/Uzp4KHRbbl0sZSl9KGUsdC5tZXRob2RzKSx0LmRhdGE/ZnVuY3Rpb24oZSl7dmFyIHQ9ZS4kb3B0aW9ucy5kYXRhO3ModD1lLl9kYXRhPSJmdW5jdGlvbiI9PXR5cGVvZiB0P2Z1bmN0aW9uKGUsdCl7bGUoKTt0cnl7cmV0dXJuIGUuY2FsbCh0LHQpfWNhdGNoKGUpe3JldHVybiBSZShlLHQsImRhdGEoKSIpLHt9fWZpbmFsbHl7ZmUoKX19KHQsZSk6dHx8e30pfHwodD17fSk7dmFyIG49T2JqZWN0LmtleXModCkscj1lLiRvcHRpb25zLnByb3BzLGk9KGUuJG9wdGlvbnMubWV0aG9kcyxuLmxlbmd0aCk7Zm9yKDtpLS07KXt2YXIgbz1uW2ldO3ImJnkocixvKXx8KGE9dm9pZCAwLDM2IT09KGE9KG8rIiIpLmNoYXJDb2RlQXQoMCkpJiY5NSE9PWEmJmRuKGUsIl9kYXRhIixvKSl9dmFyIGE7Q2UodCwhMCl9KGUpOkNlKGUuX2RhdGE9e30sITApLHQuY29tcHV0ZWQmJmZ1bmN0aW9uKGUsdCl7dmFyIG49ZS5fY29tcHV0ZWRXYXRjaGVycz1PYmplY3QuY3JlYXRlKG51bGwpLHI9dGUoKTtmb3IodmFyIGkgaW4gdCl7dmFyIG89dFtpXSxhPSJmdW5jdGlvbiI9PXR5cGVvZiBvP286by5nZXQ7cnx8KG5baV09bmV3IGZuKGUsYXx8UyxTLGhuKSksaSBpbiBlfHxtbihlLGksbyl9fShlLHQuY29tcHV0ZWQpLHQud2F0Y2gmJnQud2F0Y2ghPT1ZJiZmdW5jdGlvbihlLHQpe2Zvcih2YXIgbiBpbiB0KXt2YXIgcj10W25dO2lmKEFycmF5LmlzQXJyYXkocikpZm9yKHZhciBpPTA7aTxyLmxlbmd0aDtpKyspX24oZSxuLHJbaV0pO2Vsc2UgX24oZSxuLHIpfX0oZSx0LndhdGNoKX12YXIgaG49e2xhenk6ITB9O2Z1bmN0aW9uIG1uKGUsdCxuKXt2YXIgcj0hdGUoKTsiZnVuY3Rpb24iPT10eXBlb2Ygbj8ocG4uZ2V0PXI/eW4odCk6Z24obikscG4uc2V0PVMpOihwbi5nZXQ9bi5nZXQ/ciYmITEhPT1uLmNhY2hlP3luKHQpOmduKG4uZ2V0KTpTLHBuLnNldD1uLnNldHx8UyksT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCxwbil9ZnVuY3Rpb24geW4oZSl7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fY29tcHV0ZWRXYXRjaGVycyYmdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1tlXTtpZih0KXJldHVybiB0LmRpcnR5JiZ0LmV2YWx1YXRlKCksY2UudGFyZ2V0JiZ0LmRlcGVuZCgpLHQudmFsdWV9fWZ1bmN0aW9uIGduKGUpe3JldHVybiBmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyx0aGlzKX19ZnVuY3Rpb24gX24oZSx0LG4scil7cmV0dXJuIHMobikmJihyPW4sbj1uLmhhbmRsZXIpLCJzdHJpbmciPT10eXBlb2YgbiYmKG49ZVtuXSksZS4kd2F0Y2godCxuLHIpfXZhciBibj0wO2Z1bmN0aW9uICRuKGUpe3ZhciB0PWUub3B0aW9ucztpZihlLnN1cGVyKXt2YXIgbj0kbihlLnN1cGVyKTtpZihuIT09ZS5zdXBlck9wdGlvbnMpe2Uuc3VwZXJPcHRpb25zPW47dmFyIHI9ZnVuY3Rpb24oZSl7dmFyIHQsbj1lLm9wdGlvbnMscj1lLnNlYWxlZE9wdGlvbnM7Zm9yKHZhciBpIGluIG4pbltpXSE9PXJbaV0mJih0fHwodD17fSksdFtpXT1uW2ldKTtyZXR1cm4gdH0oZSk7ciYmQShlLmV4dGVuZE9wdGlvbnMsciksKHQ9ZS5vcHRpb25zPURlKG4sZS5leHRlbmRPcHRpb25zKSkubmFtZSYmKHQuY29tcG9uZW50c1t0Lm5hbWVdPWUpfX1yZXR1cm4gdH1mdW5jdGlvbiB3bihlKXt0aGlzLl9pbml0KGUpfWZ1bmN0aW9uIENuKGUpe2UuY2lkPTA7dmFyIHQ9MTtlLmV4dGVuZD1mdW5jdGlvbihlKXtlPWV8fHt9O3ZhciBuPXRoaXMscj1uLmNpZCxpPWUuX0N0b3J8fChlLl9DdG9yPXt9KTtpZihpW3JdKXJldHVybiBpW3JdO3ZhciBvPWUubmFtZXx8bi5vcHRpb25zLm5hbWUsYT1mdW5jdGlvbihlKXt0aGlzLl9pbml0KGUpfTtyZXR1cm4oYS5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShuLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yPWEsYS5jaWQ9dCsrLGEub3B0aW9ucz1EZShuLm9wdGlvbnMsZSksYS5zdXBlcj1uLGEub3B0aW9ucy5wcm9wcyYmZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vcHRpb25zLnByb3BzO2Zvcih2YXIgbiBpbiB0KWRuKGUucHJvdG90eXBlLCJfcHJvcHMiLG4pfShhKSxhLm9wdGlvbnMuY29tcHV0ZWQmJmZ1bmN0aW9uKGUpe3ZhciB0PWUub3B0aW9ucy5jb21wdXRlZDtmb3IodmFyIG4gaW4gdCltbihlLnByb3RvdHlwZSxuLHRbbl0pfShhKSxhLmV4dGVuZD1uLmV4dGVuZCxhLm1peGluPW4ubWl4aW4sYS51c2U9bi51c2UsTS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2FbZV09bltlXX0pLG8mJihhLm9wdGlvbnMuY29tcG9uZW50c1tvXT1hKSxhLnN1cGVyT3B0aW9ucz1uLm9wdGlvbnMsYS5leHRlbmRPcHRpb25zPWUsYS5zZWFsZWRPcHRpb25zPUEoe30sYS5vcHRpb25zKSxpW3JdPWEsYX19ZnVuY3Rpb24geG4oZSl7cmV0dXJuIGUmJihlLkN0b3Iub3B0aW9ucy5uYW1lfHxlLnRhZyl9ZnVuY3Rpb24ga24oZSx0KXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9lLmluZGV4T2YodCk+LTE6InN0cmluZyI9PXR5cGVvZiBlP2Uuc3BsaXQoIiwiKS5pbmRleE9mKHQpPi0xOihuPWUsIltvYmplY3QgUmVnRXhwXSI9PT1hLmNhbGwobikmJmUudGVzdCh0KSk7dmFyIG59ZnVuY3Rpb24gQW4oZSx0KXt2YXIgbj1lLmNhY2hlLHI9ZS5rZXlzLGk9ZS5fdm5vZGU7Zm9yKHZhciBvIGluIG4pe3ZhciBhPW5bb107aWYoYSl7dmFyIHM9eG4oYS5jb21wb25lbnRPcHRpb25zKTtzJiYhdChzKSYmT24obixvLHIsaSl9fX1mdW5jdGlvbiBPbihlLHQsbixyKXt2YXIgaT1lW3RdOyFpfHxyJiZpLnRhZz09PXIudGFnfHxpLmNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCksZVt0XT1udWxsLGgobix0KX0hZnVuY3Rpb24odCl7dC5wcm90b3R5cGUuX2luaXQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpcztuLl91aWQ9Ym4rKyxuLl9pc1Z1ZT0hMCx0JiZ0Ll9pc0NvbXBvbmVudD9mdW5jdGlvbihlLHQpe3ZhciBuPWUuJG9wdGlvbnM9T2JqZWN0LmNyZWF0ZShlLmNvbnN0cnVjdG9yLm9wdGlvbnMpLHI9dC5fcGFyZW50Vm5vZGU7bi5wYXJlbnQ9dC5wYXJlbnQsbi5fcGFyZW50Vm5vZGU9cjt2YXIgaT1yLmNvbXBvbmVudE9wdGlvbnM7bi5wcm9wc0RhdGE9aS5wcm9wc0RhdGEsbi5fcGFyZW50TGlzdGVuZXJzPWkubGlzdGVuZXJzLG4uX3JlbmRlckNoaWxkcmVuPWkuY2hpbGRyZW4sbi5fY29tcG9uZW50VGFnPWkudGFnLHQucmVuZGVyJiYobi5yZW5kZXI9dC5yZW5kZXIsbi5zdGF0aWNSZW5kZXJGbnM9dC5zdGF0aWNSZW5kZXJGbnMpfShuLHQpOm4uJG9wdGlvbnM9RGUoJG4obi5jb25zdHJ1Y3RvciksdHx8e30sbiksbi5fcmVuZGVyUHJveHk9bixuLl9zZWxmPW4sZnVuY3Rpb24oZSl7dmFyIHQ9ZS4kb3B0aW9ucyxuPXQucGFyZW50O2lmKG4mJiF0LmFic3RyYWN0KXtmb3IoO24uJG9wdGlvbnMuYWJzdHJhY3QmJm4uJHBhcmVudDspbj1uLiRwYXJlbnQ7bi4kY2hpbGRyZW4ucHVzaChlKX1lLiRwYXJlbnQ9bixlLiRyb290PW4/bi4kcm9vdDplLGUuJGNoaWxkcmVuPVtdLGUuJHJlZnM9e30sZS5fd2F0Y2hlcj1udWxsLGUuX2luYWN0aXZlPW51bGwsZS5fZGlyZWN0SW5hY3RpdmU9ITEsZS5faXNNb3VudGVkPSExLGUuX2lzRGVzdHJveWVkPSExLGUuX2lzQmVpbmdEZXN0cm95ZWQ9ITF9KG4pLGZ1bmN0aW9uKGUpe2UuX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLGUuX2hhc0hvb2tFdmVudD0hMTt2YXIgdD1lLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7dCYmcXQoZSx0KX0obiksZnVuY3Rpb24odCl7dC5fdm5vZGU9bnVsbCx0Ll9zdGF0aWNUcmVlcz1udWxsO3ZhciBuPXQuJG9wdGlvbnMscj10LiR2bm9kZT1uLl9wYXJlbnRWbm9kZSxpPXImJnIuY29udGV4dDt0LiRzbG90cz11dChuLl9yZW5kZXJDaGlsZHJlbixpKSx0LiRzY29wZWRTbG90cz1lLHQuX2M9ZnVuY3Rpb24oZSxuLHIsaSl7cmV0dXJuIFB0KHQsZSxuLHIsaSwhMSl9LHQuJGNyZWF0ZUVsZW1lbnQ9ZnVuY3Rpb24oZSxuLHIsaSl7cmV0dXJuIFB0KHQsZSxuLHIsaSwhMCl9O3ZhciBvPXImJnIuZGF0YTt4ZSh0LCIkYXR0cnMiLG8mJm8uYXR0cnN8fGUsbnVsbCwhMCkseGUodCwiJGxpc3RlbmVycyIsbi5fcGFyZW50TGlzdGVuZXJzfHxlLG51bGwsITApfShuKSxZdChuLCJiZWZvcmVDcmVhdGUiKSxmdW5jdGlvbihlKXt2YXIgdD1jdChlLiRvcHRpb25zLmluamVjdCxlKTt0JiYoJGUoITEpLE9iamVjdC5rZXlzKHQpLmZvckVhY2goZnVuY3Rpb24obil7eGUoZSxuLHRbbl0pfSksJGUoITApKX0obiksdm4obiksZnVuY3Rpb24oZSl7dmFyIHQ9ZS4kb3B0aW9ucy5wcm92aWRlO3QmJihlLl9wcm92aWRlZD0iZnVuY3Rpb24iPT10eXBlb2YgdD90LmNhbGwoZSk6dCl9KG4pLFl0KG4sImNyZWF0ZWQiKSxuLiRvcHRpb25zLmVsJiZuLiRtb3VudChuLiRvcHRpb25zLmVsKX19KHduKSxmdW5jdGlvbihlKXt2YXIgdD17Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2RhdGF9fSxuPXtnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcHJvcHN9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsIiRkYXRhIix0KSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZS5wcm90b3R5cGUsIiRwcm9wcyIsbiksZS5wcm90b3R5cGUuJHNldD1rZSxlLnByb3RvdHlwZS4kZGVsZXRlPUFlLGUucHJvdG90eXBlLiR3YXRjaD1mdW5jdGlvbihlLHQsbil7aWYocyh0KSlyZXR1cm4gX24odGhpcyxlLHQsbik7KG49bnx8e30pLnVzZXI9ITA7dmFyIHI9bmV3IGZuKHRoaXMsZSx0LG4pO2lmKG4uaW1tZWRpYXRlKXRyeXt0LmNhbGwodGhpcyxyLnZhbHVlKX1jYXRjaChlKXtSZShlLHRoaXMsJ2NhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciAiJytyLmV4cHJlc3Npb24rJyInKX1yZXR1cm4gZnVuY3Rpb24oKXtyLnRlYXJkb3duKCl9fX0od24pLGZ1bmN0aW9uKGUpe3ZhciB0PS9eaG9vazovO2UucHJvdG90eXBlLiRvbj1mdW5jdGlvbihlLG4pe3ZhciByPXRoaXM7aWYoQXJyYXkuaXNBcnJheShlKSlmb3IodmFyIGk9MCxvPWUubGVuZ3RoO2k8bztpKyspci4kb24oZVtpXSxuKTtlbHNlKHIuX2V2ZW50c1tlXXx8KHIuX2V2ZW50c1tlXT1bXSkpLnB1c2gobiksdC50ZXN0KGUpJiYoci5faGFzSG9va0V2ZW50PSEwKTtyZXR1cm4gcn0sZS5wcm90b3R5cGUuJG9uY2U9ZnVuY3Rpb24oZSx0KXt2YXIgbj10aGlzO2Z1bmN0aW9uIHIoKXtuLiRvZmYoZSxyKSx0LmFwcGx5KG4sYXJndW1lbnRzKX1yZXR1cm4gci5mbj10LG4uJG9uKGUsciksbn0sZS5wcm90b3R5cGUuJG9mZj1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXM7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIG4uX2V2ZW50cz1PYmplY3QuY3JlYXRlKG51bGwpLG47aWYoQXJyYXkuaXNBcnJheShlKSl7Zm9yKHZhciByPTAsaT1lLmxlbmd0aDtyPGk7cisrKW4uJG9mZihlW3JdLHQpO3JldHVybiBufXZhciBvLGE9bi5fZXZlbnRzW2VdO2lmKCFhKXJldHVybiBuO2lmKCF0KXJldHVybiBuLl9ldmVudHNbZV09bnVsbCxuO2Zvcih2YXIgcz1hLmxlbmd0aDtzLS07KWlmKChvPWFbc10pPT09dHx8by5mbj09PXQpe2Euc3BsaWNlKHMsMSk7YnJlYWt9cmV0dXJuIG59LGUucHJvdG90eXBlLiRlbWl0PWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2V2ZW50c1tlXTtpZih0KXt0PXQubGVuZ3RoPjE/ayh0KTp0O2Zvcih2YXIgbj1rKGFyZ3VtZW50cywxKSxyPSdldmVudCBoYW5kbGVyIGZvciAiJytlKyciJyxpPTAsbz10Lmxlbmd0aDtpPG87aSsrKUhlKHRbaV0sdGhpcyxuLHRoaXMscil9cmV0dXJuIHRoaXN9fSh3biksZnVuY3Rpb24oZSl7ZS5wcm90b3R5cGUuX3VwZGF0ZT1mdW5jdGlvbihlLHQpe3ZhciBuPXRoaXMscj1uLiRlbCxpPW4uX3Zub2RlLG89WnQobik7bi5fdm5vZGU9ZSxuLiRlbD1pP24uX19wYXRjaF9fKGksZSk6bi5fX3BhdGNoX18obi4kZWwsZSx0LCExKSxvKCksciYmKHIuX192dWVfXz1udWxsKSxuLiRlbCYmKG4uJGVsLl9fdnVlX189biksbi4kdm5vZGUmJm4uJHBhcmVudCYmbi4kdm5vZGU9PT1uLiRwYXJlbnQuX3Zub2RlJiYobi4kcGFyZW50LiRlbD1uLiRlbCl9LGUucHJvdG90eXBlLiRmb3JjZVVwZGF0ZT1mdW5jdGlvbigpe3RoaXMuX3dhdGNoZXImJnRoaXMuX3dhdGNoZXIudXBkYXRlKCl9LGUucHJvdG90eXBlLiRkZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGU9dGhpcztpZighZS5faXNCZWluZ0Rlc3Ryb3llZCl7WXQoZSwiYmVmb3JlRGVzdHJveSIpLGUuX2lzQmVpbmdEZXN0cm95ZWQ9ITA7dmFyIHQ9ZS4kcGFyZW50OyF0fHx0Ll9pc0JlaW5nRGVzdHJveWVkfHxlLiRvcHRpb25zLmFic3RyYWN0fHxoKHQuJGNoaWxkcmVuLGUpLGUuX3dhdGNoZXImJmUuX3dhdGNoZXIudGVhcmRvd24oKTtmb3IodmFyIG49ZS5fd2F0Y2hlcnMubGVuZ3RoO24tLTspZS5fd2F0Y2hlcnNbbl0udGVhcmRvd24oKTtlLl9kYXRhLl9fb2JfXyYmZS5fZGF0YS5fX29iX18udm1Db3VudC0tLGUuX2lzRGVzdHJveWVkPSEwLGUuX19wYXRjaF9fKGUuX3Zub2RlLG51bGwpLFl0KGUsImRlc3Ryb3llZCIpLGUuJG9mZigpLGUuJGVsJiYoZS4kZWwuX192dWVfXz1udWxsKSxlLiR2bm9kZSYmKGUuJHZub2RlLnBhcmVudD1udWxsKX19fSh3biksZnVuY3Rpb24oZSl7U3QoZS5wcm90b3R5cGUpLGUucHJvdG90eXBlLiRuZXh0VGljaz1mdW5jdGlvbihlKXtyZXR1cm4gWWUoZSx0aGlzKX0sZS5wcm90b3R5cGUuX3JlbmRlcj1mdW5jdGlvbigpe3ZhciBlLHQ9dGhpcyxuPXQuJG9wdGlvbnMscj1uLnJlbmRlcixpPW4uX3BhcmVudFZub2RlO2kmJih0LiRzY29wZWRTbG90cz1mdChpLmRhdGEuc2NvcGVkU2xvdHMsdC4kc2xvdHMsdC4kc2NvcGVkU2xvdHMpKSx0LiR2bm9kZT1pO3RyeXtIdD10LGU9ci5jYWxsKHQuX3JlbmRlclByb3h5LHQuJGNyZWF0ZUVsZW1lbnQpfWNhdGNoKG4pe1JlKG4sdCwicmVuZGVyIiksZT10Ll92bm9kZX1maW5hbGx5e0h0PW51bGx9cmV0dXJuIEFycmF5LmlzQXJyYXkoZSkmJjE9PT1lLmxlbmd0aCYmKGU9ZVswXSksZSBpbnN0YW5jZW9mIHBlfHwoZT12ZSgpKSxlLnBhcmVudD1pLGV9fSh3bik7dmFyIFNuPVtTdHJpbmcsUmVnRXhwLEFycmF5XSxUbj17S2VlcEFsaXZlOntuYW1lOiJrZWVwLWFsaXZlIixhYnN0cmFjdDohMCxwcm9wczp7aW5jbHVkZTpTbixleGNsdWRlOlNuLG1heDpbU3RyaW5nLE51bWJlcl19LGNyZWF0ZWQ6ZnVuY3Rpb24oKXt0aGlzLmNhY2hlPU9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5rZXlzPVtdfSxkZXN0cm95ZWQ6ZnVuY3Rpb24oKXtmb3IodmFyIGUgaW4gdGhpcy5jYWNoZSlPbih0aGlzLmNhY2hlLGUsdGhpcy5rZXlzKX0sbW91bnRlZDpmdW5jdGlvbigpe3ZhciBlPXRoaXM7dGhpcy4kd2F0Y2goImluY2x1ZGUiLGZ1bmN0aW9uKHQpe0FuKGUsZnVuY3Rpb24oZSl7cmV0dXJuIGtuKHQsZSl9KX0pLHRoaXMuJHdhdGNoKCJleGNsdWRlIixmdW5jdGlvbih0KXtBbihlLGZ1bmN0aW9uKGUpe3JldHVybiFrbih0LGUpfSl9KX0scmVuZGVyOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy4kc2xvdHMuZGVmYXVsdCx0PXp0KGUpLG49dCYmdC5jb21wb25lbnRPcHRpb25zO2lmKG4pe3ZhciByPXhuKG4pLGk9dGhpcy5pbmNsdWRlLG89dGhpcy5leGNsdWRlO2lmKGkmJighcnx8IWtuKGkscikpfHxvJiZyJiZrbihvLHIpKXJldHVybiB0O3ZhciBhPXRoaXMuY2FjaGUscz10aGlzLmtleXMsYz1udWxsPT10LmtleT9uLkN0b3IuY2lkKyhuLnRhZz8iOjoiK24udGFnOiIiKTp0LmtleTthW2NdPyh0LmNvbXBvbmVudEluc3RhbmNlPWFbY10uY29tcG9uZW50SW5zdGFuY2UsaChzLGMpLHMucHVzaChjKSk6KGFbY109dCxzLnB1c2goYyksdGhpcy5tYXgmJnMubGVuZ3RoPnBhcnNlSW50KHRoaXMubWF4KSYmT24oYSxzWzBdLHMsdGhpcy5fdm5vZGUpKSx0LmRhdGEua2VlcEFsaXZlPSEwfXJldHVybiB0fHxlJiZlWzBdfX19OyFmdW5jdGlvbihlKXt2YXIgdD17Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEZ9fTtPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwiY29uZmlnIix0KSxlLnV0aWw9e3dhcm46YWUsZXh0ZW5kOkEsbWVyZ2VPcHRpb25zOkRlLGRlZmluZVJlYWN0aXZlOnhlfSxlLnNldD1rZSxlLmRlbGV0ZT1BZSxlLm5leHRUaWNrPVllLGUub2JzZXJ2YWJsZT1mdW5jdGlvbihlKXtyZXR1cm4gQ2UoZSksZX0sZS5vcHRpb25zPU9iamVjdC5jcmVhdGUobnVsbCksTS5mb3JFYWNoKGZ1bmN0aW9uKHQpe2Uub3B0aW9uc1t0KyJzIl09T2JqZWN0LmNyZWF0ZShudWxsKX0pLGUub3B0aW9ucy5fYmFzZT1lLEEoZS5vcHRpb25zLmNvbXBvbmVudHMsVG4pLGZ1bmN0aW9uKGUpe2UudXNlPWZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMuX2luc3RhbGxlZFBsdWdpbnN8fCh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zPVtdKTtpZih0LmluZGV4T2YoZSk+LTEpcmV0dXJuIHRoaXM7dmFyIG49ayhhcmd1bWVudHMsMSk7cmV0dXJuIG4udW5zaGlmdCh0aGlzKSwiZnVuY3Rpb24iPT10eXBlb2YgZS5pbnN0YWxsP2UuaW5zdGFsbC5hcHBseShlLG4pOiJmdW5jdGlvbiI9PXR5cGVvZiBlJiZlLmFwcGx5KG51bGwsbiksdC5wdXNoKGUpLHRoaXN9fShlKSxmdW5jdGlvbihlKXtlLm1peGluPWZ1bmN0aW9uKGUpe3JldHVybiB0aGlzLm9wdGlvbnM9RGUodGhpcy5vcHRpb25zLGUpLHRoaXN9fShlKSxDbihlKSxmdW5jdGlvbihlKXtNLmZvckVhY2goZnVuY3Rpb24odCl7ZVt0XT1mdW5jdGlvbihlLG4pe3JldHVybiBuPygiY29tcG9uZW50Ij09PXQmJnMobikmJihuLm5hbWU9bi5uYW1lfHxlLG49dGhpcy5vcHRpb25zLl9iYXNlLmV4dGVuZChuKSksImRpcmVjdGl2ZSI9PT10JiYiZnVuY3Rpb24iPT10eXBlb2YgbiYmKG49e2JpbmQ6bix1cGRhdGU6bn0pLHRoaXMub3B0aW9uc1t0KyJzIl1bZV09bixuKTp0aGlzLm9wdGlvbnNbdCsicyJdW2VdfX0pfShlKX0od24pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3bi5wcm90b3R5cGUsIiRpc1NlcnZlciIse2dldDp0ZX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3bi5wcm90b3R5cGUsIiRzc3JDb250ZXh0Iix7Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuJHZub2RlJiZ0aGlzLiR2bm9kZS5zc3JDb250ZXh0fX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh3biwiRnVuY3Rpb25hbFJlbmRlckNvbnRleHQiLHt2YWx1ZTpUdH0pLHduLnZlcnNpb249IjIuNi4xMiI7dmFyIEVuPXAoInN0eWxlLGNsYXNzIiksTm49cCgiaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcyIpLGpuPWZ1bmN0aW9uKGUsdCxuKXtyZXR1cm4idmFsdWUiPT09biYmTm4oZSkmJiJidXR0b24iIT09dHx8InNlbGVjdGVkIj09PW4mJiJvcHRpb24iPT09ZXx8ImNoZWNrZWQiPT09biYmImlucHV0Ij09PWV8fCJtdXRlZCI9PT1uJiYidmlkZW8iPT09ZX0sRG49cCgiY29udGVudGVkaXRhYmxlLGRyYWdnYWJsZSxzcGVsbGNoZWNrIiksTG49cCgiZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seSIpLE1uPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIEhuKHQpfHwiZmFsc2UiPT09dD8iZmFsc2UiOiJjb250ZW50ZWRpdGFibGUiPT09ZSYmTG4odCk/dDoidHJ1ZSJ9LEluPXAoImFsbG93ZnVsbHNjcmVlbixhc3luYyxhdXRvZm9jdXMsYXV0b3BsYXksY2hlY2tlZCxjb21wYWN0LGNvbnRyb2xzLGRlY2xhcmUsZGVmYXVsdCxkZWZhdWx0Y2hlY2tlZCxkZWZhdWx0bXV0ZWQsZGVmYXVsdHNlbGVjdGVkLGRlZmVyLGRpc2FibGVkLGVuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsbXV0ZWQsbm9ocmVmLG5vcmVzaXplLG5vc2hhZGUsbm92YWxpZGF0ZSxub3dyYXAsb3BlbixwYXVzZW9uZXhpdCxyZWFkb25seSxyZXF1aXJlZCxyZXZlcnNlZCxzY29wZWQsc2VhbWxlc3Msc2VsZWN0ZWQsc29ydGFibGUsdHJhbnNsYXRlLHRydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUiKSxGbj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGluayIsUG49ZnVuY3Rpb24oZSl7cmV0dXJuIjoiPT09ZS5jaGFyQXQoNSkmJiJ4bGluayI9PT1lLnNsaWNlKDAsNSl9LFJuPWZ1bmN0aW9uKGUpe3JldHVybiBQbihlKT9lLnNsaWNlKDYsZS5sZW5ndGgpOiIifSxIbj1mdW5jdGlvbihlKXtyZXR1cm4gbnVsbD09ZXx8ITE9PT1lfTtmdW5jdGlvbiBCbihlKXtmb3IodmFyIHQ9ZS5kYXRhLHI9ZSxpPWU7bihpLmNvbXBvbmVudEluc3RhbmNlKTspKGk9aS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpJiZpLmRhdGEmJih0PVVuKGkuZGF0YSx0KSk7Zm9yKDtuKHI9ci5wYXJlbnQpOylyJiZyLmRhdGEmJih0PVVuKHQsci5kYXRhKSk7cmV0dXJuIGZ1bmN0aW9uKGUsdCl7aWYobihlKXx8bih0KSlyZXR1cm4gem4oZSxWbih0KSk7cmV0dXJuIiJ9KHQuc3RhdGljQ2xhc3MsdC5jbGFzcyl9ZnVuY3Rpb24gVW4oZSx0KXtyZXR1cm57c3RhdGljQ2xhc3M6em4oZS5zdGF0aWNDbGFzcyx0LnN0YXRpY0NsYXNzKSxjbGFzczpuKGUuY2xhc3MpP1tlLmNsYXNzLHQuY2xhc3NdOnQuY2xhc3N9fWZ1bmN0aW9uIHpuKGUsdCl7cmV0dXJuIGU/dD9lKyIgIit0OmU6dHx8IiJ9ZnVuY3Rpb24gVm4oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZnVuY3Rpb24oZSl7Zm9yKHZhciB0LHI9IiIsaT0wLG89ZS5sZW5ndGg7aTxvO2krKyluKHQ9Vm4oZVtpXSkpJiYiIiE9PXQmJihyJiYocis9IiAiKSxyKz10KTtyZXR1cm4gcn0oZSk6byhlKT9mdW5jdGlvbihlKXt2YXIgdD0iIjtmb3IodmFyIG4gaW4gZSllW25dJiYodCYmKHQrPSIgIiksdCs9bik7cmV0dXJuIHR9KGUpOiJzdHJpbmciPT10eXBlb2YgZT9lOiIifXZhciBLbj17c3ZnOiJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIsbWF0aDoiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCJ9LEpuPXAoImh0bWwsYm9keSxiYXNlLGhlYWQsbGluayxtZXRhLHN0eWxlLHRpdGxlLGFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbixkaXYsZGQsZGwsZHQsZmlnY2FwdGlvbixmaWd1cmUscGljdHVyZSxocixpbWcsbGksbWFpbixvbCxwLHByZSx1bCxhLGIsYWJicixiZGksYmRvLGJyLGNpdGUsY29kZSxkYXRhLGRmbixlbSxpLGtiZCxtYXJrLHEscnAscnQscnRjLHJ1YnkscyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sZW1iZWQsb2JqZWN0LHBhcmFtLHNvdXJjZSxjYW52YXMsc2NyaXB0LG5vc2NyaXB0LGRlbCxpbnMsY2FwdGlvbixjb2wsY29sZ3JvdXAsdGFibGUsdGhlYWQsdGJvZHksdGQsdGgsdHIsYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbixvdXRwdXQscHJvZ3Jlc3Msc2VsZWN0LHRleHRhcmVhLGRldGFpbHMsZGlhbG9nLG1lbnUsbWVudWl0ZW0sc3VtbWFyeSxjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290IikscW49cCgic3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLGZvcmVpZ25PYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLHBvbHlnb24scG9seWxpbmUscmVjdCxzd2l0Y2gsc3ltYm9sLHRleHQsdGV4dHBhdGgsdHNwYW4sdXNlLHZpZXciLCEwKSxXbj1mdW5jdGlvbihlKXtyZXR1cm4gSm4oZSl8fHFuKGUpfTtmdW5jdGlvbiBabihlKXtyZXR1cm4gcW4oZSk/InN2ZyI6Im1hdGgiPT09ZT8ibWF0aCI6dm9pZCAwfXZhciBHbj1PYmplY3QuY3JlYXRlKG51bGwpO3ZhciBYbj1wKCJ0ZXh0LG51bWJlcixwYXNzd29yZCxzZWFyY2gsZW1haWwsdGVsLHVybCIpO2Z1bmN0aW9uIFluKGUpe2lmKCJzdHJpbmciPT10eXBlb2YgZSl7dmFyIHQ9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlKTtyZXR1cm4gdHx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iil9cmV0dXJuIGV9dmFyIFFuPU9iamVjdC5mcmVlemUoe2NyZWF0ZUVsZW1lbnQ6ZnVuY3Rpb24oZSx0KXt2YXIgbj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO3JldHVybiJzZWxlY3QiIT09ZT9uOih0LmRhdGEmJnQuZGF0YS5hdHRycyYmdm9pZCAwIT09dC5kYXRhLmF0dHJzLm11bHRpcGxlJiZuLnNldEF0dHJpYnV0ZSgibXVsdGlwbGUiLCJtdWx0aXBsZSIpLG4pfSxjcmVhdGVFbGVtZW50TlM6ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKEtuW2VdLHQpfSxjcmVhdGVUZXh0Tm9kZTpmdW5jdGlvbihlKXtyZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoZSl9LGNyZWF0ZUNvbW1lbnQ6ZnVuY3Rpb24oZSl7cmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoZSl9LGluc2VydEJlZm9yZTpmdW5jdGlvbihlLHQsbil7ZS5pbnNlcnRCZWZvcmUodCxuKX0scmVtb3ZlQ2hpbGQ6ZnVuY3Rpb24oZSx0KXtlLnJlbW92ZUNoaWxkKHQpfSxhcHBlbmRDaGlsZDpmdW5jdGlvbihlLHQpe2UuYXBwZW5kQ2hpbGQodCl9LHBhcmVudE5vZGU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucGFyZW50Tm9kZX0sbmV4dFNpYmxpbmc6ZnVuY3Rpb24oZSl7cmV0dXJuIGUubmV4dFNpYmxpbmd9LHRhZ05hbWU6ZnVuY3Rpb24oZSl7cmV0dXJuIGUudGFnTmFtZX0sc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oZSx0KXtlLnRleHRDb250ZW50PXR9LHNldFN0eWxlU2NvcGU6ZnVuY3Rpb24oZSx0KXtlLnNldEF0dHJpYnV0ZSh0LCIiKX19KSxlcj17Y3JlYXRlOmZ1bmN0aW9uKGUsdCl7dHIodCl9LHVwZGF0ZTpmdW5jdGlvbihlLHQpe2UuZGF0YS5yZWYhPT10LmRhdGEucmVmJiYodHIoZSwhMCksdHIodCkpfSxkZXN0cm95OmZ1bmN0aW9uKGUpe3RyKGUsITApfX07ZnVuY3Rpb24gdHIoZSx0KXt2YXIgcj1lLmRhdGEucmVmO2lmKG4ocikpe3ZhciBpPWUuY29udGV4dCxvPWUuY29tcG9uZW50SW5zdGFuY2V8fGUuZWxtLGE9aS4kcmVmczt0P0FycmF5LmlzQXJyYXkoYVtyXSk/aChhW3JdLG8pOmFbcl09PT1vJiYoYVtyXT12b2lkIDApOmUuZGF0YS5yZWZJbkZvcj9BcnJheS5pc0FycmF5KGFbcl0pP2Fbcl0uaW5kZXhPZihvKTwwJiZhW3JdLnB1c2gobyk6YVtyXT1bb106YVtyXT1vfX12YXIgbnI9bmV3IHBlKCIiLHt9LFtdKSxycj1bImNyZWF0ZSIsImFjdGl2YXRlIiwidXBkYXRlIiwicmVtb3ZlIiwiZGVzdHJveSJdO2Z1bmN0aW9uIGlyKGUsaSl7cmV0dXJuIGUua2V5PT09aS5rZXkmJihlLnRhZz09PWkudGFnJiZlLmlzQ29tbWVudD09PWkuaXNDb21tZW50JiZuKGUuZGF0YSk9PT1uKGkuZGF0YSkmJmZ1bmN0aW9uKGUsdCl7aWYoImlucHV0IiE9PWUudGFnKXJldHVybiEwO3ZhciByLGk9bihyPWUuZGF0YSkmJm4ocj1yLmF0dHJzKSYmci50eXBlLG89bihyPXQuZGF0YSkmJm4ocj1yLmF0dHJzKSYmci50eXBlO3JldHVybiBpPT09b3x8WG4oaSkmJlhuKG8pfShlLGkpfHxyKGUuaXNBc3luY1BsYWNlaG9sZGVyKSYmZS5hc3luY0ZhY3Rvcnk9PT1pLmFzeW5jRmFjdG9yeSYmdChpLmFzeW5jRmFjdG9yeS5lcnJvcikpfWZ1bmN0aW9uIG9yKGUsdCxyKXt2YXIgaSxvLGE9e307Zm9yKGk9dDtpPD1yOysraSluKG89ZVtpXS5rZXkpJiYoYVtvXT1pKTtyZXR1cm4gYX12YXIgYXI9e2NyZWF0ZTpzcix1cGRhdGU6c3IsZGVzdHJveTpmdW5jdGlvbihlKXtzcihlLG5yKX19O2Z1bmN0aW9uIHNyKGUsdCl7KGUuZGF0YS5kaXJlY3RpdmVzfHx0LmRhdGEuZGlyZWN0aXZlcykmJmZ1bmN0aW9uKGUsdCl7dmFyIG4scixpLG89ZT09PW5yLGE9dD09PW5yLHM9dXIoZS5kYXRhLmRpcmVjdGl2ZXMsZS5jb250ZXh0KSxjPXVyKHQuZGF0YS5kaXJlY3RpdmVzLHQuY29udGV4dCksdT1bXSxsPVtdO2ZvcihuIGluIGMpcj1zW25dLGk9Y1tuXSxyPyhpLm9sZFZhbHVlPXIudmFsdWUsaS5vbGRBcmc9ci5hcmcsZnIoaSwidXBkYXRlIix0LGUpLGkuZGVmJiZpLmRlZi5jb21wb25lbnRVcGRhdGVkJiZsLnB1c2goaSkpOihmcihpLCJiaW5kIix0LGUpLGkuZGVmJiZpLmRlZi5pbnNlcnRlZCYmdS5wdXNoKGkpKTtpZih1Lmxlbmd0aCl7dmFyIGY9ZnVuY3Rpb24oKXtmb3IodmFyIG49MDtuPHUubGVuZ3RoO24rKylmcih1W25dLCJpbnNlcnRlZCIsdCxlKX07bz9pdCh0LCJpbnNlcnQiLGYpOmYoKX1sLmxlbmd0aCYmaXQodCwicG9zdHBhdGNoIixmdW5jdGlvbigpe2Zvcih2YXIgbj0wO248bC5sZW5ndGg7bisrKWZyKGxbbl0sImNvbXBvbmVudFVwZGF0ZWQiLHQsZSl9KTtpZighbylmb3IobiBpbiBzKWNbbl18fGZyKHNbbl0sInVuYmluZCIsZSxlLGEpfShlLHQpfXZhciBjcj1PYmplY3QuY3JlYXRlKG51bGwpO2Z1bmN0aW9uIHVyKGUsdCl7dmFyIG4scixpPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoIWUpcmV0dXJuIGk7Zm9yKG49MDtuPGUubGVuZ3RoO24rKykocj1lW25dKS5tb2RpZmllcnN8fChyLm1vZGlmaWVycz1jciksaVtscihyKV09cixyLmRlZj1MZSh0LiRvcHRpb25zLCJkaXJlY3RpdmVzIixyLm5hbWUpO3JldHVybiBpfWZ1bmN0aW9uIGxyKGUpe3JldHVybiBlLnJhd05hbWV8fGUubmFtZSsiLiIrT2JqZWN0LmtleXMoZS5tb2RpZmllcnN8fHt9KS5qb2luKCIuIil9ZnVuY3Rpb24gZnIoZSx0LG4scixpKXt2YXIgbz1lLmRlZiYmZS5kZWZbdF07aWYobyl0cnl7byhuLmVsbSxlLG4scixpKX1jYXRjaChyKXtSZShyLG4uY29udGV4dCwiZGlyZWN0aXZlICIrZS5uYW1lKyIgIit0KyIgaG9vayIpfX12YXIgcHI9W2VyLGFyXTtmdW5jdGlvbiBkcihlLHIpe3ZhciBpPXIuY29tcG9uZW50T3B0aW9ucztpZighKG4oaSkmJiExPT09aS5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzfHx0KGUuZGF0YS5hdHRycykmJnQoci5kYXRhLmF0dHJzKSkpe3ZhciBvLGEscz1yLmVsbSxjPWUuZGF0YS5hdHRyc3x8e30sdT1yLmRhdGEuYXR0cnN8fHt9O2ZvcihvIGluIG4odS5fX29iX18pJiYodT1yLmRhdGEuYXR0cnM9QSh7fSx1KSksdSlhPXVbb10sY1tvXSE9PWEmJnZyKHMsbyxhKTtmb3IobyBpbihxfHxaKSYmdS52YWx1ZSE9PWMudmFsdWUmJnZyKHMsInZhbHVlIix1LnZhbHVlKSxjKXQodVtvXSkmJihQbihvKT9zLnJlbW92ZUF0dHJpYnV0ZU5TKEZuLFJuKG8pKTpEbihvKXx8cy5yZW1vdmVBdHRyaWJ1dGUobykpfX1mdW5jdGlvbiB2cihlLHQsbil7ZS50YWdOYW1lLmluZGV4T2YoIi0iKT4tMT9ocihlLHQsbik6SW4odCk/SG4obik/ZS5yZW1vdmVBdHRyaWJ1dGUodCk6KG49ImFsbG93ZnVsbHNjcmVlbiI9PT10JiYiRU1CRUQiPT09ZS50YWdOYW1lPyJ0cnVlIjp0LGUuc2V0QXR0cmlidXRlKHQsbikpOkRuKHQpP2Uuc2V0QXR0cmlidXRlKHQsTW4odCxuKSk6UG4odCk/SG4obik/ZS5yZW1vdmVBdHRyaWJ1dGVOUyhGbixSbih0KSk6ZS5zZXRBdHRyaWJ1dGVOUyhGbix0LG4pOmhyKGUsdCxuKX1mdW5jdGlvbiBocihlLHQsbil7aWYoSG4obikpZS5yZW1vdmVBdHRyaWJ1dGUodCk7ZWxzZXtpZihxJiYhVyYmIlRFWFRBUkVBIj09PWUudGFnTmFtZSYmInBsYWNlaG9sZGVyIj09PXQmJiIiIT09biYmIWUuX19pZXBoKXt2YXIgcj1mdW5jdGlvbih0KXt0LnN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbigpLGUucmVtb3ZlRXZlbnRMaXN0ZW5lcigiaW5wdXQiLHIpfTtlLmFkZEV2ZW50TGlzdGVuZXIoImlucHV0IixyKSxlLl9faWVwaD0hMH1lLnNldEF0dHJpYnV0ZSh0LG4pfX12YXIgbXI9e2NyZWF0ZTpkcix1cGRhdGU6ZHJ9O2Z1bmN0aW9uIHlyKGUscil7dmFyIGk9ci5lbG0sbz1yLmRhdGEsYT1lLmRhdGE7aWYoISh0KG8uc3RhdGljQ2xhc3MpJiZ0KG8uY2xhc3MpJiYodChhKXx8dChhLnN0YXRpY0NsYXNzKSYmdChhLmNsYXNzKSkpKXt2YXIgcz1CbihyKSxjPWkuX3RyYW5zaXRpb25DbGFzc2VzO24oYykmJihzPXpuKHMsVm4oYykpKSxzIT09aS5fcHJldkNsYXNzJiYoaS5zZXRBdHRyaWJ1dGUoImNsYXNzIixzKSxpLl9wcmV2Q2xhc3M9cyl9fXZhciBncixfcixiciwkcix3cixDcix4cj17Y3JlYXRlOnlyLHVwZGF0ZTp5cn0sa3I9L1tcdykuK1wtXyRcXV0vO2Z1bmN0aW9uIEFyKGUpe3ZhciB0LG4scixpLG8sYT0hMSxzPSExLGM9ITEsdT0hMSxsPTAsZj0wLHA9MCxkPTA7Zm9yKHI9MDtyPGUubGVuZ3RoO3IrKylpZihuPXQsdD1lLmNoYXJDb2RlQXQociksYSkzOT09PXQmJjkyIT09biYmKGE9ITEpO2Vsc2UgaWYocykzND09PXQmJjkyIT09biYmKHM9ITEpO2Vsc2UgaWYoYyk5Nj09PXQmJjkyIT09biYmKGM9ITEpO2Vsc2UgaWYodSk0Nz09PXQmJjkyIT09biYmKHU9ITEpO2Vsc2UgaWYoMTI0IT09dHx8MTI0PT09ZS5jaGFyQ29kZUF0KHIrMSl8fDEyND09PWUuY2hhckNvZGVBdChyLTEpfHxsfHxmfHxwKXtzd2l0Y2godCl7Y2FzZSAzNDpzPSEwO2JyZWFrO2Nhc2UgMzk6YT0hMDticmVhaztjYXNlIDk2OmM9ITA7YnJlYWs7Y2FzZSA0MDpwKys7YnJlYWs7Y2FzZSA0MTpwLS07YnJlYWs7Y2FzZSA5MTpmKys7YnJlYWs7Y2FzZSA5MzpmLS07YnJlYWs7Y2FzZSAxMjM6bCsrO2JyZWFrO2Nhc2UgMTI1OmwtLX1pZig0Nz09PXQpe2Zvcih2YXIgdj1yLTEsaD12b2lkIDA7dj49MCYmIiAiPT09KGg9ZS5jaGFyQXQodikpO3YtLSk7aCYma3IudGVzdChoKXx8KHU9ITApfX1lbHNlIHZvaWQgMD09PWk/KGQ9cisxLGk9ZS5zbGljZSgwLHIpLnRyaW0oKSk6bSgpO2Z1bmN0aW9uIG0oKXsob3x8KG89W10pKS5wdXNoKGUuc2xpY2UoZCxyKS50cmltKCkpLGQ9cisxfWlmKHZvaWQgMD09PWk/aT1lLnNsaWNlKDAscikudHJpbSgpOjAhPT1kJiZtKCksbylmb3Iocj0wO3I8by5sZW5ndGg7cisrKWk9T3IoaSxvW3JdKTtyZXR1cm4gaX1mdW5jdGlvbiBPcihlLHQpe3ZhciBuPXQuaW5kZXhPZigiKCIpO2lmKG48MClyZXR1cm4nX2YoIicrdCsnIikoJytlKyIpIjt2YXIgcj10LnNsaWNlKDAsbiksaT10LnNsaWNlKG4rMSk7cmV0dXJuJ19mKCInK3IrJyIpKCcrZSsoIikiIT09aT8iLCIraTppKX1mdW5jdGlvbiBTcihlLHQpe2NvbnNvbGUuZXJyb3IoIltWdWUgY29tcGlsZXJdOiAiK2UpfWZ1bmN0aW9uIFRyKGUsdCl7cmV0dXJuIGU/ZS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGVbdF19KS5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGV9KTpbXX1mdW5jdGlvbiBFcihlLHQsbixyLGkpeyhlLnByb3BzfHwoZS5wcm9wcz1bXSkpLnB1c2goUnIoe25hbWU6dCx2YWx1ZTpuLGR5bmFtaWM6aX0scikpLGUucGxhaW49ITF9ZnVuY3Rpb24gTnIoZSx0LG4scixpKXsoaT9lLmR5bmFtaWNBdHRyc3x8KGUuZHluYW1pY0F0dHJzPVtdKTplLmF0dHJzfHwoZS5hdHRycz1bXSkpLnB1c2goUnIoe25hbWU6dCx2YWx1ZTpuLGR5bmFtaWM6aX0scikpLGUucGxhaW49ITF9ZnVuY3Rpb24ganIoZSx0LG4scil7ZS5hdHRyc01hcFt0XT1uLGUuYXR0cnNMaXN0LnB1c2goUnIoe25hbWU6dCx2YWx1ZTpufSxyKSl9ZnVuY3Rpb24gRHIoZSx0LG4scixpLG8sYSxzKXsoZS5kaXJlY3RpdmVzfHwoZS5kaXJlY3RpdmVzPVtdKSkucHVzaChScih7bmFtZTp0LHJhd05hbWU6bix2YWx1ZTpyLGFyZzppLGlzRHluYW1pY0FyZzpvLG1vZGlmaWVyczphfSxzKSksZS5wbGFpbj0hMX1mdW5jdGlvbiBMcihlLHQsbil7cmV0dXJuIG4/Il9wKCIrdCsnLCInK2UrJyIpJzplK3R9ZnVuY3Rpb24gTXIodCxuLHIsaSxvLGEscyxjKXt2YXIgdTsoaT1pfHxlKS5yaWdodD9jP249IigiK24rIik9PT0nY2xpY2snPydjb250ZXh0bWVudSc6KCIrbisiKSI6ImNsaWNrIj09PW4mJihuPSJjb250ZXh0bWVudSIsZGVsZXRlIGkucmlnaHQpOmkubWlkZGxlJiYoYz9uPSIoIituKyIpPT09J2NsaWNrJz8nbW91c2V1cCc6KCIrbisiKSI6ImNsaWNrIj09PW4mJihuPSJtb3VzZXVwIikpLGkuY2FwdHVyZSYmKGRlbGV0ZSBpLmNhcHR1cmUsbj1McigiISIsbixjKSksaS5vbmNlJiYoZGVsZXRlIGkub25jZSxuPUxyKCJ+IixuLGMpKSxpLnBhc3NpdmUmJihkZWxldGUgaS5wYXNzaXZlLG49THIoIiYiLG4sYykpLGkubmF0aXZlPyhkZWxldGUgaS5uYXRpdmUsdT10Lm5hdGl2ZUV2ZW50c3x8KHQubmF0aXZlRXZlbnRzPXt9KSk6dT10LmV2ZW50c3x8KHQuZXZlbnRzPXt9KTt2YXIgbD1Scih7dmFsdWU6ci50cmltKCksZHluYW1pYzpjfSxzKTtpIT09ZSYmKGwubW9kaWZpZXJzPWkpO3ZhciBmPXVbbl07QXJyYXkuaXNBcnJheShmKT9vP2YudW5zaGlmdChsKTpmLnB1c2gobCk6dVtuXT1mP28/W2wsZl06W2YsbF06bCx0LnBsYWluPSExfWZ1bmN0aW9uIElyKGUsdCxuKXt2YXIgcj1GcihlLCI6Iit0KXx8RnIoZSwidi1iaW5kOiIrdCk7aWYobnVsbCE9cilyZXR1cm4gQXIocik7aWYoITEhPT1uKXt2YXIgaT1GcihlLHQpO2lmKG51bGwhPWkpcmV0dXJuIEpTT04uc3RyaW5naWZ5KGkpfX1mdW5jdGlvbiBGcihlLHQsbil7dmFyIHI7aWYobnVsbCE9KHI9ZS5hdHRyc01hcFt0XSkpZm9yKHZhciBpPWUuYXR0cnNMaXN0LG89MCxhPWkubGVuZ3RoO288YTtvKyspaWYoaVtvXS5uYW1lPT09dCl7aS5zcGxpY2UobywxKTticmVha31yZXR1cm4gbiYmZGVsZXRlIGUuYXR0cnNNYXBbdF0scn1mdW5jdGlvbiBQcihlLHQpe2Zvcih2YXIgbj1lLmF0dHJzTGlzdCxyPTAsaT1uLmxlbmd0aDtyPGk7cisrKXt2YXIgbz1uW3JdO2lmKHQudGVzdChvLm5hbWUpKXJldHVybiBuLnNwbGljZShyLDEpLG99fWZ1bmN0aW9uIFJyKGUsdCl7cmV0dXJuIHQmJihudWxsIT10LnN0YXJ0JiYoZS5zdGFydD10LnN0YXJ0KSxudWxsIT10LmVuZCYmKGUuZW5kPXQuZW5kKSksZX1mdW5jdGlvbiBIcihlLHQsbil7dmFyIHI9bnx8e30saT1yLm51bWJlcixvPSIkJHYiO3IudHJpbSYmKG89Iih0eXBlb2YgJCR2ID09PSAnc3RyaW5nJz8gJCR2LnRyaW0oKTogJCR2KSIpLGkmJihvPSJfbigiK28rIikiKTt2YXIgYT1Ccih0LG8pO2UubW9kZWw9e3ZhbHVlOiIoIit0KyIpIixleHByZXNzaW9uOkpTT04uc3RyaW5naWZ5KHQpLGNhbGxiYWNrOiJmdW5jdGlvbiAoJCR2KSB7IithKyJ9In19ZnVuY3Rpb24gQnIoZSx0KXt2YXIgbj1mdW5jdGlvbihlKXtpZihlPWUudHJpbSgpLGdyPWUubGVuZ3RoLGUuaW5kZXhPZigiWyIpPDB8fGUubGFzdEluZGV4T2YoIl0iKTxnci0xKXJldHVybigkcj1lLmxhc3RJbmRleE9mKCIuIikpPi0xP3tleHA6ZS5zbGljZSgwLCRyKSxrZXk6JyInK2Uuc2xpY2UoJHIrMSkrJyInfTp7ZXhwOmUsa2V5Om51bGx9O19yPWUsJHI9d3I9Q3I9MDtmb3IoOyF6cigpOylWcihicj1VcigpKT9Kcihicik6OTE9PT1iciYmS3IoYnIpO3JldHVybntleHA6ZS5zbGljZSgwLHdyKSxrZXk6ZS5zbGljZSh3cisxLENyKX19KGUpO3JldHVybiBudWxsPT09bi5rZXk/ZSsiPSIrdDoiJHNldCgiK24uZXhwKyIsICIrbi5rZXkrIiwgIit0KyIpIn1mdW5jdGlvbiBVcigpe3JldHVybiBfci5jaGFyQ29kZUF0KCsrJHIpfWZ1bmN0aW9uIHpyKCl7cmV0dXJuICRyPj1ncn1mdW5jdGlvbiBWcihlKXtyZXR1cm4gMzQ9PT1lfHwzOT09PWV9ZnVuY3Rpb24gS3IoZSl7dmFyIHQ9MTtmb3Iod3I9JHI7IXpyKCk7KWlmKFZyKGU9VXIoKSkpSnIoZSk7ZWxzZSBpZig5MT09PWUmJnQrKyw5Mz09PWUmJnQtLSwwPT09dCl7Q3I9JHI7YnJlYWt9fWZ1bmN0aW9uIEpyKGUpe2Zvcih2YXIgdD1lOyF6cigpJiYoZT1VcigpKSE9PXQ7KTt9dmFyIHFyLFdyPSJfX3IiLFpyPSJfX2MiO2Z1bmN0aW9uIEdyKGUsdCxuKXt2YXIgcj1xcjtyZXR1cm4gZnVuY3Rpb24gaSgpe251bGwhPT10LmFwcGx5KG51bGwsYXJndW1lbnRzKSYmUXIoZSxpLG4scil9fXZhciBYcj1WZSYmIShYJiZOdW1iZXIoWFsxXSk8PTUzKTtmdW5jdGlvbiBZcihlLHQsbixyKXtpZihYcil7dmFyIGk9YW4sbz10O3Q9by5fd3JhcHBlcj1mdW5jdGlvbihlKXtpZihlLnRhcmdldD09PWUuY3VycmVudFRhcmdldHx8ZS50aW1lU3RhbXA+PWl8fGUudGltZVN0YW1wPD0wfHxlLnRhcmdldC5vd25lckRvY3VtZW50IT09ZG9jdW1lbnQpcmV0dXJuIG8uYXBwbHkodGhpcyxhcmd1bWVudHMpfX1xci5hZGRFdmVudExpc3RlbmVyKGUsdCxRP3tjYXB0dXJlOm4scGFzc2l2ZTpyfTpuKX1mdW5jdGlvbiBRcihlLHQsbixyKXsocnx8cXIpLnJlbW92ZUV2ZW50TGlzdGVuZXIoZSx0Ll93cmFwcGVyfHx0LG4pfWZ1bmN0aW9uIGVpKGUscil7aWYoIXQoZS5kYXRhLm9uKXx8IXQoci5kYXRhLm9uKSl7dmFyIGk9ci5kYXRhLm9ufHx7fSxvPWUuZGF0YS5vbnx8e307cXI9ci5lbG0sZnVuY3Rpb24oZSl7aWYobihlW1dyXSkpe3ZhciB0PXE/ImNoYW5nZSI6ImlucHV0IjtlW3RdPVtdLmNvbmNhdChlW1dyXSxlW3RdfHxbXSksZGVsZXRlIGVbV3JdfW4oZVtacl0pJiYoZS5jaGFuZ2U9W10uY29uY2F0KGVbWnJdLGUuY2hhbmdlfHxbXSksZGVsZXRlIGVbWnJdKX0oaSkscnQoaSxvLFlyLFFyLEdyLHIuY29udGV4dCkscXI9dm9pZCAwfX12YXIgdGksbmk9e2NyZWF0ZTplaSx1cGRhdGU6ZWl9O2Z1bmN0aW9uIHJpKGUscil7aWYoIXQoZS5kYXRhLmRvbVByb3BzKXx8IXQoci5kYXRhLmRvbVByb3BzKSl7dmFyIGksbyxhPXIuZWxtLHM9ZS5kYXRhLmRvbVByb3BzfHx7fSxjPXIuZGF0YS5kb21Qcm9wc3x8e307Zm9yKGkgaW4gbihjLl9fb2JfXykmJihjPXIuZGF0YS5kb21Qcm9wcz1BKHt9LGMpKSxzKWkgaW4gY3x8KGFbaV09IiIpO2ZvcihpIGluIGMpe2lmKG89Y1tpXSwidGV4dENvbnRlbnQiPT09aXx8ImlubmVySFRNTCI9PT1pKXtpZihyLmNoaWxkcmVuJiYoci5jaGlsZHJlbi5sZW5ndGg9MCksbz09PXNbaV0pY29udGludWU7MT09PWEuY2hpbGROb2Rlcy5sZW5ndGgmJmEucmVtb3ZlQ2hpbGQoYS5jaGlsZE5vZGVzWzBdKX1pZigidmFsdWUiPT09aSYmIlBST0dSRVNTIiE9PWEudGFnTmFtZSl7YS5fdmFsdWU9bzt2YXIgdT10KG8pPyIiOlN0cmluZyhvKTtpaShhLHUpJiYoYS52YWx1ZT11KX1lbHNlIGlmKCJpbm5lckhUTUwiPT09aSYmcW4oYS50YWdOYW1lKSYmdChhLmlubmVySFRNTCkpeyh0aT10aXx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2IikpLmlubmVySFRNTD0iPHN2Zz4iK28rIjwvc3ZnPiI7Zm9yKHZhciBsPXRpLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtsLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQobC5maXJzdENoaWxkKX1lbHNlIGlmKG8hPT1zW2ldKXRyeXthW2ldPW99Y2F0Y2goZSl7fX19fWZ1bmN0aW9uIGlpKGUsdCl7cmV0dXJuIWUuY29tcG9zaW5nJiYoIk9QVElPTiI9PT1lLnRhZ05hbWV8fGZ1bmN0aW9uKGUsdCl7dmFyIG49ITA7dHJ5e249ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWV9Y2F0Y2goZSl7fXJldHVybiBuJiZlLnZhbHVlIT09dH0oZSx0KXx8ZnVuY3Rpb24oZSx0KXt2YXIgcj1lLnZhbHVlLGk9ZS5fdk1vZGlmaWVycztpZihuKGkpKXtpZihpLm51bWJlcilyZXR1cm4gZihyKSE9PWYodCk7aWYoaS50cmltKXJldHVybiByLnRyaW0oKSE9PXQudHJpbSgpfXJldHVybiByIT09dH0oZSx0KSl9dmFyIG9pPXtjcmVhdGU6cmksdXBkYXRlOnJpfSxhaT1nKGZ1bmN0aW9uKGUpe3ZhciB0PXt9LG49LzooLispLztyZXR1cm4gZS5zcGxpdCgvOyg/IVteKF0qXCkpL2cpLmZvckVhY2goZnVuY3Rpb24oZSl7aWYoZSl7dmFyIHI9ZS5zcGxpdChuKTtyLmxlbmd0aD4xJiYodFtyWzBdLnRyaW0oKV09clsxXS50cmltKCkpfX0pLHR9KTtmdW5jdGlvbiBzaShlKXt2YXIgdD1jaShlLnN0eWxlKTtyZXR1cm4gZS5zdGF0aWNTdHlsZT9BKGUuc3RhdGljU3R5bGUsdCk6dH1mdW5jdGlvbiBjaShlKXtyZXR1cm4gQXJyYXkuaXNBcnJheShlKT9PKGUpOiJzdHJpbmciPT10eXBlb2YgZT9haShlKTplfXZhciB1aSxsaT0vXi0tLyxmaT0vXHMqIWltcG9ydGFudCQvLHBpPWZ1bmN0aW9uKGUsdCxuKXtpZihsaS50ZXN0KHQpKWUuc3R5bGUuc2V0UHJvcGVydHkodCxuKTtlbHNlIGlmKGZpLnRlc3QobikpZS5zdHlsZS5zZXRQcm9wZXJ0eShDKHQpLG4ucmVwbGFjZShmaSwiIiksImltcG9ydGFudCIpO2Vsc2V7dmFyIHI9dmkodCk7aWYoQXJyYXkuaXNBcnJheShuKSlmb3IodmFyIGk9MCxvPW4ubGVuZ3RoO2k8bztpKyspZS5zdHlsZVtyXT1uW2ldO2Vsc2UgZS5zdHlsZVtyXT1ufX0sZGk9WyJXZWJraXQiLCJNb3oiLCJtcyJdLHZpPWcoZnVuY3Rpb24oZSl7aWYodWk9dWl8fGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImRpdiIpLnN0eWxlLCJmaWx0ZXIiIT09KGU9YihlKSkmJmUgaW4gdWkpcmV0dXJuIGU7Zm9yKHZhciB0PWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxuPTA7bjxkaS5sZW5ndGg7bisrKXt2YXIgcj1kaVtuXSt0O2lmKHIgaW4gdWkpcmV0dXJuIHJ9fSk7ZnVuY3Rpb24gaGkoZSxyKXt2YXIgaT1yLmRhdGEsbz1lLmRhdGE7aWYoISh0KGkuc3RhdGljU3R5bGUpJiZ0KGkuc3R5bGUpJiZ0KG8uc3RhdGljU3R5bGUpJiZ0KG8uc3R5bGUpKSl7dmFyIGEscyxjPXIuZWxtLHU9by5zdGF0aWNTdHlsZSxsPW8ubm9ybWFsaXplZFN0eWxlfHxvLnN0eWxlfHx7fSxmPXV8fGwscD1jaShyLmRhdGEuc3R5bGUpfHx7fTtyLmRhdGEubm9ybWFsaXplZFN0eWxlPW4ocC5fX29iX18pP0Eoe30scCk6cDt2YXIgZD1mdW5jdGlvbihlLHQpe3ZhciBuLHI9e307aWYodClmb3IodmFyIGk9ZTtpLmNvbXBvbmVudEluc3RhbmNlOykoaT1pLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSkmJmkuZGF0YSYmKG49c2koaS5kYXRhKSkmJkEocixuKTsobj1zaShlLmRhdGEpKSYmQShyLG4pO2Zvcih2YXIgbz1lO289by5wYXJlbnQ7KW8uZGF0YSYmKG49c2koby5kYXRhKSkmJkEocixuKTtyZXR1cm4gcn0ociwhMCk7Zm9yKHMgaW4gZil0KGRbc10pJiZwaShjLHMsIiIpO2ZvcihzIGluIGQpKGE9ZFtzXSkhPT1mW3NdJiZwaShjLHMsbnVsbD09YT8iIjphKX19dmFyIG1pPXtjcmVhdGU6aGksdXBkYXRlOmhpfSx5aT0vXHMrLztmdW5jdGlvbiBnaShlLHQpe2lmKHQmJih0PXQudHJpbSgpKSlpZihlLmNsYXNzTGlzdCl0LmluZGV4T2YoIiAiKT4tMT90LnNwbGl0KHlpKS5mb3JFYWNoKGZ1bmN0aW9uKHQpe3JldHVybiBlLmNsYXNzTGlzdC5hZGQodCl9KTplLmNsYXNzTGlzdC5hZGQodCk7ZWxzZXt2YXIgbj0iICIrKGUuZ2V0QXR0cmlidXRlKCJjbGFzcyIpfHwiIikrIiAiO24uaW5kZXhPZigiICIrdCsiICIpPDAmJmUuc2V0QXR0cmlidXRlKCJjbGFzcyIsKG4rdCkudHJpbSgpKX19ZnVuY3Rpb24gX2koZSx0KXtpZih0JiYodD10LnRyaW0oKSkpaWYoZS5jbGFzc0xpc3QpdC5pbmRleE9mKCIgIik+LTE/dC5zcGxpdCh5aSkuZm9yRWFjaChmdW5jdGlvbih0KXtyZXR1cm4gZS5jbGFzc0xpc3QucmVtb3ZlKHQpfSk6ZS5jbGFzc0xpc3QucmVtb3ZlKHQpLGUuY2xhc3NMaXN0Lmxlbmd0aHx8ZS5yZW1vdmVBdHRyaWJ1dGUoImNsYXNzIik7ZWxzZXtmb3IodmFyIG49IiAiKyhlLmdldEF0dHJpYnV0ZSgiY2xhc3MiKXx8IiIpKyIgIixyPSIgIit0KyIgIjtuLmluZGV4T2Yocik+PTA7KW49bi5yZXBsYWNlKHIsIiAiKTsobj1uLnRyaW0oKSk/ZS5zZXRBdHRyaWJ1dGUoImNsYXNzIixuKTplLnJlbW92ZUF0dHJpYnV0ZSgiY2xhc3MiKX19ZnVuY3Rpb24gYmkoZSl7aWYoZSl7aWYoIm9iamVjdCI9PXR5cGVvZiBlKXt2YXIgdD17fTtyZXR1cm4hMSE9PWUuY3NzJiZBKHQsJGkoZS5uYW1lfHwidiIpKSxBKHQsZSksdH1yZXR1cm4ic3RyaW5nIj09dHlwZW9mIGU/JGkoZSk6dm9pZCAwfX12YXIgJGk9ZyhmdW5jdGlvbihlKXtyZXR1cm57ZW50ZXJDbGFzczplKyItZW50ZXIiLGVudGVyVG9DbGFzczplKyItZW50ZXItdG8iLGVudGVyQWN0aXZlQ2xhc3M6ZSsiLWVudGVyLWFjdGl2ZSIsbGVhdmVDbGFzczplKyItbGVhdmUiLGxlYXZlVG9DbGFzczplKyItbGVhdmUtdG8iLGxlYXZlQWN0aXZlQ2xhc3M6ZSsiLWxlYXZlLWFjdGl2ZSJ9fSksd2k9eiYmIVcsQ2k9InRyYW5zaXRpb24iLHhpPSJhbmltYXRpb24iLGtpPSJ0cmFuc2l0aW9uIixBaT0idHJhbnNpdGlvbmVuZCIsT2k9ImFuaW1hdGlvbiIsU2k9ImFuaW1hdGlvbmVuZCI7d2kmJih2b2lkIDA9PT13aW5kb3cub250cmFuc2l0aW9uZW5kJiZ2b2lkIDAhPT13aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kJiYoa2k9IldlYmtpdFRyYW5zaXRpb24iLEFpPSJ3ZWJraXRUcmFuc2l0aW9uRW5kIiksdm9pZCAwPT09d2luZG93Lm9uYW5pbWF0aW9uZW5kJiZ2b2lkIDAhPT13aW5kb3cub253ZWJraXRhbmltYXRpb25lbmQmJihPaT0iV2Via2l0QW5pbWF0aW9uIixTaT0id2Via2l0QW5pbWF0aW9uRW5kIikpO3ZhciBUaT16P3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWU/d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdyk6c2V0VGltZW91dDpmdW5jdGlvbihlKXtyZXR1cm4gZSgpfTtmdW5jdGlvbiBFaShlKXtUaShmdW5jdGlvbigpe1RpKGUpfSl9ZnVuY3Rpb24gTmkoZSx0KXt2YXIgbj1lLl90cmFuc2l0aW9uQ2xhc3Nlc3x8KGUuX3RyYW5zaXRpb25DbGFzc2VzPVtdKTtuLmluZGV4T2YodCk8MCYmKG4ucHVzaCh0KSxnaShlLHQpKX1mdW5jdGlvbiBqaShlLHQpe2UuX3RyYW5zaXRpb25DbGFzc2VzJiZoKGUuX3RyYW5zaXRpb25DbGFzc2VzLHQpLF9pKGUsdCl9ZnVuY3Rpb24gRGkoZSx0LG4pe3ZhciByPU1pKGUsdCksaT1yLnR5cGUsbz1yLnRpbWVvdXQsYT1yLnByb3BDb3VudDtpZighaSlyZXR1cm4gbigpO3ZhciBzPWk9PT1DaT9BaTpTaSxjPTAsdT1mdW5jdGlvbigpe2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihzLGwpLG4oKX0sbD1mdW5jdGlvbih0KXt0LnRhcmdldD09PWUmJisrYz49YSYmdSgpfTtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7YzxhJiZ1KCl9LG8rMSksZS5hZGRFdmVudExpc3RlbmVyKHMsbCl9dmFyIExpPS9cYih0cmFuc2Zvcm18YWxsKSgsfCQpLztmdW5jdGlvbiBNaShlLHQpe3ZhciBuLHI9d2luZG93LmdldENvbXB1dGVkU3R5bGUoZSksaT0ocltraSsiRGVsYXkiXXx8IiIpLnNwbGl0KCIsICIpLG89KHJba2krIkR1cmF0aW9uIl18fCIiKS5zcGxpdCgiLCAiKSxhPUlpKGksbykscz0ocltPaSsiRGVsYXkiXXx8IiIpLnNwbGl0KCIsICIpLGM9KHJbT2krIkR1cmF0aW9uIl18fCIiKS5zcGxpdCgiLCAiKSx1PUlpKHMsYyksbD0wLGY9MDtyZXR1cm4gdD09PUNpP2E+MCYmKG49Q2ksbD1hLGY9by5sZW5ndGgpOnQ9PT14aT91PjAmJihuPXhpLGw9dSxmPWMubGVuZ3RoKTpmPShuPShsPU1hdGgubWF4KGEsdSkpPjA/YT51P0NpOnhpOm51bGwpP249PT1DaT9vLmxlbmd0aDpjLmxlbmd0aDowLHt0eXBlOm4sdGltZW91dDpsLHByb3BDb3VudDpmLGhhc1RyYW5zZm9ybTpuPT09Q2kmJkxpLnRlc3QocltraSsiUHJvcGVydHkiXSl9fWZ1bmN0aW9uIElpKGUsdCl7Zm9yKDtlLmxlbmd0aDx0Lmxlbmd0aDspZT1lLmNvbmNhdChlKTtyZXR1cm4gTWF0aC5tYXguYXBwbHkobnVsbCx0Lm1hcChmdW5jdGlvbih0LG4pe3JldHVybiBGaSh0KStGaShlW25dKX0pKX1mdW5jdGlvbiBGaShlKXtyZXR1cm4gMWUzKk51bWJlcihlLnNsaWNlKDAsLTEpLnJlcGxhY2UoIiwiLCIuIikpfWZ1bmN0aW9uIFBpKGUscil7dmFyIGk9ZS5lbG07bihpLl9sZWF2ZUNiKSYmKGkuX2xlYXZlQ2IuY2FuY2VsbGVkPSEwLGkuX2xlYXZlQ2IoKSk7dmFyIGE9YmkoZS5kYXRhLnRyYW5zaXRpb24pO2lmKCF0KGEpJiYhbihpLl9lbnRlckNiKSYmMT09PWkubm9kZVR5cGUpe2Zvcih2YXIgcz1hLmNzcyxjPWEudHlwZSx1PWEuZW50ZXJDbGFzcyxsPWEuZW50ZXJUb0NsYXNzLHA9YS5lbnRlckFjdGl2ZUNsYXNzLGQ9YS5hcHBlYXJDbGFzcyx2PWEuYXBwZWFyVG9DbGFzcyxoPWEuYXBwZWFyQWN0aXZlQ2xhc3MsbT1hLmJlZm9yZUVudGVyLHk9YS5lbnRlcixnPWEuYWZ0ZXJFbnRlcixfPWEuZW50ZXJDYW5jZWxsZWQsYj1hLmJlZm9yZUFwcGVhciwkPWEuYXBwZWFyLHc9YS5hZnRlckFwcGVhcixDPWEuYXBwZWFyQ2FuY2VsbGVkLHg9YS5kdXJhdGlvbixrPVd0LEE9V3QuJHZub2RlO0EmJkEucGFyZW50OylrPUEuY29udGV4dCxBPUEucGFyZW50O3ZhciBPPSFrLl9pc01vdW50ZWR8fCFlLmlzUm9vdEluc2VydDtpZighT3x8JHx8IiI9PT0kKXt2YXIgUz1PJiZkP2Q6dSxUPU8mJmg/aDpwLEU9TyYmdj92OmwsTj1PJiZifHxtLGo9TyYmImZ1bmN0aW9uIj09dHlwZW9mICQ/JDp5LEw9TyYmd3x8ZyxNPU8mJkN8fF8sST1mKG8oeCk/eC5lbnRlcjp4KSxGPSExIT09cyYmIVcsUD1CaShqKSxSPWkuX2VudGVyQ2I9RChmdW5jdGlvbigpe0YmJihqaShpLEUpLGppKGksVCkpLFIuY2FuY2VsbGVkPyhGJiZqaShpLFMpLE0mJk0oaSkpOkwmJkwoaSksaS5fZW50ZXJDYj1udWxsfSk7ZS5kYXRhLnNob3d8fGl0KGUsImluc2VydCIsZnVuY3Rpb24oKXt2YXIgdD1pLnBhcmVudE5vZGUsbj10JiZ0Ll9wZW5kaW5nJiZ0Ll9wZW5kaW5nW2Uua2V5XTtuJiZuLnRhZz09PWUudGFnJiZuLmVsbS5fbGVhdmVDYiYmbi5lbG0uX2xlYXZlQ2IoKSxqJiZqKGksUil9KSxOJiZOKGkpLEYmJihOaShpLFMpLE5pKGksVCksRWkoZnVuY3Rpb24oKXtqaShpLFMpLFIuY2FuY2VsbGVkfHwoTmkoaSxFKSxQfHwoSGkoSSk/c2V0VGltZW91dChSLEkpOkRpKGksYyxSKSkpfSkpLGUuZGF0YS5zaG93JiYociYmcigpLGomJmooaSxSKSksRnx8UHx8UigpfX19ZnVuY3Rpb24gUmkoZSxyKXt2YXIgaT1lLmVsbTtuKGkuX2VudGVyQ2IpJiYoaS5fZW50ZXJDYi5jYW5jZWxsZWQ9ITAsaS5fZW50ZXJDYigpKTt2YXIgYT1iaShlLmRhdGEudHJhbnNpdGlvbik7aWYodChhKXx8MSE9PWkubm9kZVR5cGUpcmV0dXJuIHIoKTtpZighbihpLl9sZWF2ZUNiKSl7dmFyIHM9YS5jc3MsYz1hLnR5cGUsdT1hLmxlYXZlQ2xhc3MsbD1hLmxlYXZlVG9DbGFzcyxwPWEubGVhdmVBY3RpdmVDbGFzcyxkPWEuYmVmb3JlTGVhdmUsdj1hLmxlYXZlLGg9YS5hZnRlckxlYXZlLG09YS5sZWF2ZUNhbmNlbGxlZCx5PWEuZGVsYXlMZWF2ZSxnPWEuZHVyYXRpb24sXz0hMSE9PXMmJiFXLGI9QmkodiksJD1mKG8oZyk/Zy5sZWF2ZTpnKSx3PWkuX2xlYXZlQ2I9RChmdW5jdGlvbigpe2kucGFyZW50Tm9kZSYmaS5wYXJlbnROb2RlLl9wZW5kaW5nJiYoaS5wYXJlbnROb2RlLl9wZW5kaW5nW2Uua2V5XT1udWxsKSxfJiYoamkoaSxsKSxqaShpLHApKSx3LmNhbmNlbGxlZD8oXyYmamkoaSx1KSxtJiZtKGkpKToocigpLGgmJmgoaSkpLGkuX2xlYXZlQ2I9bnVsbH0pO3k/eShDKTpDKCl9ZnVuY3Rpb24gQygpe3cuY2FuY2VsbGVkfHwoIWUuZGF0YS5zaG93JiZpLnBhcmVudE5vZGUmJigoaS5wYXJlbnROb2RlLl9wZW5kaW5nfHwoaS5wYXJlbnROb2RlLl9wZW5kaW5nPXt9KSlbZS5rZXldPWUpLGQmJmQoaSksXyYmKE5pKGksdSksTmkoaSxwKSxFaShmdW5jdGlvbigpe2ppKGksdSksdy5jYW5jZWxsZWR8fChOaShpLGwpLGJ8fChIaSgkKT9zZXRUaW1lb3V0KHcsJCk6RGkoaSxjLHcpKSl9KSksdiYmdihpLHcpLF98fGJ8fHcoKSl9fWZ1bmN0aW9uIEhpKGUpe3JldHVybiJudW1iZXIiPT10eXBlb2YgZSYmIWlzTmFOKGUpfWZ1bmN0aW9uIEJpKGUpe2lmKHQoZSkpcmV0dXJuITE7dmFyIHI9ZS5mbnM7cmV0dXJuIG4ocik/QmkoQXJyYXkuaXNBcnJheShyKT9yWzBdOnIpOihlLl9sZW5ndGh8fGUubGVuZ3RoKT4xfWZ1bmN0aW9uIFVpKGUsdCl7ITAhPT10LmRhdGEuc2hvdyYmUGkodCl9dmFyIHppPWZ1bmN0aW9uKGUpe3ZhciBvLGEscz17fSxjPWUubW9kdWxlcyx1PWUubm9kZU9wcztmb3Iobz0wO288cnIubGVuZ3RoOysrbylmb3Ioc1tycltvXV09W10sYT0wO2E8Yy5sZW5ndGg7KythKW4oY1thXVtycltvXV0pJiZzW3JyW29dXS5wdXNoKGNbYV1bcnJbb11dKTtmdW5jdGlvbiBsKGUpe3ZhciB0PXUucGFyZW50Tm9kZShlKTtuKHQpJiZ1LnJlbW92ZUNoaWxkKHQsZSl9ZnVuY3Rpb24gZihlLHQsaSxvLGEsYyxsKXtpZihuKGUuZWxtKSYmbihjKSYmKGU9Y1tsXT1tZShlKSksZS5pc1Jvb3RJbnNlcnQ9IWEsIWZ1bmN0aW9uKGUsdCxpLG8pe3ZhciBhPWUuZGF0YTtpZihuKGEpKXt2YXIgYz1uKGUuY29tcG9uZW50SW5zdGFuY2UpJiZhLmtlZXBBbGl2ZTtpZihuKGE9YS5ob29rKSYmbihhPWEuaW5pdCkmJmEoZSwhMSksbihlLmNvbXBvbmVudEluc3RhbmNlKSlyZXR1cm4gZChlLHQpLHYoaSxlLmVsbSxvKSxyKGMpJiZmdW5jdGlvbihlLHQscixpKXtmb3IodmFyIG8sYT1lO2EuY29tcG9uZW50SW5zdGFuY2U7KWlmKGE9YS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUsbihvPWEuZGF0YSkmJm4obz1vLnRyYW5zaXRpb24pKXtmb3Iobz0wO288cy5hY3RpdmF0ZS5sZW5ndGg7KytvKXMuYWN0aXZhdGVbb10obnIsYSk7dC5wdXNoKGEpO2JyZWFrfXYocixlLmVsbSxpKX0oZSx0LGksbyksITB9fShlLHQsaSxvKSl7dmFyIGY9ZS5kYXRhLHA9ZS5jaGlsZHJlbixtPWUudGFnO24obSk/KGUuZWxtPWUubnM/dS5jcmVhdGVFbGVtZW50TlMoZS5ucyxtKTp1LmNyZWF0ZUVsZW1lbnQobSxlKSxnKGUpLGgoZSxwLHQpLG4oZikmJnkoZSx0KSx2KGksZS5lbG0sbykpOnIoZS5pc0NvbW1lbnQpPyhlLmVsbT11LmNyZWF0ZUNvbW1lbnQoZS50ZXh0KSx2KGksZS5lbG0sbykpOihlLmVsbT11LmNyZWF0ZVRleHROb2RlKGUudGV4dCksdihpLGUuZWxtLG8pKX19ZnVuY3Rpb24gZChlLHQpe24oZS5kYXRhLnBlbmRpbmdJbnNlcnQpJiYodC5wdXNoLmFwcGx5KHQsZS5kYXRhLnBlbmRpbmdJbnNlcnQpLGUuZGF0YS5wZW5kaW5nSW5zZXJ0PW51bGwpLGUuZWxtPWUuY29tcG9uZW50SW5zdGFuY2UuJGVsLG0oZSk/KHkoZSx0KSxnKGUpKToodHIoZSksdC5wdXNoKGUpKX1mdW5jdGlvbiB2KGUsdCxyKXtuKGUpJiYobihyKT91LnBhcmVudE5vZGUocik9PT1lJiZ1Lmluc2VydEJlZm9yZShlLHQscik6dS5hcHBlbmRDaGlsZChlLHQpKX1mdW5jdGlvbiBoKGUsdCxuKXtpZihBcnJheS5pc0FycmF5KHQpKWZvcih2YXIgcj0wO3I8dC5sZW5ndGg7KytyKWYodFtyXSxuLGUuZWxtLG51bGwsITAsdCxyKTtlbHNlIGkoZS50ZXh0KSYmdS5hcHBlbmRDaGlsZChlLmVsbSx1LmNyZWF0ZVRleHROb2RlKFN0cmluZyhlLnRleHQpKSl9ZnVuY3Rpb24gbShlKXtmb3IoO2UuY29tcG9uZW50SW5zdGFuY2U7KWU9ZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7cmV0dXJuIG4oZS50YWcpfWZ1bmN0aW9uIHkoZSx0KXtmb3IodmFyIHI9MDtyPHMuY3JlYXRlLmxlbmd0aDsrK3Ipcy5jcmVhdGVbcl0obnIsZSk7bihvPWUuZGF0YS5ob29rKSYmKG4oby5jcmVhdGUpJiZvLmNyZWF0ZShucixlKSxuKG8uaW5zZXJ0KSYmdC5wdXNoKGUpKX1mdW5jdGlvbiBnKGUpe3ZhciB0O2lmKG4odD1lLmZuU2NvcGVJZCkpdS5zZXRTdHlsZVNjb3BlKGUuZWxtLHQpO2Vsc2UgZm9yKHZhciByPWU7cjspbih0PXIuY29udGV4dCkmJm4odD10LiRvcHRpb25zLl9zY29wZUlkKSYmdS5zZXRTdHlsZVNjb3BlKGUuZWxtLHQpLHI9ci5wYXJlbnQ7bih0PVd0KSYmdCE9PWUuY29udGV4dCYmdCE9PWUuZm5Db250ZXh0JiZuKHQ9dC4kb3B0aW9ucy5fc2NvcGVJZCkmJnUuc2V0U3R5bGVTY29wZShlLmVsbSx0KX1mdW5jdGlvbiBfKGUsdCxuLHIsaSxvKXtmb3IoO3I8PWk7KytyKWYobltyXSxvLGUsdCwhMSxuLHIpfWZ1bmN0aW9uIGIoZSl7dmFyIHQscixpPWUuZGF0YTtpZihuKGkpKWZvcihuKHQ9aS5ob29rKSYmbih0PXQuZGVzdHJveSkmJnQoZSksdD0wO3Q8cy5kZXN0cm95Lmxlbmd0aDsrK3Qpcy5kZXN0cm95W3RdKGUpO2lmKG4odD1lLmNoaWxkcmVuKSlmb3Iocj0wO3I8ZS5jaGlsZHJlbi5sZW5ndGg7KytyKWIoZS5jaGlsZHJlbltyXSl9ZnVuY3Rpb24gJChlLHQscil7Zm9yKDt0PD1yOysrdCl7dmFyIGk9ZVt0XTtuKGkpJiYobihpLnRhZyk/KHcoaSksYihpKSk6bChpLmVsbSkpfX1mdW5jdGlvbiB3KGUsdCl7aWYobih0KXx8bihlLmRhdGEpKXt2YXIgcixpPXMucmVtb3ZlLmxlbmd0aCsxO2ZvcihuKHQpP3QubGlzdGVuZXJzKz1pOnQ9ZnVuY3Rpb24oZSx0KXtmdW5jdGlvbiBuKCl7MD09LS1uLmxpc3RlbmVycyYmbChlKX1yZXR1cm4gbi5saXN0ZW5lcnM9dCxufShlLmVsbSxpKSxuKHI9ZS5jb21wb25lbnRJbnN0YW5jZSkmJm4ocj1yLl92bm9kZSkmJm4oci5kYXRhKSYmdyhyLHQpLHI9MDtyPHMucmVtb3ZlLmxlbmd0aDsrK3Ipcy5yZW1vdmVbcl0oZSx0KTtuKHI9ZS5kYXRhLmhvb2spJiZuKHI9ci5yZW1vdmUpP3IoZSx0KTp0KCl9ZWxzZSBsKGUuZWxtKX1mdW5jdGlvbiBDKGUsdCxyLGkpe2Zvcih2YXIgbz1yO288aTtvKyspe3ZhciBhPXRbb107aWYobihhKSYmaXIoZSxhKSlyZXR1cm4gb319ZnVuY3Rpb24geChlLGksbyxhLGMsbCl7aWYoZSE9PWkpe24oaS5lbG0pJiZuKGEpJiYoaT1hW2NdPW1lKGkpKTt2YXIgcD1pLmVsbT1lLmVsbTtpZihyKGUuaXNBc3luY1BsYWNlaG9sZGVyKSluKGkuYXN5bmNGYWN0b3J5LnJlc29sdmVkKT9PKGUuZWxtLGksbyk6aS5pc0FzeW5jUGxhY2Vob2xkZXI9ITA7ZWxzZSBpZihyKGkuaXNTdGF0aWMpJiZyKGUuaXNTdGF0aWMpJiZpLmtleT09PWUua2V5JiYocihpLmlzQ2xvbmVkKXx8cihpLmlzT25jZSkpKWkuY29tcG9uZW50SW5zdGFuY2U9ZS5jb21wb25lbnRJbnN0YW5jZTtlbHNle3ZhciBkLHY9aS5kYXRhO24odikmJm4oZD12Lmhvb2spJiZuKGQ9ZC5wcmVwYXRjaCkmJmQoZSxpKTt2YXIgaD1lLmNoaWxkcmVuLHk9aS5jaGlsZHJlbjtpZihuKHYpJiZtKGkpKXtmb3IoZD0wO2Q8cy51cGRhdGUubGVuZ3RoOysrZClzLnVwZGF0ZVtkXShlLGkpO24oZD12Lmhvb2spJiZuKGQ9ZC51cGRhdGUpJiZkKGUsaSl9dChpLnRleHQpP24oaCkmJm4oeSk/aCE9PXkmJmZ1bmN0aW9uKGUscixpLG8sYSl7Zm9yKHZhciBzLGMsbCxwPTAsZD0wLHY9ci5sZW5ndGgtMSxoPXJbMF0sbT1yW3ZdLHk9aS5sZW5ndGgtMSxnPWlbMF0sYj1pW3ldLHc9IWE7cDw9diYmZDw9eTspdChoKT9oPXJbKytwXTp0KG0pP209clstLXZdOmlyKGgsZyk/KHgoaCxnLG8saSxkKSxoPXJbKytwXSxnPWlbKytkXSk6aXIobSxiKT8oeChtLGIsbyxpLHkpLG09clstLXZdLGI9aVstLXldKTppcihoLGIpPyh4KGgsYixvLGkseSksdyYmdS5pbnNlcnRCZWZvcmUoZSxoLmVsbSx1Lm5leHRTaWJsaW5nKG0uZWxtKSksaD1yWysrcF0sYj1pWy0teV0pOmlyKG0sZyk/KHgobSxnLG8saSxkKSx3JiZ1Lmluc2VydEJlZm9yZShlLG0uZWxtLGguZWxtKSxtPXJbLS12XSxnPWlbKytkXSk6KHQocykmJihzPW9yKHIscCx2KSksdChjPW4oZy5rZXkpP3NbZy5rZXldOkMoZyxyLHAsdikpP2YoZyxvLGUsaC5lbG0sITEsaSxkKTppcihsPXJbY10sZyk/KHgobCxnLG8saSxkKSxyW2NdPXZvaWQgMCx3JiZ1Lmluc2VydEJlZm9yZShlLGwuZWxtLGguZWxtKSk6ZihnLG8sZSxoLmVsbSwhMSxpLGQpLGc9aVsrK2RdKTtwPnY/XyhlLHQoaVt5KzFdKT9udWxsOmlbeSsxXS5lbG0saSxkLHksbyk6ZD55JiYkKHIscCx2KX0ocCxoLHksbyxsKTpuKHkpPyhuKGUudGV4dCkmJnUuc2V0VGV4dENvbnRlbnQocCwiIiksXyhwLG51bGwseSwwLHkubGVuZ3RoLTEsbykpOm4oaCk/JChoLDAsaC5sZW5ndGgtMSk6bihlLnRleHQpJiZ1LnNldFRleHRDb250ZW50KHAsIiIpOmUudGV4dCE9PWkudGV4dCYmdS5zZXRUZXh0Q29udGVudChwLGkudGV4dCksbih2KSYmbihkPXYuaG9vaykmJm4oZD1kLnBvc3RwYXRjaCkmJmQoZSxpKX19fWZ1bmN0aW9uIGsoZSx0LGkpe2lmKHIoaSkmJm4oZS5wYXJlbnQpKWUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydD10O2Vsc2UgZm9yKHZhciBvPTA7bzx0Lmxlbmd0aDsrK28pdFtvXS5kYXRhLmhvb2suaW5zZXJ0KHRbb10pfXZhciBBPXAoImF0dHJzLGNsYXNzLHN0YXRpY0NsYXNzLHN0YXRpY1N0eWxlLGtleSIpO2Z1bmN0aW9uIE8oZSx0LGksbyl7dmFyIGEscz10LnRhZyxjPXQuZGF0YSx1PXQuY2hpbGRyZW47aWYobz1vfHxjJiZjLnByZSx0LmVsbT1lLHIodC5pc0NvbW1lbnQpJiZuKHQuYXN5bmNGYWN0b3J5KSlyZXR1cm4gdC5pc0FzeW5jUGxhY2Vob2xkZXI9ITAsITA7aWYobihjKSYmKG4oYT1jLmhvb2spJiZuKGE9YS5pbml0KSYmYSh0LCEwKSxuKGE9dC5jb21wb25lbnRJbnN0YW5jZSkpKXJldHVybiBkKHQsaSksITA7aWYobihzKSl7aWYobih1KSlpZihlLmhhc0NoaWxkTm9kZXMoKSlpZihuKGE9YykmJm4oYT1hLmRvbVByb3BzKSYmbihhPWEuaW5uZXJIVE1MKSl7aWYoYSE9PWUuaW5uZXJIVE1MKXJldHVybiExfWVsc2V7Zm9yKHZhciBsPSEwLGY9ZS5maXJzdENoaWxkLHA9MDtwPHUubGVuZ3RoO3ArKyl7aWYoIWZ8fCFPKGYsdVtwXSxpLG8pKXtsPSExO2JyZWFrfWY9Zi5uZXh0U2libGluZ31pZighbHx8ZilyZXR1cm4hMX1lbHNlIGgodCx1LGkpO2lmKG4oYykpe3ZhciB2PSExO2Zvcih2YXIgbSBpbiBjKWlmKCFBKG0pKXt2PSEwLHkodCxpKTticmVha30hdiYmYy5jbGFzcyYmZXQoYy5jbGFzcyl9fWVsc2UgZS5kYXRhIT09dC50ZXh0JiYoZS5kYXRhPXQudGV4dCk7cmV0dXJuITB9cmV0dXJuIGZ1bmN0aW9uKGUsaSxvLGEpe2lmKCF0KGkpKXt2YXIgYyxsPSExLHA9W107aWYodChlKSlsPSEwLGYoaSxwKTtlbHNle3ZhciBkPW4oZS5ub2RlVHlwZSk7aWYoIWQmJmlyKGUsaSkpeChlLGkscCxudWxsLG51bGwsYSk7ZWxzZXtpZihkKXtpZigxPT09ZS5ub2RlVHlwZSYmZS5oYXNBdHRyaWJ1dGUoTCkmJihlLnJlbW92ZUF0dHJpYnV0ZShMKSxvPSEwKSxyKG8pJiZPKGUsaSxwKSlyZXR1cm4gayhpLHAsITApLGU7Yz1lLGU9bmV3IHBlKHUudGFnTmFtZShjKS50b0xvd2VyQ2FzZSgpLHt9LFtdLHZvaWQgMCxjKX12YXIgdj1lLmVsbSxoPXUucGFyZW50Tm9kZSh2KTtpZihmKGkscCx2Ll9sZWF2ZUNiP251bGw6aCx1Lm5leHRTaWJsaW5nKHYpKSxuKGkucGFyZW50KSlmb3IodmFyIHk9aS5wYXJlbnQsZz1tKGkpO3k7KXtmb3IodmFyIF89MDtfPHMuZGVzdHJveS5sZW5ndGg7KytfKXMuZGVzdHJveVtfXSh5KTtpZih5LmVsbT1pLmVsbSxnKXtmb3IodmFyIHc9MDt3PHMuY3JlYXRlLmxlbmd0aDsrK3cpcy5jcmVhdGVbd10obnIseSk7dmFyIEM9eS5kYXRhLmhvb2suaW5zZXJ0O2lmKEMubWVyZ2VkKWZvcih2YXIgQT0xO0E8Qy5mbnMubGVuZ3RoO0ErKylDLmZuc1tBXSgpfWVsc2UgdHIoeSk7eT15LnBhcmVudH1uKGgpPyQoW2VdLDAsMCk6bihlLnRhZykmJmIoZSl9fXJldHVybiBrKGkscCxsKSxpLmVsbX1uKGUpJiZiKGUpfX0oe25vZGVPcHM6UW4sbW9kdWxlczpbbXIseHIsbmksb2ksbWksej97Y3JlYXRlOlVpLGFjdGl2YXRlOlVpLHJlbW92ZTpmdW5jdGlvbihlLHQpeyEwIT09ZS5kYXRhLnNob3c/UmkoZSx0KTp0KCl9fTp7fV0uY29uY2F0KHByKX0pO1cmJmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoInNlbGVjdGlvbmNoYW5nZSIsZnVuY3Rpb24oKXt2YXIgZT1kb2N1bWVudC5hY3RpdmVFbGVtZW50O2UmJmUudm1vZGVsJiZYaShlLCJpbnB1dCIpfSk7dmFyIFZpPXtpbnNlcnRlZDpmdW5jdGlvbihlLHQsbixyKXsic2VsZWN0Ij09PW4udGFnPyhyLmVsbSYmIXIuZWxtLl92T3B0aW9ucz9pdChuLCJwb3N0cGF0Y2giLGZ1bmN0aW9uKCl7VmkuY29tcG9uZW50VXBkYXRlZChlLHQsbil9KTpLaShlLHQsbi5jb250ZXh0KSxlLl92T3B0aW9ucz1bXS5tYXAuY2FsbChlLm9wdGlvbnMsV2kpKTooInRleHRhcmVhIj09PW4udGFnfHxYbihlLnR5cGUpKSYmKGUuX3ZNb2RpZmllcnM9dC5tb2RpZmllcnMsdC5tb2RpZmllcnMubGF6eXx8KGUuYWRkRXZlbnRMaXN0ZW5lcigiY29tcG9zaXRpb25zdGFydCIsWmkpLGUuYWRkRXZlbnRMaXN0ZW5lcigiY29tcG9zaXRpb25lbmQiLEdpKSxlLmFkZEV2ZW50TGlzdGVuZXIoImNoYW5nZSIsR2kpLFcmJihlLnZtb2RlbD0hMCkpKX0sY29tcG9uZW50VXBkYXRlZDpmdW5jdGlvbihlLHQsbil7aWYoInNlbGVjdCI9PT1uLnRhZyl7S2koZSx0LG4uY29udGV4dCk7dmFyIHI9ZS5fdk9wdGlvbnMsaT1lLl92T3B0aW9ucz1bXS5tYXAuY2FsbChlLm9wdGlvbnMsV2kpO2lmKGkuc29tZShmdW5jdGlvbihlLHQpe3JldHVybiFOKGUsclt0XSl9KSkoZS5tdWx0aXBsZT90LnZhbHVlLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIHFpKGUsaSl9KTp0LnZhbHVlIT09dC5vbGRWYWx1ZSYmcWkodC52YWx1ZSxpKSkmJlhpKGUsImNoYW5nZSIpfX19O2Z1bmN0aW9uIEtpKGUsdCxuKXtKaShlLHQsbiksKHF8fFopJiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7SmkoZSx0LG4pfSwwKX1mdW5jdGlvbiBKaShlLHQsbil7dmFyIHI9dC52YWx1ZSxpPWUubXVsdGlwbGU7aWYoIWl8fEFycmF5LmlzQXJyYXkocikpe2Zvcih2YXIgbyxhLHM9MCxjPWUub3B0aW9ucy5sZW5ndGg7czxjO3MrKylpZihhPWUub3B0aW9uc1tzXSxpKW89aihyLFdpKGEpKT4tMSxhLnNlbGVjdGVkIT09byYmKGEuc2VsZWN0ZWQ9byk7ZWxzZSBpZihOKFdpKGEpLHIpKXJldHVybiB2b2lkKGUuc2VsZWN0ZWRJbmRleCE9PXMmJihlLnNlbGVjdGVkSW5kZXg9cykpO2l8fChlLnNlbGVjdGVkSW5kZXg9LTEpfX1mdW5jdGlvbiBxaShlLHQpe3JldHVybiB0LmV2ZXJ5KGZ1bmN0aW9uKHQpe3JldHVybiFOKHQsZSl9KX1mdW5jdGlvbiBXaShlKXtyZXR1cm4iX3ZhbHVlImluIGU/ZS5fdmFsdWU6ZS52YWx1ZX1mdW5jdGlvbiBaaShlKXtlLnRhcmdldC5jb21wb3Npbmc9ITB9ZnVuY3Rpb24gR2koZSl7ZS50YXJnZXQuY29tcG9zaW5nJiYoZS50YXJnZXQuY29tcG9zaW5nPSExLFhpKGUudGFyZ2V0LCJpbnB1dCIpKX1mdW5jdGlvbiBYaShlLHQpe3ZhciBuPWRvY3VtZW50LmNyZWF0ZUV2ZW50KCJIVE1MRXZlbnRzIik7bi5pbml0RXZlbnQodCwhMCwhMCksZS5kaXNwYXRjaEV2ZW50KG4pfWZ1bmN0aW9uIFlpKGUpe3JldHVybiFlLmNvbXBvbmVudEluc3RhbmNlfHxlLmRhdGEmJmUuZGF0YS50cmFuc2l0aW9uP2U6WWkoZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpfXZhciBRaT17bW9kZWw6Vmksc2hvdzp7YmluZDpmdW5jdGlvbihlLHQsbil7dmFyIHI9dC52YWx1ZSxpPShuPVlpKG4pKS5kYXRhJiZuLmRhdGEudHJhbnNpdGlvbixvPWUuX192T3JpZ2luYWxEaXNwbGF5PSJub25lIj09PWUuc3R5bGUuZGlzcGxheT8iIjplLnN0eWxlLmRpc3BsYXk7ciYmaT8obi5kYXRhLnNob3c9ITAsUGkobixmdW5jdGlvbigpe2Uuc3R5bGUuZGlzcGxheT1vfSkpOmUuc3R5bGUuZGlzcGxheT1yP286Im5vbmUifSx1cGRhdGU6ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQudmFsdWU7IXIhPSF0Lm9sZFZhbHVlJiYoKG49WWkobikpLmRhdGEmJm4uZGF0YS50cmFuc2l0aW9uPyhuLmRhdGEuc2hvdz0hMCxyP1BpKG4sZnVuY3Rpb24oKXtlLnN0eWxlLmRpc3BsYXk9ZS5fX3ZPcmlnaW5hbERpc3BsYXl9KTpSaShuLGZ1bmN0aW9uKCl7ZS5zdHlsZS5kaXNwbGF5PSJub25lIn0pKTplLnN0eWxlLmRpc3BsYXk9cj9lLl9fdk9yaWdpbmFsRGlzcGxheToibm9uZSIpfSx1bmJpbmQ6ZnVuY3Rpb24oZSx0LG4scixpKXtpfHwoZS5zdHlsZS5kaXNwbGF5PWUuX192T3JpZ2luYWxEaXNwbGF5KX19fSxlbz17bmFtZTpTdHJpbmcsYXBwZWFyOkJvb2xlYW4sY3NzOkJvb2xlYW4sbW9kZTpTdHJpbmcsdHlwZTpTdHJpbmcsZW50ZXJDbGFzczpTdHJpbmcsbGVhdmVDbGFzczpTdHJpbmcsZW50ZXJUb0NsYXNzOlN0cmluZyxsZWF2ZVRvQ2xhc3M6U3RyaW5nLGVudGVyQWN0aXZlQ2xhc3M6U3RyaW5nLGxlYXZlQWN0aXZlQ2xhc3M6U3RyaW5nLGFwcGVhckNsYXNzOlN0cmluZyxhcHBlYXJBY3RpdmVDbGFzczpTdHJpbmcsYXBwZWFyVG9DbGFzczpTdHJpbmcsZHVyYXRpb246W051bWJlcixTdHJpbmcsT2JqZWN0XX07ZnVuY3Rpb24gdG8oZSl7dmFyIHQ9ZSYmZS5jb21wb25lbnRPcHRpb25zO3JldHVybiB0JiZ0LkN0b3Iub3B0aW9ucy5hYnN0cmFjdD90byh6dCh0LmNoaWxkcmVuKSk6ZX1mdW5jdGlvbiBubyhlKXt2YXIgdD17fSxuPWUuJG9wdGlvbnM7Zm9yKHZhciByIGluIG4ucHJvcHNEYXRhKXRbcl09ZVtyXTt2YXIgaT1uLl9wYXJlbnRMaXN0ZW5lcnM7Zm9yKHZhciBvIGluIGkpdFtiKG8pXT1pW29dO3JldHVybiB0fWZ1bmN0aW9uIHJvKGUsdCl7aWYoL1xkLWtlZXAtYWxpdmUkLy50ZXN0KHQudGFnKSlyZXR1cm4gZSgia2VlcC1hbGl2ZSIse3Byb3BzOnQuY29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGF9KX12YXIgaW89ZnVuY3Rpb24oZSl7cmV0dXJuIGUudGFnfHxVdChlKX0sb289ZnVuY3Rpb24oZSl7cmV0dXJuInNob3ciPT09ZS5uYW1lfSxhbz17bmFtZToidHJhbnNpdGlvbiIscHJvcHM6ZW8sYWJzdHJhY3Q6ITAscmVuZGVyOmZ1bmN0aW9uKGUpe3ZhciB0PXRoaXMsbj10aGlzLiRzbG90cy5kZWZhdWx0O2lmKG4mJihuPW4uZmlsdGVyKGlvKSkubGVuZ3RoKXt2YXIgcj10aGlzLm1vZGUsbz1uWzBdO2lmKGZ1bmN0aW9uKGUpe2Zvcig7ZT1lLnBhcmVudDspaWYoZS5kYXRhLnRyYW5zaXRpb24pcmV0dXJuITB9KHRoaXMuJHZub2RlKSlyZXR1cm4gbzt2YXIgYT10byhvKTtpZighYSlyZXR1cm4gbztpZih0aGlzLl9sZWF2aW5nKXJldHVybiBybyhlLG8pO3ZhciBzPSJfX3RyYW5zaXRpb24tIit0aGlzLl91aWQrIi0iO2Eua2V5PW51bGw9PWEua2V5P2EuaXNDb21tZW50P3MrImNvbW1lbnQiOnMrYS50YWc6aShhLmtleSk/MD09PVN0cmluZyhhLmtleSkuaW5kZXhPZihzKT9hLmtleTpzK2Eua2V5OmEua2V5O3ZhciBjPShhLmRhdGF8fChhLmRhdGE9e30pKS50cmFuc2l0aW9uPW5vKHRoaXMpLHU9dGhpcy5fdm5vZGUsbD10byh1KTtpZihhLmRhdGEuZGlyZWN0aXZlcyYmYS5kYXRhLmRpcmVjdGl2ZXMuc29tZShvbykmJihhLmRhdGEuc2hvdz0hMCksbCYmbC5kYXRhJiYhZnVuY3Rpb24oZSx0KXtyZXR1cm4gdC5rZXk9PT1lLmtleSYmdC50YWc9PT1lLnRhZ30oYSxsKSYmIVV0KGwpJiYoIWwuY29tcG9uZW50SW5zdGFuY2V8fCFsLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpKXt2YXIgZj1sLmRhdGEudHJhbnNpdGlvbj1BKHt9LGMpO2lmKCJvdXQtaW4iPT09cilyZXR1cm4gdGhpcy5fbGVhdmluZz0hMCxpdChmLCJhZnRlckxlYXZlIixmdW5jdGlvbigpe3QuX2xlYXZpbmc9ITEsdC4kZm9yY2VVcGRhdGUoKX0pLHJvKGUsbyk7aWYoImluLW91dCI9PT1yKXtpZihVdChhKSlyZXR1cm4gdTt2YXIgcCxkPWZ1bmN0aW9uKCl7cCgpfTtpdChjLCJhZnRlckVudGVyIixkKSxpdChjLCJlbnRlckNhbmNlbGxlZCIsZCksaXQoZiwiZGVsYXlMZWF2ZSIsZnVuY3Rpb24oZSl7cD1lfSl9fXJldHVybiBvfX19LHNvPUEoe3RhZzpTdHJpbmcsbW92ZUNsYXNzOlN0cmluZ30sZW8pO2Z1bmN0aW9uIGNvKGUpe2UuZWxtLl9tb3ZlQ2ImJmUuZWxtLl9tb3ZlQ2IoKSxlLmVsbS5fZW50ZXJDYiYmZS5lbG0uX2VudGVyQ2IoKX1mdW5jdGlvbiB1byhlKXtlLmRhdGEubmV3UG9zPWUuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpfWZ1bmN0aW9uIGxvKGUpe3ZhciB0PWUuZGF0YS5wb3Msbj1lLmRhdGEubmV3UG9zLHI9dC5sZWZ0LW4ubGVmdCxpPXQudG9wLW4udG9wO2lmKHJ8fGkpe2UuZGF0YS5tb3ZlZD0hMDt2YXIgbz1lLmVsbS5zdHlsZTtvLnRyYW5zZm9ybT1vLldlYmtpdFRyYW5zZm9ybT0idHJhbnNsYXRlKCIrcisicHgsIitpKyJweCkiLG8udHJhbnNpdGlvbkR1cmF0aW9uPSIwcyJ9fWRlbGV0ZSBzby5tb2RlO3ZhciBmbz17VHJhbnNpdGlvbjphbyxUcmFuc2l0aW9uR3JvdXA6e3Byb3BzOnNvLGJlZm9yZU1vdW50OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcyx0PXRoaXMuX3VwZGF0ZTt0aGlzLl91cGRhdGU9ZnVuY3Rpb24obixyKXt2YXIgaT1adChlKTtlLl9fcGF0Y2hfXyhlLl92bm9kZSxlLmtlcHQsITEsITApLGUuX3Zub2RlPWUua2VwdCxpKCksdC5jYWxsKGUsbixyKX19LHJlbmRlcjpmdW5jdGlvbihlKXtmb3IodmFyIHQ9dGhpcy50YWd8fHRoaXMuJHZub2RlLmRhdGEudGFnfHwic3BhbiIsbj1PYmplY3QuY3JlYXRlKG51bGwpLHI9dGhpcy5wcmV2Q2hpbGRyZW49dGhpcy5jaGlsZHJlbixpPXRoaXMuJHNsb3RzLmRlZmF1bHR8fFtdLG89dGhpcy5jaGlsZHJlbj1bXSxhPW5vKHRoaXMpLHM9MDtzPGkubGVuZ3RoO3MrKyl7dmFyIGM9aVtzXTtjLnRhZyYmbnVsbCE9Yy5rZXkmJjAhPT1TdHJpbmcoYy5rZXkpLmluZGV4T2YoIl9fdmxpc3QiKSYmKG8ucHVzaChjKSxuW2Mua2V5XT1jLChjLmRhdGF8fChjLmRhdGE9e30pKS50cmFuc2l0aW9uPWEpfWlmKHIpe2Zvcih2YXIgdT1bXSxsPVtdLGY9MDtmPHIubGVuZ3RoO2YrKyl7dmFyIHA9cltmXTtwLmRhdGEudHJhbnNpdGlvbj1hLHAuZGF0YS5wb3M9cC5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksbltwLmtleV0/dS5wdXNoKHApOmwucHVzaChwKX10aGlzLmtlcHQ9ZSh0LG51bGwsdSksdGhpcy5yZW1vdmVkPWx9cmV0dXJuIGUodCxudWxsLG8pfSx1cGRhdGVkOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5wcmV2Q2hpbGRyZW4sdD10aGlzLm1vdmVDbGFzc3x8KHRoaXMubmFtZXx8InYiKSsiLW1vdmUiO2UubGVuZ3RoJiZ0aGlzLmhhc01vdmUoZVswXS5lbG0sdCkmJihlLmZvckVhY2goY28pLGUuZm9yRWFjaCh1byksZS5mb3JFYWNoKGxvKSx0aGlzLl9yZWZsb3c9ZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQsZS5mb3JFYWNoKGZ1bmN0aW9uKGUpe2lmKGUuZGF0YS5tb3ZlZCl7dmFyIG49ZS5lbG0scj1uLnN0eWxlO05pKG4sdCksci50cmFuc2Zvcm09ci5XZWJraXRUcmFuc2Zvcm09ci50cmFuc2l0aW9uRHVyYXRpb249IiIsbi5hZGRFdmVudExpc3RlbmVyKEFpLG4uX21vdmVDYj1mdW5jdGlvbiBlKHIpe3ImJnIudGFyZ2V0IT09bnx8ciYmIS90cmFuc2Zvcm0kLy50ZXN0KHIucHJvcGVydHlOYW1lKXx8KG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihBaSxlKSxuLl9tb3ZlQ2I9bnVsbCxqaShuLHQpKX0pfX0pKX0sbWV0aG9kczp7aGFzTW92ZTpmdW5jdGlvbihlLHQpe2lmKCF3aSlyZXR1cm4hMTtpZih0aGlzLl9oYXNNb3ZlKXJldHVybiB0aGlzLl9oYXNNb3ZlO3ZhciBuPWUuY2xvbmVOb2RlKCk7ZS5fdHJhbnNpdGlvbkNsYXNzZXMmJmUuX3RyYW5zaXRpb25DbGFzc2VzLmZvckVhY2goZnVuY3Rpb24oZSl7X2kobixlKX0pLGdpKG4sdCksbi5zdHlsZS5kaXNwbGF5PSJub25lIix0aGlzLiRlbC5hcHBlbmRDaGlsZChuKTt2YXIgcj1NaShuKTtyZXR1cm4gdGhpcy4kZWwucmVtb3ZlQ2hpbGQobiksdGhpcy5faGFzTW92ZT1yLmhhc1RyYW5zZm9ybX19fX07d24uY29uZmlnLm11c3RVc2VQcm9wPWpuLHduLmNvbmZpZy5pc1Jlc2VydmVkVGFnPVduLHduLmNvbmZpZy5pc1Jlc2VydmVkQXR0cj1Fbix3bi5jb25maWcuZ2V0VGFnTmFtZXNwYWNlPVpuLHduLmNvbmZpZy5pc1Vua25vd25FbGVtZW50PWZ1bmN0aW9uKGUpe2lmKCF6KXJldHVybiEwO2lmKFduKGUpKXJldHVybiExO2lmKGU9ZS50b0xvd2VyQ2FzZSgpLG51bGwhPUduW2VdKXJldHVybiBHbltlXTt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KGUpO3JldHVybiBlLmluZGV4T2YoIi0iKT4tMT9HbltlXT10LmNvbnN0cnVjdG9yPT09d2luZG93LkhUTUxVbmtub3duRWxlbWVudHx8dC5jb25zdHJ1Y3Rvcj09PXdpbmRvdy5IVE1MRWxlbWVudDpHbltlXT0vSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KHQudG9TdHJpbmcoKSl9LEEod24ub3B0aW9ucy5kaXJlY3RpdmVzLFFpKSxBKHduLm9wdGlvbnMuY29tcG9uZW50cyxmbyksd24ucHJvdG90eXBlLl9fcGF0Y2hfXz16P3ppOlMsd24ucHJvdG90eXBlLiRtb3VudD1mdW5jdGlvbihlLHQpe3JldHVybiBmdW5jdGlvbihlLHQsbil7dmFyIHI7cmV0dXJuIGUuJGVsPXQsZS4kb3B0aW9ucy5yZW5kZXJ8fChlLiRvcHRpb25zLnJlbmRlcj12ZSksWXQoZSwiYmVmb3JlTW91bnQiKSxyPWZ1bmN0aW9uKCl7ZS5fdXBkYXRlKGUuX3JlbmRlcigpLG4pfSxuZXcgZm4oZSxyLFMse2JlZm9yZTpmdW5jdGlvbigpe2UuX2lzTW91bnRlZCYmIWUuX2lzRGVzdHJveWVkJiZZdChlLCJiZWZvcmVVcGRhdGUiKX19LCEwKSxuPSExLG51bGw9PWUuJHZub2RlJiYoZS5faXNNb3VudGVkPSEwLFl0KGUsIm1vdW50ZWQiKSksZX0odGhpcyxlPWUmJno/WW4oZSk6dm9pZCAwLHQpfSx6JiZzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7Ri5kZXZ0b29scyYmbmUmJm5lLmVtaXQoImluaXQiLHduKX0sMCk7dmFyIHBvPS9ce1x7KCg/Oi58XHI/XG4pKz8pXH1cfS9nLHZvPS9bLS4qKz9eJHt9KCl8W1xdXC9cXF0vZyxobz1nKGZ1bmN0aW9uKGUpe3ZhciB0PWVbMF0ucmVwbGFjZSh2bywiXFwkJiIpLG49ZVsxXS5yZXBsYWNlKHZvLCJcXCQmIik7cmV0dXJuIG5ldyBSZWdFeHAodCsiKCg/Oi58XFxuKSs/KSIrbiwiZyIpfSk7dmFyIG1vPXtzdGF0aWNLZXlzOlsic3RhdGljQ2xhc3MiXSx0cmFuc2Zvcm1Ob2RlOmZ1bmN0aW9uKGUsdCl7dC53YXJuO3ZhciBuPUZyKGUsImNsYXNzIik7biYmKGUuc3RhdGljQ2xhc3M9SlNPTi5zdHJpbmdpZnkobikpO3ZhciByPUlyKGUsImNsYXNzIiwhMSk7ciYmKGUuY2xhc3NCaW5kaW5nPXIpfSxnZW5EYXRhOmZ1bmN0aW9uKGUpe3ZhciB0PSIiO3JldHVybiBlLnN0YXRpY0NsYXNzJiYodCs9InN0YXRpY0NsYXNzOiIrZS5zdGF0aWNDbGFzcysiLCIpLGUuY2xhc3NCaW5kaW5nJiYodCs9ImNsYXNzOiIrZS5jbGFzc0JpbmRpbmcrIiwiKSx0fX07dmFyIHlvLGdvPXtzdGF0aWNLZXlzOlsic3RhdGljU3R5bGUiXSx0cmFuc2Zvcm1Ob2RlOmZ1bmN0aW9uKGUsdCl7dC53YXJuO3ZhciBuPUZyKGUsInN0eWxlIik7biYmKGUuc3RhdGljU3R5bGU9SlNPTi5zdHJpbmdpZnkoYWkobikpKTt2YXIgcj1JcihlLCJzdHlsZSIsITEpO3ImJihlLnN0eWxlQmluZGluZz1yKX0sZ2VuRGF0YTpmdW5jdGlvbihlKXt2YXIgdD0iIjtyZXR1cm4gZS5zdGF0aWNTdHlsZSYmKHQrPSJzdGF0aWNTdHlsZToiK2Uuc3RhdGljU3R5bGUrIiwiKSxlLnN0eWxlQmluZGluZyYmKHQrPSJzdHlsZTooIitlLnN0eWxlQmluZGluZysiKSwiKSx0fX0sX289ZnVuY3Rpb24oZSl7cmV0dXJuKHlvPXlvfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSkuaW5uZXJIVE1MPWUseW8udGV4dENvbnRlbnR9LGJvPXAoImFyZWEsYmFzZSxicixjb2wsZW1iZWQsZnJhbWUsaHIsaW1nLGlucHV0LGlzaW5kZXgsa2V5Z2VuLGxpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyIiksJG89cCgiY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZSIpLHdvPXAoImFkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCxkZXRhaWxzLGRpYWxvZyxkaXYsZGwsZHQsZmllbGRzZXQsZmlnY2FwdGlvbixmaWd1cmUsZm9vdGVyLGZvcm0saDEsaDIsaDMsaDQsaDUsaDYsaGVhZCxoZWFkZXIsaGdyb3VwLGhyLGh0bWwsbGVnZW5kLGxpLG1lbnVpdGVtLG1ldGEsb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLHRpdGxlLHRyLHRyYWNrIiksQ289L15ccyooW15ccyInPD5cLz1dKykoPzpccyooPSlccyooPzoiKFteIl0qKSIrfCcoW14nXSopJyt8KFteXHMiJz08PmBdKykpKT8vLHhvPS9eXHMqKCg/OnYtW1x3LV0rOnxAfDp8IylcW1tePV0rXF1bXlxzIic8PlwvPV0qKSg/OlxzKig9KVxzKig/OiIoW14iXSopIit8JyhbXiddKiknK3woW15ccyInPTw+YF0rKSkpPy8sa289IlthLXpBLVpfXVtcXC1cXC4wLTlfYS16QS1aIitQLnNvdXJjZSsiXSoiLEFvPSIoKD86IitrbysiXFw6KT8iK2tvKyIpIixPbz1uZXcgUmVnRXhwKCJePCIrQW8pLFNvPS9eXHMqKFwvPyk+LyxUbz1uZXcgUmVnRXhwKCJePFxcLyIrQW8rIltePl0qPiIpLEVvPS9ePCFET0NUWVBFIFtePl0rPi9pLE5vPS9ePCFcLS0vLGpvPS9ePCFcWy8sRG89cCgic2NyaXB0LHN0eWxlLHRleHRhcmVhIiwhMCksTG89e30sTW89eyImbHQ7IjoiPCIsIiZndDsiOiI+IiwiJnF1b3Q7IjonIicsIiZhbXA7IjoiJiIsIiYjMTA7IjoiXG4iLCImIzk7IjoiXHQiLCImIzM5OyI6IicifSxJbz0vJig/Omx0fGd0fHF1b3R8YW1wfCMzOSk7L2csRm89LyYoPzpsdHxndHxxdW90fGFtcHwjMzl8IzEwfCM5KTsvZyxQbz1wKCJwcmUsdGV4dGFyZWEiLCEwKSxSbz1mdW5jdGlvbihlLHQpe3JldHVybiBlJiZQbyhlKSYmIlxuIj09PXRbMF19O2Z1bmN0aW9uIEhvKGUsdCl7dmFyIG49dD9GbzpJbztyZXR1cm4gZS5yZXBsYWNlKG4sZnVuY3Rpb24oZSl7cmV0dXJuIE1vW2VdfSl9dmFyIEJvLFVvLHpvLFZvLEtvLEpvLHFvLFdvLFpvPS9eQHxedi1vbjovLEdvPS9edi18XkB8Xjp8XiMvLFhvPS8oW1xzXFNdKj8pXHMrKD86aW58b2YpXHMrKFtcc1xTXSopLyxZbz0vLChbXixcfVxdXSopKD86LChbXixcfVxdXSopKT8kLyxRbz0vXlwofFwpJC9nLGVhPS9eXFsuKlxdJC8sdGE9LzooLiopJC8sbmE9L146fF5cLnxedi1iaW5kOi8scmE9L1wuW14uXF1dKyg/PVteXF1dKiQpL2csaWE9L152LXNsb3QoOnwkKXxeIy8sb2E9L1tcclxuXS8sYWE9L1xzKy9nLHNhPWcoX28pLGNhPSJfZW1wdHlfIjtmdW5jdGlvbiB1YShlLHQsbil7cmV0dXJue3R5cGU6MSx0YWc6ZSxhdHRyc0xpc3Q6dCxhdHRyc01hcDptYSh0KSxyYXdBdHRyc01hcDp7fSxwYXJlbnQ6bixjaGlsZHJlbjpbXX19ZnVuY3Rpb24gbGEoZSx0KXtCbz10Lndhcm58fFNyLEpvPXQuaXNQcmVUYWd8fFQscW89dC5tdXN0VXNlUHJvcHx8VCxXbz10LmdldFRhZ05hbWVzcGFjZXx8VDt0LmlzUmVzZXJ2ZWRUYWc7em89VHIodC5tb2R1bGVzLCJ0cmFuc2Zvcm1Ob2RlIiksVm89VHIodC5tb2R1bGVzLCJwcmVUcmFuc2Zvcm1Ob2RlIiksS289VHIodC5tb2R1bGVzLCJwb3N0VHJhbnNmb3JtTm9kZSIpLFVvPXQuZGVsaW1pdGVyczt2YXIgbixyLGk9W10sbz0hMSE9PXQucHJlc2VydmVXaGl0ZXNwYWNlLGE9dC53aGl0ZXNwYWNlLHM9ITEsYz0hMTtmdW5jdGlvbiB1KGUpe2lmKGwoZSksc3x8ZS5wcm9jZXNzZWR8fChlPWZhKGUsdCkpLGkubGVuZ3RofHxlPT09bnx8bi5pZiYmKGUuZWxzZWlmfHxlLmVsc2UpJiZkYShuLHtleHA6ZS5lbHNlaWYsYmxvY2s6ZX0pLHImJiFlLmZvcmJpZGRlbilpZihlLmVsc2VpZnx8ZS5lbHNlKWE9ZSwodT1mdW5jdGlvbihlKXt2YXIgdD1lLmxlbmd0aDtmb3IoO3QtLTspe2lmKDE9PT1lW3RdLnR5cGUpcmV0dXJuIGVbdF07ZS5wb3AoKX19KHIuY2hpbGRyZW4pKSYmdS5pZiYmZGEodSx7ZXhwOmEuZWxzZWlmLGJsb2NrOmF9KTtlbHNle2lmKGUuc2xvdFNjb3BlKXt2YXIgbz1lLnNsb3RUYXJnZXR8fCciZGVmYXVsdCInOyhyLnNjb3BlZFNsb3RzfHwoci5zY29wZWRTbG90cz17fSkpW29dPWV9ci5jaGlsZHJlbi5wdXNoKGUpLGUucGFyZW50PXJ9dmFyIGEsdTtlLmNoaWxkcmVuPWUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGUpe3JldHVybiFlLnNsb3RTY29wZX0pLGwoZSksZS5wcmUmJihzPSExKSxKbyhlLnRhZykmJihjPSExKTtmb3IodmFyIGY9MDtmPEtvLmxlbmd0aDtmKyspS29bZl0oZSx0KX1mdW5jdGlvbiBsKGUpe2lmKCFjKWZvcih2YXIgdDsodD1lLmNoaWxkcmVuW2UuY2hpbGRyZW4ubGVuZ3RoLTFdKSYmMz09PXQudHlwZSYmIiAiPT09dC50ZXh0OyllLmNoaWxkcmVuLnBvcCgpfXJldHVybiBmdW5jdGlvbihlLHQpe2Zvcih2YXIgbixyLGk9W10sbz10LmV4cGVjdEhUTUwsYT10LmlzVW5hcnlUYWd8fFQscz10LmNhbkJlTGVmdE9wZW5UYWd8fFQsYz0wO2U7KXtpZihuPWUsciYmRG8ocikpe3ZhciB1PTAsbD1yLnRvTG93ZXJDYXNlKCksZj1Mb1tsXXx8KExvW2xdPW5ldyBSZWdFeHAoIihbXFxzXFxTXSo/KSg8LyIrbCsiW14+XSo+KSIsImkiKSkscD1lLnJlcGxhY2UoZixmdW5jdGlvbihlLG4scil7cmV0dXJuIHU9ci5sZW5ndGgsRG8obCl8fCJub3NjcmlwdCI9PT1sfHwobj1uLnJlcGxhY2UoLzwhXC0tKFtcc1xTXSo/KS0tPi9nLCIkMSIpLnJlcGxhY2UoLzwhXFtDREFUQVxbKFtcc1xTXSo/KV1dPi9nLCIkMSIpKSxSbyhsLG4pJiYobj1uLnNsaWNlKDEpKSx0LmNoYXJzJiZ0LmNoYXJzKG4pLCIifSk7Yys9ZS5sZW5ndGgtcC5sZW5ndGgsZT1wLEEobCxjLXUsYyl9ZWxzZXt2YXIgZD1lLmluZGV4T2YoIjwiKTtpZigwPT09ZCl7aWYoTm8udGVzdChlKSl7dmFyIHY9ZS5pbmRleE9mKCItLVx4M2UiKTtpZih2Pj0wKXt0LnNob3VsZEtlZXBDb21tZW50JiZ0LmNvbW1lbnQoZS5zdWJzdHJpbmcoNCx2KSxjLGMrdiszKSxDKHYrMyk7Y29udGludWV9fWlmKGpvLnRlc3QoZSkpe3ZhciBoPWUuaW5kZXhPZigiXT4iKTtpZihoPj0wKXtDKGgrMik7Y29udGludWV9fXZhciBtPWUubWF0Y2goRW8pO2lmKG0pe0MobVswXS5sZW5ndGgpO2NvbnRpbnVlfXZhciB5PWUubWF0Y2goVG8pO2lmKHkpe3ZhciBnPWM7Qyh5WzBdLmxlbmd0aCksQSh5WzFdLGcsYyk7Y29udGludWV9dmFyIF89eCgpO2lmKF8pe2soXyksUm8oXy50YWdOYW1lLGUpJiZDKDEpO2NvbnRpbnVlfX12YXIgYj12b2lkIDAsJD12b2lkIDAsdz12b2lkIDA7aWYoZD49MCl7Zm9yKCQ9ZS5zbGljZShkKTshKFRvLnRlc3QoJCl8fE9vLnRlc3QoJCl8fE5vLnRlc3QoJCl8fGpvLnRlc3QoJCl8fCh3PSQuaW5kZXhPZigiPCIsMSkpPDApOylkKz13LCQ9ZS5zbGljZShkKTtiPWUuc3Vic3RyaW5nKDAsZCl9ZDwwJiYoYj1lKSxiJiZDKGIubGVuZ3RoKSx0LmNoYXJzJiZiJiZ0LmNoYXJzKGIsYy1iLmxlbmd0aCxjKX1pZihlPT09bil7dC5jaGFycyYmdC5jaGFycyhlKTticmVha319ZnVuY3Rpb24gQyh0KXtjKz10LGU9ZS5zdWJzdHJpbmcodCl9ZnVuY3Rpb24geCgpe3ZhciB0PWUubWF0Y2goT28pO2lmKHQpe3ZhciBuLHIsaT17dGFnTmFtZTp0WzFdLGF0dHJzOltdLHN0YXJ0OmN9O2ZvcihDKHRbMF0ubGVuZ3RoKTshKG49ZS5tYXRjaChTbykpJiYocj1lLm1hdGNoKHhvKXx8ZS5tYXRjaChDbykpOylyLnN0YXJ0PWMsQyhyWzBdLmxlbmd0aCksci5lbmQ9YyxpLmF0dHJzLnB1c2gocik7aWYobilyZXR1cm4gaS51bmFyeVNsYXNoPW5bMV0sQyhuWzBdLmxlbmd0aCksaS5lbmQ9YyxpfX1mdW5jdGlvbiBrKGUpe3ZhciBuPWUudGFnTmFtZSxjPWUudW5hcnlTbGFzaDtvJiYoInAiPT09ciYmd28obikmJkEocikscyhuKSYmcj09PW4mJkEobikpO2Zvcih2YXIgdT1hKG4pfHwhIWMsbD1lLmF0dHJzLmxlbmd0aCxmPW5ldyBBcnJheShsKSxwPTA7cDxsO3ArKyl7dmFyIGQ9ZS5hdHRyc1twXSx2PWRbM118fGRbNF18fGRbNV18fCIiLGg9ImEiPT09biYmImhyZWYiPT09ZFsxXT90LnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjp0LnNob3VsZERlY29kZU5ld2xpbmVzO2ZbcF09e25hbWU6ZFsxXSx2YWx1ZTpIbyh2LGgpfX11fHwoaS5wdXNoKHt0YWc6bixsb3dlckNhc2VkVGFnOm4udG9Mb3dlckNhc2UoKSxhdHRyczpmLHN0YXJ0OmUuc3RhcnQsZW5kOmUuZW5kfSkscj1uKSx0LnN0YXJ0JiZ0LnN0YXJ0KG4sZix1LGUuc3RhcnQsZS5lbmQpfWZ1bmN0aW9uIEEoZSxuLG8pe3ZhciBhLHM7aWYobnVsbD09biYmKG49YyksbnVsbD09byYmKG89YyksZSlmb3Iocz1lLnRvTG93ZXJDYXNlKCksYT1pLmxlbmd0aC0xO2E+PTAmJmlbYV0ubG93ZXJDYXNlZFRhZyE9PXM7YS0tKTtlbHNlIGE9MDtpZihhPj0wKXtmb3IodmFyIHU9aS5sZW5ndGgtMTt1Pj1hO3UtLSl0LmVuZCYmdC5lbmQoaVt1XS50YWcsbixvKTtpLmxlbmd0aD1hLHI9YSYmaVthLTFdLnRhZ31lbHNlImJyIj09PXM/dC5zdGFydCYmdC5zdGFydChlLFtdLCEwLG4sbyk6InAiPT09cyYmKHQuc3RhcnQmJnQuc3RhcnQoZSxbXSwhMSxuLG8pLHQuZW5kJiZ0LmVuZChlLG4sbykpfUEoKX0oZSx7d2FybjpCbyxleHBlY3RIVE1MOnQuZXhwZWN0SFRNTCxpc1VuYXJ5VGFnOnQuaXNVbmFyeVRhZyxjYW5CZUxlZnRPcGVuVGFnOnQuY2FuQmVMZWZ0T3BlblRhZyxzaG91bGREZWNvZGVOZXdsaW5lczp0LnNob3VsZERlY29kZU5ld2xpbmVzLHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZjp0LnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixzaG91bGRLZWVwQ29tbWVudDp0LmNvbW1lbnRzLG91dHB1dFNvdXJjZVJhbmdlOnQub3V0cHV0U291cmNlUmFuZ2Usc3RhcnQ6ZnVuY3Rpb24oZSxvLGEsbCxmKXt2YXIgcD1yJiZyLm5zfHxXbyhlKTtxJiYic3ZnIj09PXAmJihvPWZ1bmN0aW9uKGUpe2Zvcih2YXIgdD1bXSxuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciByPWVbbl07eWEudGVzdChyLm5hbWUpfHwoci5uYW1lPXIubmFtZS5yZXBsYWNlKGdhLCIiKSx0LnB1c2gocikpfXJldHVybiB0fShvKSk7dmFyIGQsdj11YShlLG8scik7cCYmKHYubnM9cCksInN0eWxlIiE9PShkPXYpLnRhZyYmKCJzY3JpcHQiIT09ZC50YWd8fGQuYXR0cnNNYXAudHlwZSYmInRleHQvamF2YXNjcmlwdCIhPT1kLmF0dHJzTWFwLnR5cGUpfHx0ZSgpfHwodi5mb3JiaWRkZW49ITApO2Zvcih2YXIgaD0wO2g8Vm8ubGVuZ3RoO2grKyl2PVZvW2hdKHYsdCl8fHY7c3x8KCFmdW5jdGlvbihlKXtudWxsIT1GcihlLCJ2LXByZSIpJiYoZS5wcmU9ITApfSh2KSx2LnByZSYmKHM9ITApKSxKbyh2LnRhZykmJihjPSEwKSxzP2Z1bmN0aW9uKGUpe3ZhciB0PWUuYXR0cnNMaXN0LG49dC5sZW5ndGg7aWYobilmb3IodmFyIHI9ZS5hdHRycz1uZXcgQXJyYXkobiksaT0wO2k8bjtpKyspcltpXT17bmFtZTp0W2ldLm5hbWUsdmFsdWU6SlNPTi5zdHJpbmdpZnkodFtpXS52YWx1ZSl9LG51bGwhPXRbaV0uc3RhcnQmJihyW2ldLnN0YXJ0PXRbaV0uc3RhcnQscltpXS5lbmQ9dFtpXS5lbmQpO2Vsc2UgZS5wcmV8fChlLnBsYWluPSEwKX0odik6di5wcm9jZXNzZWR8fChwYSh2KSxmdW5jdGlvbihlKXt2YXIgdD1GcihlLCJ2LWlmIik7aWYodCllLmlmPXQsZGEoZSx7ZXhwOnQsYmxvY2s6ZX0pO2Vsc2V7bnVsbCE9RnIoZSwidi1lbHNlIikmJihlLmVsc2U9ITApO3ZhciBuPUZyKGUsInYtZWxzZS1pZiIpO24mJihlLmVsc2VpZj1uKX19KHYpLGZ1bmN0aW9uKGUpe251bGwhPUZyKGUsInYtb25jZSIpJiYoZS5vbmNlPSEwKX0odikpLG58fChuPXYpLGE/dSh2KToocj12LGkucHVzaCh2KSl9LGVuZDpmdW5jdGlvbihlLHQsbil7dmFyIG89aVtpLmxlbmd0aC0xXTtpLmxlbmd0aC09MSxyPWlbaS5sZW5ndGgtMV0sdShvKX0sY2hhcnM6ZnVuY3Rpb24oZSx0LG4pe2lmKHImJighcXx8InRleHRhcmVhIiE9PXIudGFnfHxyLmF0dHJzTWFwLnBsYWNlaG9sZGVyIT09ZSkpe3ZhciBpLHUsbCxmPXIuY2hpbGRyZW47aWYoZT1jfHxlLnRyaW0oKT8ic2NyaXB0Ij09PShpPXIpLnRhZ3x8InN0eWxlIj09PWkudGFnP2U6c2EoZSk6Zi5sZW5ndGg/YT8iY29uZGVuc2UiPT09YSYmb2EudGVzdChlKT8iIjoiICI6bz8iICI6IiI6IiIpY3x8ImNvbmRlbnNlIiE9PWF8fChlPWUucmVwbGFjZShhYSwiICIpKSwhcyYmIiAiIT09ZSYmKHU9ZnVuY3Rpb24oZSx0KXt2YXIgbj10P2hvKHQpOnBvO2lmKG4udGVzdChlKSl7Zm9yKHZhciByLGksbyxhPVtdLHM9W10sYz1uLmxhc3RJbmRleD0wO3I9bi5leGVjKGUpOyl7KGk9ci5pbmRleCk+YyYmKHMucHVzaChvPWUuc2xpY2UoYyxpKSksYS5wdXNoKEpTT04uc3RyaW5naWZ5KG8pKSk7dmFyIHU9QXIoclsxXS50cmltKCkpO2EucHVzaCgiX3MoIit1KyIpIikscy5wdXNoKHsiQGJpbmRpbmciOnV9KSxjPWkrclswXS5sZW5ndGh9cmV0dXJuIGM8ZS5sZW5ndGgmJihzLnB1c2gobz1lLnNsaWNlKGMpKSxhLnB1c2goSlNPTi5zdHJpbmdpZnkobykpKSx7ZXhwcmVzc2lvbjphLmpvaW4oIisiKSx0b2tlbnM6c319fShlLFVvKSk/bD17dHlwZToyLGV4cHJlc3Npb246dS5leHByZXNzaW9uLHRva2Vuczp1LnRva2Vucyx0ZXh0OmV9OiIgIj09PWUmJmYubGVuZ3RoJiYiICI9PT1mW2YubGVuZ3RoLTFdLnRleHR8fChsPXt0eXBlOjMsdGV4dDplfSksbCYmZi5wdXNoKGwpfX0sY29tbWVudDpmdW5jdGlvbihlLHQsbil7aWYocil7dmFyIGk9e3R5cGU6Myx0ZXh0OmUsaXNDb21tZW50OiEwfTtyLmNoaWxkcmVuLnB1c2goaSl9fX0pLG59ZnVuY3Rpb24gZmEoZSx0KXt2YXIgbixyOyhyPUlyKG49ZSwia2V5IikpJiYobi5rZXk9ciksZS5wbGFpbj0hZS5rZXkmJiFlLnNjb3BlZFNsb3RzJiYhZS5hdHRyc0xpc3QubGVuZ3RoLGZ1bmN0aW9uKGUpe3ZhciB0PUlyKGUsInJlZiIpO3QmJihlLnJlZj10LGUucmVmSW5Gb3I9ZnVuY3Rpb24oZSl7dmFyIHQ9ZTtmb3IoO3Q7KXtpZih2b2lkIDAhPT10LmZvcilyZXR1cm4hMDt0PXQucGFyZW50fXJldHVybiExfShlKSl9KGUpLGZ1bmN0aW9uKGUpe3ZhciB0OyJ0ZW1wbGF0ZSI9PT1lLnRhZz8odD1GcihlLCJzY29wZSIpLGUuc2xvdFNjb3BlPXR8fEZyKGUsInNsb3Qtc2NvcGUiKSk6KHQ9RnIoZSwic2xvdC1zY29wZSIpKSYmKGUuc2xvdFNjb3BlPXQpO3ZhciBuPUlyKGUsInNsb3QiKTtuJiYoZS5zbG90VGFyZ2V0PSciIic9PT1uPyciZGVmYXVsdCInOm4sZS5zbG90VGFyZ2V0RHluYW1pYz0hKCFlLmF0dHJzTWFwWyI6c2xvdCJdJiYhZS5hdHRyc01hcFsidi1iaW5kOnNsb3QiXSksInRlbXBsYXRlIj09PWUudGFnfHxlLnNsb3RTY29wZXx8TnIoZSwic2xvdCIsbixmdW5jdGlvbihlLHQpe3JldHVybiBlLnJhd0F0dHJzTWFwWyI6Iit0XXx8ZS5yYXdBdHRyc01hcFsidi1iaW5kOiIrdF18fGUucmF3QXR0cnNNYXBbdF19KGUsInNsb3QiKSkpO2lmKCJ0ZW1wbGF0ZSI9PT1lLnRhZyl7dmFyIHI9UHIoZSxpYSk7aWYocil7dmFyIGk9dmEociksbz1pLm5hbWUsYT1pLmR5bmFtaWM7ZS5zbG90VGFyZ2V0PW8sZS5zbG90VGFyZ2V0RHluYW1pYz1hLGUuc2xvdFNjb3BlPXIudmFsdWV8fGNhfX1lbHNle3ZhciBzPVByKGUsaWEpO2lmKHMpe3ZhciBjPWUuc2NvcGVkU2xvdHN8fChlLnNjb3BlZFNsb3RzPXt9KSx1PXZhKHMpLGw9dS5uYW1lLGY9dS5keW5hbWljLHA9Y1tsXT11YSgidGVtcGxhdGUiLFtdLGUpO3Auc2xvdFRhcmdldD1sLHAuc2xvdFRhcmdldER5bmFtaWM9ZixwLmNoaWxkcmVuPWUuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uKGUpe2lmKCFlLnNsb3RTY29wZSlyZXR1cm4gZS5wYXJlbnQ9cCwhMH0pLHAuc2xvdFNjb3BlPXMudmFsdWV8fGNhLGUuY2hpbGRyZW49W10sZS5wbGFpbj0hMX19fShlKSxmdW5jdGlvbihlKXsic2xvdCI9PT1lLnRhZyYmKGUuc2xvdE5hbWU9SXIoZSwibmFtZSIpKX0oZSksZnVuY3Rpb24oZSl7dmFyIHQ7KHQ9SXIoZSwiaXMiKSkmJihlLmNvbXBvbmVudD10KTtudWxsIT1GcihlLCJpbmxpbmUtdGVtcGxhdGUiKSYmKGUuaW5saW5lVGVtcGxhdGU9ITApfShlKTtmb3IodmFyIGk9MDtpPHpvLmxlbmd0aDtpKyspZT16b1tpXShlLHQpfHxlO3JldHVybiBmdW5jdGlvbihlKXt2YXIgdCxuLHIsaSxvLGEscyxjLHU9ZS5hdHRyc0xpc3Q7Zm9yKHQ9MCxuPXUubGVuZ3RoO3Q8bjt0KyspaWYocj1pPXVbdF0ubmFtZSxvPXVbdF0udmFsdWUsR28udGVzdChyKSlpZihlLmhhc0JpbmRpbmdzPSEwLChhPWhhKHIucmVwbGFjZShHbywiIikpKSYmKHI9ci5yZXBsYWNlKHJhLCIiKSksbmEudGVzdChyKSlyPXIucmVwbGFjZShuYSwiIiksbz1BcihvKSwoYz1lYS50ZXN0KHIpKSYmKHI9ci5zbGljZSgxLC0xKSksYSYmKGEucHJvcCYmIWMmJiJpbm5lckh0bWwiPT09KHI9YihyKSkmJihyPSJpbm5lckhUTUwiKSxhLmNhbWVsJiYhYyYmKHI9YihyKSksYS5zeW5jJiYocz1CcihvLCIkZXZlbnQiKSxjP01yKGUsJyJ1cGRhdGU6IisoJytyKyIpIixzLG51bGwsITEsMCx1W3RdLCEwKTooTXIoZSwidXBkYXRlOiIrYihyKSxzLG51bGwsITEsMCx1W3RdKSxDKHIpIT09YihyKSYmTXIoZSwidXBkYXRlOiIrQyhyKSxzLG51bGwsITEsMCx1W3RdKSkpKSxhJiZhLnByb3B8fCFlLmNvbXBvbmVudCYmcW8oZS50YWcsZS5hdHRyc01hcC50eXBlLHIpP0VyKGUscixvLHVbdF0sYyk6TnIoZSxyLG8sdVt0XSxjKTtlbHNlIGlmKFpvLnRlc3Qocikpcj1yLnJlcGxhY2UoWm8sIiIpLChjPWVhLnRlc3QocikpJiYocj1yLnNsaWNlKDEsLTEpKSxNcihlLHIsbyxhLCExLDAsdVt0XSxjKTtlbHNle3ZhciBsPShyPXIucmVwbGFjZShHbywiIikpLm1hdGNoKHRhKSxmPWwmJmxbMV07Yz0hMSxmJiYocj1yLnNsaWNlKDAsLShmLmxlbmd0aCsxKSksZWEudGVzdChmKSYmKGY9Zi5zbGljZSgxLC0xKSxjPSEwKSksRHIoZSxyLGksbyxmLGMsYSx1W3RdKX1lbHNlIE5yKGUscixKU09OLnN0cmluZ2lmeShvKSx1W3RdKSwhZS5jb21wb25lbnQmJiJtdXRlZCI9PT1yJiZxbyhlLnRhZyxlLmF0dHJzTWFwLnR5cGUscikmJkVyKGUsciwidHJ1ZSIsdVt0XSl9KGUpLGV9ZnVuY3Rpb24gcGEoZSl7dmFyIHQ7aWYodD1GcihlLCJ2LWZvciIpKXt2YXIgbj1mdW5jdGlvbihlKXt2YXIgdD1lLm1hdGNoKFhvKTtpZighdClyZXR1cm47dmFyIG49e307bi5mb3I9dFsyXS50cmltKCk7dmFyIHI9dFsxXS50cmltKCkucmVwbGFjZShRbywiIiksaT1yLm1hdGNoKFlvKTtpPyhuLmFsaWFzPXIucmVwbGFjZShZbywiIikudHJpbSgpLG4uaXRlcmF0b3IxPWlbMV0udHJpbSgpLGlbMl0mJihuLml0ZXJhdG9yMj1pWzJdLnRyaW0oKSkpOm4uYWxpYXM9cjtyZXR1cm4gbn0odCk7biYmQShlLG4pfX1mdW5jdGlvbiBkYShlLHQpe2UuaWZDb25kaXRpb25zfHwoZS5pZkNvbmRpdGlvbnM9W10pLGUuaWZDb25kaXRpb25zLnB1c2godCl9ZnVuY3Rpb24gdmEoZSl7dmFyIHQ9ZS5uYW1lLnJlcGxhY2UoaWEsIiIpO3JldHVybiB0fHwiIyIhPT1lLm5hbWVbMF0mJih0PSJkZWZhdWx0IiksZWEudGVzdCh0KT97bmFtZTp0LnNsaWNlKDEsLTEpLGR5bmFtaWM6ITB9OntuYW1lOiciJyt0KyciJyxkeW5hbWljOiExfX1mdW5jdGlvbiBoYShlKXt2YXIgdD1lLm1hdGNoKHJhKTtpZih0KXt2YXIgbj17fTtyZXR1cm4gdC5mb3JFYWNoKGZ1bmN0aW9uKGUpe25bZS5zbGljZSgxKV09ITB9KSxufX1mdW5jdGlvbiBtYShlKXtmb3IodmFyIHQ9e30sbj0wLHI9ZS5sZW5ndGg7bjxyO24rKyl0W2Vbbl0ubmFtZV09ZVtuXS52YWx1ZTtyZXR1cm4gdH12YXIgeWE9L154bWxuczpOU1xkKy8sZ2E9L15OU1xkKzovO2Z1bmN0aW9uIF9hKGUpe3JldHVybiB1YShlLnRhZyxlLmF0dHJzTGlzdC5zbGljZSgpLGUucGFyZW50KX12YXIgYmE9W21vLGdvLHtwcmVUcmFuc2Zvcm1Ob2RlOmZ1bmN0aW9uKGUsdCl7aWYoImlucHV0Ij09PWUudGFnKXt2YXIgbixyPWUuYXR0cnNNYXA7aWYoIXJbInYtbW9kZWwiXSlyZXR1cm47aWYoKHJbIjp0eXBlIl18fHJbInYtYmluZDp0eXBlIl0pJiYobj1JcihlLCJ0eXBlIikpLHIudHlwZXx8bnx8IXJbInYtYmluZCJdfHwobj0iKCIrclsidi1iaW5kIl0rIikudHlwZSIpLG4pe3ZhciBpPUZyKGUsInYtaWYiLCEwKSxvPWk/IiYmKCIraSsiKSI6IiIsYT1udWxsIT1GcihlLCJ2LWVsc2UiLCEwKSxzPUZyKGUsInYtZWxzZS1pZiIsITApLGM9X2EoZSk7cGEoYyksanIoYywidHlwZSIsImNoZWNrYm94IiksZmEoYyx0KSxjLnByb2Nlc3NlZD0hMCxjLmlmPSIoIituKyIpPT09J2NoZWNrYm94JyIrbyxkYShjLHtleHA6Yy5pZixibG9jazpjfSk7dmFyIHU9X2EoZSk7RnIodSwidi1mb3IiLCEwKSxqcih1LCJ0eXBlIiwicmFkaW8iKSxmYSh1LHQpLGRhKGMse2V4cDoiKCIrbisiKT09PSdyYWRpbyciK28sYmxvY2s6dX0pO3ZhciBsPV9hKGUpO3JldHVybiBGcihsLCJ2LWZvciIsITApLGpyKGwsIjp0eXBlIixuKSxmYShsLHQpLGRhKGMse2V4cDppLGJsb2NrOmx9KSxhP2MuZWxzZT0hMDpzJiYoYy5lbHNlaWY9cyksY319fX1dO3ZhciAkYSx3YSxDYT17ZXhwZWN0SFRNTDohMCxtb2R1bGVzOmJhLGRpcmVjdGl2ZXM6e21vZGVsOmZ1bmN0aW9uKGUsdCxuKXt2YXIgcj10LnZhbHVlLGk9dC5tb2RpZmllcnMsbz1lLnRhZyxhPWUuYXR0cnNNYXAudHlwZTtpZihlLmNvbXBvbmVudClyZXR1cm4gSHIoZSxyLGkpLCExO2lmKCJzZWxlY3QiPT09bykhZnVuY3Rpb24oZSx0LG4pe3ZhciByPSd2YXIgJCRzZWxlY3RlZFZhbCA9IEFycmF5LnByb3RvdHlwZS5maWx0ZXIuY2FsbCgkZXZlbnQudGFyZ2V0Lm9wdGlvbnMsZnVuY3Rpb24obyl7cmV0dXJuIG8uc2VsZWN0ZWR9KS5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9ICJfdmFsdWUiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7cmV0dXJuICcrKG4mJm4ubnVtYmVyPyJfbih2YWwpIjoidmFsIikrIn0pOyI7cj1yKyIgIitCcih0LCIkZXZlbnQudGFyZ2V0Lm11bHRpcGxlID8gJCRzZWxlY3RlZFZhbCA6ICQkc2VsZWN0ZWRWYWxbMF0iKSxNcihlLCJjaGFuZ2UiLHIsbnVsbCwhMCl9KGUscixpKTtlbHNlIGlmKCJpbnB1dCI9PT1vJiYiY2hlY2tib3giPT09YSkhZnVuY3Rpb24oZSx0LG4pe3ZhciByPW4mJm4ubnVtYmVyLGk9SXIoZSwidmFsdWUiKXx8Im51bGwiLG89SXIoZSwidHJ1ZS12YWx1ZSIpfHwidHJ1ZSIsYT1JcihlLCJmYWxzZS12YWx1ZSIpfHwiZmFsc2UiO0VyKGUsImNoZWNrZWQiLCJBcnJheS5pc0FycmF5KCIrdCsiKT9faSgiK3QrIiwiK2krIik+LTEiKygidHJ1ZSI9PT1vPyI6KCIrdCsiKSI6IjpfcSgiK3QrIiwiK28rIikiKSksTXIoZSwiY2hhbmdlIiwidmFyICQkYT0iK3QrIiwkJGVsPSRldmVudC50YXJnZXQsJCRjPSQkZWwuY2hlY2tlZD8oIitvKyIpOigiK2ErIik7aWYoQXJyYXkuaXNBcnJheSgkJGEpKXt2YXIgJCR2PSIrKHI/Il9uKCIraSsiKSI6aSkrIiwkJGk9X2koJCRhLCQkdik7aWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKCIrQnIodCwiJCRhLmNvbmNhdChbJCR2XSkiKSsiKX1lbHNleyQkaT4tMSYmKCIrQnIodCwiJCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSkiKSsiKX19ZWxzZXsiK0JyKHQsIiQkYyIpKyJ9IixudWxsLCEwKX0oZSxyLGkpO2Vsc2UgaWYoImlucHV0Ij09PW8mJiJyYWRpbyI9PT1hKSFmdW5jdGlvbihlLHQsbil7dmFyIHI9biYmbi5udW1iZXIsaT1JcihlLCJ2YWx1ZSIpfHwibnVsbCI7RXIoZSwiY2hlY2tlZCIsIl9xKCIrdCsiLCIrKGk9cj8iX24oIitpKyIpIjppKSsiKSIpLE1yKGUsImNoYW5nZSIsQnIodCxpKSxudWxsLCEwKX0oZSxyLGkpO2Vsc2UgaWYoImlucHV0Ij09PW98fCJ0ZXh0YXJlYSI9PT1vKSFmdW5jdGlvbihlLHQsbil7dmFyIHI9ZS5hdHRyc01hcC50eXBlLGk9bnx8e30sbz1pLmxhenksYT1pLm51bWJlcixzPWkudHJpbSxjPSFvJiYicmFuZ2UiIT09cix1PW8/ImNoYW5nZSI6InJhbmdlIj09PXI/V3I6ImlucHV0IixsPSIkZXZlbnQudGFyZ2V0LnZhbHVlIjtzJiYobD0iJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKCkiKSxhJiYobD0iX24oIitsKyIpIik7dmFyIGY9QnIodCxsKTtjJiYoZj0iaWYoJGV2ZW50LnRhcmdldC5jb21wb3NpbmcpcmV0dXJuOyIrZiksRXIoZSwidmFsdWUiLCIoIit0KyIpIiksTXIoZSx1LGYsbnVsbCwhMCksKHN8fGEpJiZNcihlLCJibHVyIiwiJGZvcmNlVXBkYXRlKCkiKX0oZSxyLGkpO2Vsc2UgaWYoIUYuaXNSZXNlcnZlZFRhZyhvKSlyZXR1cm4gSHIoZSxyLGkpLCExO3JldHVybiEwfSx0ZXh0OmZ1bmN0aW9uKGUsdCl7dC52YWx1ZSYmRXIoZSwidGV4dENvbnRlbnQiLCJfcygiK3QudmFsdWUrIikiLHQpfSxodG1sOmZ1bmN0aW9uKGUsdCl7dC52YWx1ZSYmRXIoZSwiaW5uZXJIVE1MIiwiX3MoIit0LnZhbHVlKyIpIix0KX19LGlzUHJlVGFnOmZ1bmN0aW9uKGUpe3JldHVybiJwcmUiPT09ZX0saXNVbmFyeVRhZzpibyxtdXN0VXNlUHJvcDpqbixjYW5CZUxlZnRPcGVuVGFnOiRvLGlzUmVzZXJ2ZWRUYWc6V24sZ2V0VGFnTmFtZXNwYWNlOlpuLHN0YXRpY0tleXM6ZnVuY3Rpb24oZSl7cmV0dXJuIGUucmVkdWNlKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuY29uY2F0KHQuc3RhdGljS2V5c3x8W10pfSxbXSkuam9pbigiLCIpfShiYSl9LHhhPWcoZnVuY3Rpb24oZSl7cmV0dXJuIHAoInR5cGUsdGFnLGF0dHJzTGlzdCxhdHRyc01hcCxwbGFpbixwYXJlbnQsY2hpbGRyZW4sYXR0cnMsc3RhcnQsZW5kLHJhd0F0dHJzTWFwIisoZT8iLCIrZToiIikpfSk7ZnVuY3Rpb24ga2EoZSx0KXtlJiYoJGE9eGEodC5zdGF0aWNLZXlzfHwiIiksd2E9dC5pc1Jlc2VydmVkVGFnfHxULGZ1bmN0aW9uIGUodCl7dC5zdGF0aWM9ZnVuY3Rpb24oZSl7aWYoMj09PWUudHlwZSlyZXR1cm4hMTtpZigzPT09ZS50eXBlKXJldHVybiEwO3JldHVybiEoIWUucHJlJiYoZS5oYXNCaW5kaW5nc3x8ZS5pZnx8ZS5mb3J8fGQoZS50YWcpfHwhd2EoZS50YWcpfHxmdW5jdGlvbihlKXtmb3IoO2UucGFyZW50Oyl7aWYoInRlbXBsYXRlIiE9PShlPWUucGFyZW50KS50YWcpcmV0dXJuITE7aWYoZS5mb3IpcmV0dXJuITB9cmV0dXJuITF9KGUpfHwhT2JqZWN0LmtleXMoZSkuZXZlcnkoJGEpKSl9KHQpO2lmKDE9PT10LnR5cGUpe2lmKCF3YSh0LnRhZykmJiJzbG90IiE9PXQudGFnJiZudWxsPT10LmF0dHJzTWFwWyJpbmxpbmUtdGVtcGxhdGUiXSlyZXR1cm47Zm9yKHZhciBuPTAscj10LmNoaWxkcmVuLmxlbmd0aDtuPHI7bisrKXt2YXIgaT10LmNoaWxkcmVuW25dO2UoaSksaS5zdGF0aWN8fCh0LnN0YXRpYz0hMSl9aWYodC5pZkNvbmRpdGlvbnMpZm9yKHZhciBvPTEsYT10LmlmQ29uZGl0aW9ucy5sZW5ndGg7bzxhO28rKyl7dmFyIHM9dC5pZkNvbmRpdGlvbnNbb10uYmxvY2s7ZShzKSxzLnN0YXRpY3x8KHQuc3RhdGljPSExKX19fShlKSxmdW5jdGlvbiBlKHQsbil7aWYoMT09PXQudHlwZSl7aWYoKHQuc3RhdGljfHx0Lm9uY2UpJiYodC5zdGF0aWNJbkZvcj1uKSx0LnN0YXRpYyYmdC5jaGlsZHJlbi5sZW5ndGgmJigxIT09dC5jaGlsZHJlbi5sZW5ndGh8fDMhPT10LmNoaWxkcmVuWzBdLnR5cGUpKXJldHVybiB2b2lkKHQuc3RhdGljUm9vdD0hMCk7aWYodC5zdGF0aWNSb290PSExLHQuY2hpbGRyZW4pZm9yKHZhciByPTAsaT10LmNoaWxkcmVuLmxlbmd0aDtyPGk7cisrKWUodC5jaGlsZHJlbltyXSxufHwhIXQuZm9yKTtpZih0LmlmQ29uZGl0aW9ucylmb3IodmFyIG89MSxhPXQuaWZDb25kaXRpb25zLmxlbmd0aDtvPGE7bysrKWUodC5pZkNvbmRpdGlvbnNbb10uYmxvY2ssbil9fShlLCExKSl9dmFyIEFhPS9eKFtcdyRfXSt8XChbXildKj9cKSlccyo9PnxeZnVuY3Rpb24oPzpccytbXHckXSspP1xzKlwoLyxPYT0vXChbXildKj9cKTsqJC8sU2E9L15bQS1aYS16XyRdW1x3JF0qKD86XC5bQS1aYS16XyRdW1x3JF0qfFxbJ1teJ10qPyddfFxbIlteIl0qPyJdfFxbXGQrXXxcW1tBLVphLXpfJF1bXHckXSpdKSokLyxUYT17ZXNjOjI3LHRhYjo5LGVudGVyOjEzLHNwYWNlOjMyLHVwOjM4LGxlZnQ6MzcscmlnaHQ6MzksZG93bjo0MCxkZWxldGU6WzgsNDZdfSxFYT17ZXNjOlsiRXNjIiwiRXNjYXBlIl0sdGFiOiJUYWIiLGVudGVyOiJFbnRlciIsc3BhY2U6WyIgIiwiU3BhY2ViYXIiXSx1cDpbIlVwIiwiQXJyb3dVcCJdLGxlZnQ6WyJMZWZ0IiwiQXJyb3dMZWZ0Il0scmlnaHQ6WyJSaWdodCIsIkFycm93UmlnaHQiXSxkb3duOlsiRG93biIsIkFycm93RG93biJdLGRlbGV0ZTpbIkJhY2tzcGFjZSIsIkRlbGV0ZSIsIkRlbCJdfSxOYT1mdW5jdGlvbihlKXtyZXR1cm4iaWYoIitlKyIpcmV0dXJuIG51bGw7In0samE9e3N0b3A6IiRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsiLHByZXZlbnQ6IiRldmVudC5wcmV2ZW50RGVmYXVsdCgpOyIsc2VsZjpOYSgiJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXQiKSxjdHJsOk5hKCIhJGV2ZW50LmN0cmxLZXkiKSxzaGlmdDpOYSgiISRldmVudC5zaGlmdEtleSIpLGFsdDpOYSgiISRldmVudC5hbHRLZXkiKSxtZXRhOk5hKCIhJGV2ZW50Lm1ldGFLZXkiKSxsZWZ0Ok5hKCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMCIpLG1pZGRsZTpOYSgiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDEiKSxyaWdodDpOYSgiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDIiKX07ZnVuY3Rpb24gRGEoZSx0KXt2YXIgbj10PyJuYXRpdmVPbjoiOiJvbjoiLHI9IiIsaT0iIjtmb3IodmFyIG8gaW4gZSl7dmFyIGE9TGEoZVtvXSk7ZVtvXSYmZVtvXS5keW5hbWljP2krPW8rIiwiK2ErIiwiOnIrPSciJytvKyciOicrYSsiLCJ9cmV0dXJuIHI9InsiK3Iuc2xpY2UoMCwtMSkrIn0iLGk/bisiX2QoIityKyIsWyIraS5zbGljZSgwLC0xKSsiXSkiOm4rcn1mdW5jdGlvbiBMYShlKXtpZighZSlyZXR1cm4iZnVuY3Rpb24oKXt9IjtpZihBcnJheS5pc0FycmF5KGUpKXJldHVybiJbIitlLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gTGEoZSl9KS5qb2luKCIsIikrIl0iO3ZhciB0PVNhLnRlc3QoZS52YWx1ZSksbj1BYS50ZXN0KGUudmFsdWUpLHI9U2EudGVzdChlLnZhbHVlLnJlcGxhY2UoT2EsIiIpKTtpZihlLm1vZGlmaWVycyl7dmFyIGk9IiIsbz0iIixhPVtdO2Zvcih2YXIgcyBpbiBlLm1vZGlmaWVycylpZihqYVtzXSlvKz1qYVtzXSxUYVtzXSYmYS5wdXNoKHMpO2Vsc2UgaWYoImV4YWN0Ij09PXMpe3ZhciBjPWUubW9kaWZpZXJzO28rPU5hKFsiY3RybCIsInNoaWZ0IiwiYWx0IiwibWV0YSJdLmZpbHRlcihmdW5jdGlvbihlKXtyZXR1cm4hY1tlXX0pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4iJGV2ZW50LiIrZSsiS2V5In0pLmpvaW4oInx8IikpfWVsc2UgYS5wdXNoKHMpO3JldHVybiBhLmxlbmd0aCYmKGkrPWZ1bmN0aW9uKGUpe3JldHVybiJpZighJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykmJiIrZS5tYXAoTWEpLmpvaW4oIiYmIikrIilyZXR1cm4gbnVsbDsifShhKSksbyYmKGkrPW8pLCJmdW5jdGlvbigkZXZlbnQpeyIraSsodD8icmV0dXJuICIrZS52YWx1ZSsiKCRldmVudCkiOm4/InJldHVybiAoIitlLnZhbHVlKyIpKCRldmVudCkiOnI/InJldHVybiAiK2UudmFsdWU6ZS52YWx1ZSkrIn0ifXJldHVybiB0fHxuP2UudmFsdWU6ImZ1bmN0aW9uKCRldmVudCl7Iisocj8icmV0dXJuICIrZS52YWx1ZTplLnZhbHVlKSsifSJ9ZnVuY3Rpb24gTWEoZSl7dmFyIHQ9cGFyc2VJbnQoZSwxMCk7aWYodClyZXR1cm4iJGV2ZW50LmtleUNvZGUhPT0iK3Q7dmFyIG49VGFbZV0scj1FYVtlXTtyZXR1cm4iX2soJGV2ZW50LmtleUNvZGUsIitKU09OLnN0cmluZ2lmeShlKSsiLCIrSlNPTi5zdHJpbmdpZnkobikrIiwkZXZlbnQua2V5LCIrSlNPTi5zdHJpbmdpZnkocikrIikifXZhciBJYT17b246ZnVuY3Rpb24oZSx0KXtlLndyYXBMaXN0ZW5lcnM9ZnVuY3Rpb24oZSl7cmV0dXJuIl9nKCIrZSsiLCIrdC52YWx1ZSsiKSJ9fSxiaW5kOmZ1bmN0aW9uKGUsdCl7ZS53cmFwRGF0YT1mdW5jdGlvbihuKXtyZXR1cm4iX2IoIituKyIsJyIrZS50YWcrIicsIit0LnZhbHVlKyIsIisodC5tb2RpZmllcnMmJnQubW9kaWZpZXJzLnByb3A/InRydWUiOiJmYWxzZSIpKyh0Lm1vZGlmaWVycyYmdC5tb2RpZmllcnMuc3luYz8iLHRydWUiOiIiKSsiKSJ9fSxjbG9hazpTfSxGYT1mdW5jdGlvbihlKXt0aGlzLm9wdGlvbnM9ZSx0aGlzLndhcm49ZS53YXJufHxTcix0aGlzLnRyYW5zZm9ybXM9VHIoZS5tb2R1bGVzLCJ0cmFuc2Zvcm1Db2RlIiksdGhpcy5kYXRhR2VuRm5zPVRyKGUubW9kdWxlcywiZ2VuRGF0YSIpLHRoaXMuZGlyZWN0aXZlcz1BKEEoe30sSWEpLGUuZGlyZWN0aXZlcyk7dmFyIHQ9ZS5pc1Jlc2VydmVkVGFnfHxUO3RoaXMubWF5YmVDb21wb25lbnQ9ZnVuY3Rpb24oZSl7cmV0dXJuISFlLmNvbXBvbmVudHx8IXQoZS50YWcpfSx0aGlzLm9uY2VJZD0wLHRoaXMuc3RhdGljUmVuZGVyRm5zPVtdLHRoaXMucHJlPSExfTtmdW5jdGlvbiBQYShlLHQpe3ZhciBuPW5ldyBGYSh0KTtyZXR1cm57cmVuZGVyOiJ3aXRoKHRoaXMpe3JldHVybiAiKyhlP1JhKGUsbik6J19jKCJkaXYiKScpKyJ9IixzdGF0aWNSZW5kZXJGbnM6bi5zdGF0aWNSZW5kZXJGbnN9fWZ1bmN0aW9uIFJhKGUsdCl7aWYoZS5wYXJlbnQmJihlLnByZT1lLnByZXx8ZS5wYXJlbnQucHJlKSxlLnN0YXRpY1Jvb3QmJiFlLnN0YXRpY1Byb2Nlc3NlZClyZXR1cm4gSGEoZSx0KTtpZihlLm9uY2UmJiFlLm9uY2VQcm9jZXNzZWQpcmV0dXJuIEJhKGUsdCk7aWYoZS5mb3ImJiFlLmZvclByb2Nlc3NlZClyZXR1cm4gemEoZSx0KTtpZihlLmlmJiYhZS5pZlByb2Nlc3NlZClyZXR1cm4gVWEoZSx0KTtpZigidGVtcGxhdGUiIT09ZS50YWd8fGUuc2xvdFRhcmdldHx8dC5wcmUpe2lmKCJzbG90Ij09PWUudGFnKXJldHVybiBmdW5jdGlvbihlLHQpe3ZhciBuPWUuc2xvdE5hbWV8fCciZGVmYXVsdCInLHI9cWEoZSx0KSxpPSJfdCgiK24rKHI/IiwiK3I6IiIpLG89ZS5hdHRyc3x8ZS5keW5hbWljQXR0cnM/R2EoKGUuYXR0cnN8fFtdKS5jb25jYXQoZS5keW5hbWljQXR0cnN8fFtdKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJue25hbWU6YihlLm5hbWUpLHZhbHVlOmUudmFsdWUsZHluYW1pYzplLmR5bmFtaWN9fSkpOm51bGwsYT1lLmF0dHJzTWFwWyJ2LWJpbmQiXTshbyYmIWF8fHJ8fChpKz0iLG51bGwiKTtvJiYoaSs9IiwiK28pO2EmJihpKz0obz8iIjoiLG51bGwiKSsiLCIrYSk7cmV0dXJuIGkrIikifShlLHQpO3ZhciBuO2lmKGUuY29tcG9uZW50KW49ZnVuY3Rpb24oZSx0LG4pe3ZhciByPXQuaW5saW5lVGVtcGxhdGU/bnVsbDpxYSh0LG4sITApO3JldHVybiJfYygiK2UrIiwiK1ZhKHQsbikrKHI/IiwiK3I6IiIpKyIpIn0oZS5jb21wb25lbnQsZSx0KTtlbHNle3ZhciByOyghZS5wbGFpbnx8ZS5wcmUmJnQubWF5YmVDb21wb25lbnQoZSkpJiYocj1WYShlLHQpKTt2YXIgaT1lLmlubGluZVRlbXBsYXRlP251bGw6cWEoZSx0LCEwKTtuPSJfYygnIitlLnRhZysiJyIrKHI/IiwiK3I6IiIpKyhpPyIsIitpOiIiKSsiKSJ9Zm9yKHZhciBvPTA7bzx0LnRyYW5zZm9ybXMubGVuZ3RoO28rKyluPXQudHJhbnNmb3Jtc1tvXShlLG4pO3JldHVybiBufXJldHVybiBxYShlLHQpfHwidm9pZCAwIn1mdW5jdGlvbiBIYShlLHQpe2Uuc3RhdGljUHJvY2Vzc2VkPSEwO3ZhciBuPXQucHJlO3JldHVybiBlLnByZSYmKHQucHJlPWUucHJlKSx0LnN0YXRpY1JlbmRlckZucy5wdXNoKCJ3aXRoKHRoaXMpe3JldHVybiAiK1JhKGUsdCkrIn0iKSx0LnByZT1uLCJfbSgiKyh0LnN0YXRpY1JlbmRlckZucy5sZW5ndGgtMSkrKGUuc3RhdGljSW5Gb3I/Iix0cnVlIjoiIikrIikifWZ1bmN0aW9uIEJhKGUsdCl7aWYoZS5vbmNlUHJvY2Vzc2VkPSEwLGUuaWYmJiFlLmlmUHJvY2Vzc2VkKXJldHVybiBVYShlLHQpO2lmKGUuc3RhdGljSW5Gb3Ipe2Zvcih2YXIgbj0iIixyPWUucGFyZW50O3I7KXtpZihyLmZvcil7bj1yLmtleTticmVha31yPXIucGFyZW50fXJldHVybiBuPyJfbygiK1JhKGUsdCkrIiwiK3Qub25jZUlkKysrIiwiK24rIikiOlJhKGUsdCl9cmV0dXJuIEhhKGUsdCl9ZnVuY3Rpb24gVWEoZSx0LG4scil7cmV0dXJuIGUuaWZQcm9jZXNzZWQ9ITAsZnVuY3Rpb24gZSh0LG4scixpKXtpZighdC5sZW5ndGgpcmV0dXJuIGl8fCJfZSgpIjt2YXIgbz10LnNoaWZ0KCk7cmV0dXJuIG8uZXhwPyIoIitvLmV4cCsiKT8iK2Eoby5ibG9jaykrIjoiK2UodCxuLHIsaSk6IiIrYShvLmJsb2NrKTtmdW5jdGlvbiBhKGUpe3JldHVybiByP3IoZSxuKTplLm9uY2U/QmEoZSxuKTpSYShlLG4pfX0oZS5pZkNvbmRpdGlvbnMuc2xpY2UoKSx0LG4scil9ZnVuY3Rpb24gemEoZSx0LG4scil7dmFyIGk9ZS5mb3Isbz1lLmFsaWFzLGE9ZS5pdGVyYXRvcjE/IiwiK2UuaXRlcmF0b3IxOiIiLHM9ZS5pdGVyYXRvcjI/IiwiK2UuaXRlcmF0b3IyOiIiO3JldHVybiBlLmZvclByb2Nlc3NlZD0hMCwocnx8Il9sIikrIigoIitpKyIpLGZ1bmN0aW9uKCIrbythK3MrIil7cmV0dXJuICIrKG58fFJhKShlLHQpKyJ9KSJ9ZnVuY3Rpb24gVmEoZSx0KXt2YXIgbj0ieyIscj1mdW5jdGlvbihlLHQpe3ZhciBuPWUuZGlyZWN0aXZlcztpZighbilyZXR1cm47dmFyIHIsaSxvLGEscz0iZGlyZWN0aXZlczpbIixjPSExO2ZvcihyPTAsaT1uLmxlbmd0aDtyPGk7cisrKXtvPW5bcl0sYT0hMDt2YXIgdT10LmRpcmVjdGl2ZXNbby5uYW1lXTt1JiYoYT0hIXUoZSxvLHQud2FybikpLGEmJihjPSEwLHMrPSd7bmFtZToiJytvLm5hbWUrJyIscmF3TmFtZToiJytvLnJhd05hbWUrJyInKyhvLnZhbHVlPyIsdmFsdWU6KCIrby52YWx1ZSsiKSxleHByZXNzaW9uOiIrSlNPTi5zdHJpbmdpZnkoby52YWx1ZSk6IiIpKyhvLmFyZz8iLGFyZzoiKyhvLmlzRHluYW1pY0FyZz9vLmFyZzonIicrby5hcmcrJyInKToiIikrKG8ubW9kaWZpZXJzPyIsbW9kaWZpZXJzOiIrSlNPTi5zdHJpbmdpZnkoby5tb2RpZmllcnMpOiIiKSsifSwiKX1pZihjKXJldHVybiBzLnNsaWNlKDAsLTEpKyJdIn0oZSx0KTtyJiYobis9cisiLCIpLGUua2V5JiYobis9ImtleToiK2Uua2V5KyIsIiksZS5yZWYmJihuKz0icmVmOiIrZS5yZWYrIiwiKSxlLnJlZkluRm9yJiYobis9InJlZkluRm9yOnRydWUsIiksZS5wcmUmJihuKz0icHJlOnRydWUsIiksZS5jb21wb25lbnQmJihuKz0ndGFnOiInK2UudGFnKyciLCcpO2Zvcih2YXIgaT0wO2k8dC5kYXRhR2VuRm5zLmxlbmd0aDtpKyspbis9dC5kYXRhR2VuRm5zW2ldKGUpO2lmKGUuYXR0cnMmJihuKz0iYXR0cnM6IitHYShlLmF0dHJzKSsiLCIpLGUucHJvcHMmJihuKz0iZG9tUHJvcHM6IitHYShlLnByb3BzKSsiLCIpLGUuZXZlbnRzJiYobis9RGEoZS5ldmVudHMsITEpKyIsIiksZS5uYXRpdmVFdmVudHMmJihuKz1EYShlLm5hdGl2ZUV2ZW50cywhMCkrIiwiKSxlLnNsb3RUYXJnZXQmJiFlLnNsb3RTY29wZSYmKG4rPSJzbG90OiIrZS5zbG90VGFyZ2V0KyIsIiksZS5zY29wZWRTbG90cyYmKG4rPWZ1bmN0aW9uKGUsdCxuKXt2YXIgcj1lLmZvcnx8T2JqZWN0LmtleXModCkuc29tZShmdW5jdGlvbihlKXt2YXIgbj10W2VdO3JldHVybiBuLnNsb3RUYXJnZXREeW5hbWljfHxuLmlmfHxuLmZvcnx8S2Eobil9KSxpPSEhZS5pZjtpZighcilmb3IodmFyIG89ZS5wYXJlbnQ7bzspe2lmKG8uc2xvdFNjb3BlJiZvLnNsb3RTY29wZSE9PWNhfHxvLmZvcil7cj0hMDticmVha31vLmlmJiYoaT0hMCksbz1vLnBhcmVudH12YXIgYT1PYmplY3Qua2V5cyh0KS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIEphKHRbZV0sbil9KS5qb2luKCIsIik7cmV0dXJuInNjb3BlZFNsb3RzOl91KFsiK2ErIl0iKyhyPyIsbnVsbCx0cnVlIjoiIikrKCFyJiZpPyIsbnVsbCxmYWxzZSwiK2Z1bmN0aW9uKGUpe3ZhciB0PTUzODEsbj1lLmxlbmd0aDtmb3IoO247KXQ9MzMqdF5lLmNoYXJDb2RlQXQoLS1uKTtyZXR1cm4gdD4+PjB9KGEpOiIiKSsiKSJ9KGUsZS5zY29wZWRTbG90cyx0KSsiLCIpLGUubW9kZWwmJihuKz0ibW9kZWw6e3ZhbHVlOiIrZS5tb2RlbC52YWx1ZSsiLGNhbGxiYWNrOiIrZS5tb2RlbC5jYWxsYmFjaysiLGV4cHJlc3Npb246IitlLm1vZGVsLmV4cHJlc3Npb24rIn0sIiksZS5pbmxpbmVUZW1wbGF0ZSl7dmFyIG89ZnVuY3Rpb24oZSx0KXt2YXIgbj1lLmNoaWxkcmVuWzBdO2lmKG4mJjE9PT1uLnR5cGUpe3ZhciByPVBhKG4sdC5vcHRpb25zKTtyZXR1cm4iaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpeyIrci5yZW5kZXIrIn0sc3RhdGljUmVuZGVyRm5zOlsiK3Iuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbihlKXtyZXR1cm4iZnVuY3Rpb24oKXsiK2UrIn0ifSkuam9pbigiLCIpKyJdfSJ9fShlLHQpO28mJihuKz1vKyIsIil9cmV0dXJuIG49bi5yZXBsYWNlKC8sJC8sIiIpKyJ9IixlLmR5bmFtaWNBdHRycyYmKG49Il9iKCIrbisnLCInK2UudGFnKyciLCcrR2EoZS5keW5hbWljQXR0cnMpKyIpIiksZS53cmFwRGF0YSYmKG49ZS53cmFwRGF0YShuKSksZS53cmFwTGlzdGVuZXJzJiYobj1lLndyYXBMaXN0ZW5lcnMobikpLG59ZnVuY3Rpb24gS2EoZSl7cmV0dXJuIDE9PT1lLnR5cGUmJigic2xvdCI9PT1lLnRhZ3x8ZS5jaGlsZHJlbi5zb21lKEthKSl9ZnVuY3Rpb24gSmEoZSx0KXt2YXIgbj1lLmF0dHJzTWFwWyJzbG90LXNjb3BlIl07aWYoZS5pZiYmIWUuaWZQcm9jZXNzZWQmJiFuKXJldHVybiBVYShlLHQsSmEsIm51bGwiKTtpZihlLmZvciYmIWUuZm9yUHJvY2Vzc2VkKXJldHVybiB6YShlLHQsSmEpO3ZhciByPWUuc2xvdFNjb3BlPT09Y2E/IiI6U3RyaW5nKGUuc2xvdFNjb3BlKSxpPSJmdW5jdGlvbigiK3IrIil7cmV0dXJuICIrKCJ0ZW1wbGF0ZSI9PT1lLnRhZz9lLmlmJiZuPyIoIitlLmlmKyIpPyIrKHFhKGUsdCl8fCJ1bmRlZmluZWQiKSsiOnVuZGVmaW5lZCI6cWEoZSx0KXx8InVuZGVmaW5lZCI6UmEoZSx0KSkrIn0iLG89cj8iIjoiLHByb3h5OnRydWUiO3JldHVybiJ7a2V5OiIrKGUuc2xvdFRhcmdldHx8JyJkZWZhdWx0IicpKyIsZm46IitpK28rIn0ifWZ1bmN0aW9uIHFhKGUsdCxuLHIsaSl7dmFyIG89ZS5jaGlsZHJlbjtpZihvLmxlbmd0aCl7dmFyIGE9b1swXTtpZigxPT09by5sZW5ndGgmJmEuZm9yJiYidGVtcGxhdGUiIT09YS50YWcmJiJzbG90IiE9PWEudGFnKXt2YXIgcz1uP3QubWF5YmVDb21wb25lbnQoYSk/IiwxIjoiLDAiOiIiO3JldHVybiIiKyhyfHxSYSkoYSx0KStzfXZhciBjPW4/ZnVuY3Rpb24oZSx0KXtmb3IodmFyIG49MCxyPTA7cjxlLmxlbmd0aDtyKyspe3ZhciBpPWVbcl07aWYoMT09PWkudHlwZSl7aWYoV2EoaSl8fGkuaWZDb25kaXRpb25zJiZpLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uKGUpe3JldHVybiBXYShlLmJsb2NrKX0pKXtuPTI7YnJlYWt9KHQoaSl8fGkuaWZDb25kaXRpb25zJiZpLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uKGUpe3JldHVybiB0KGUuYmxvY2spfSkpJiYobj0xKX19cmV0dXJuIG59KG8sdC5tYXliZUNvbXBvbmVudCk6MCx1PWl8fFphO3JldHVybiJbIitvLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gdShlLHQpfSkuam9pbigiLCIpKyJdIisoYz8iLCIrYzoiIil9fWZ1bmN0aW9uIFdhKGUpe3JldHVybiB2b2lkIDAhPT1lLmZvcnx8InRlbXBsYXRlIj09PWUudGFnfHwic2xvdCI9PT1lLnRhZ31mdW5jdGlvbiBaYShlLHQpe3JldHVybiAxPT09ZS50eXBlP1JhKGUsdCk6Mz09PWUudHlwZSYmZS5pc0NvbW1lbnQ/KHI9ZSwiX2UoIitKU09OLnN0cmluZ2lmeShyLnRleHQpKyIpIik6Il92KCIrKDI9PT0obj1lKS50eXBlP24uZXhwcmVzc2lvbjpYYShKU09OLnN0cmluZ2lmeShuLnRleHQpKSkrIikiO3ZhciBuLHJ9ZnVuY3Rpb24gR2EoZSl7Zm9yKHZhciB0PSIiLG49IiIscj0wO3I8ZS5sZW5ndGg7cisrKXt2YXIgaT1lW3JdLG89WGEoaS52YWx1ZSk7aS5keW5hbWljP24rPWkubmFtZSsiLCIrbysiLCI6dCs9JyInK2kubmFtZSsnIjonK28rIiwifXJldHVybiB0PSJ7Iit0LnNsaWNlKDAsLTEpKyJ9IixuPyJfZCgiK3QrIixbIituLnNsaWNlKDAsLTEpKyJdKSI6dH1mdW5jdGlvbiBYYShlKXtyZXR1cm4gZS5yZXBsYWNlKC9cdTIwMjgvZywiXFx1MjAyOCIpLnJlcGxhY2UoL1x1MjAyOS9nLCJcXHUyMDI5Iil9bmV3IFJlZ0V4cCgiXFxiIisiZG8saWYsZm9yLGxldCxuZXcsdHJ5LHZhcixjYXNlLGVsc2Usd2l0aCxhd2FpdCxicmVhayxjYXRjaCxjbGFzcyxjb25zdCxzdXBlcix0aHJvdyx3aGlsZSx5aWVsZCxkZWxldGUsZXhwb3J0LGltcG9ydCxyZXR1cm4sc3dpdGNoLGRlZmF1bHQsZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cyIuc3BsaXQoIiwiKS5qb2luKCJcXGJ8XFxiIikrIlxcYiIpO2Z1bmN0aW9uIFlhKGUsdCl7dHJ5e3JldHVybiBuZXcgRnVuY3Rpb24oZSl9Y2F0Y2gobil7cmV0dXJuIHQucHVzaCh7ZXJyOm4sY29kZTplfSksU319ZnVuY3Rpb24gUWEoZSl7dmFyIHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtyZXR1cm4gZnVuY3Rpb24obixyLGkpeyhyPUEoe30scikpLndhcm47ZGVsZXRlIHIud2Fybjt2YXIgbz1yLmRlbGltaXRlcnM/U3RyaW5nKHIuZGVsaW1pdGVycykrbjpuO2lmKHRbb10pcmV0dXJuIHRbb107dmFyIGE9ZShuLHIpLHM9e30sYz1bXTtyZXR1cm4gcy5yZW5kZXI9WWEoYS5yZW5kZXIsYykscy5zdGF0aWNSZW5kZXJGbnM9YS5zdGF0aWNSZW5kZXJGbnMubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBZYShlLGMpfSksdFtvXT1zfX12YXIgZXMsdHMsbnM9KGVzPWZ1bmN0aW9uKGUsdCl7dmFyIG49bGEoZS50cmltKCksdCk7ITEhPT10Lm9wdGltaXplJiZrYShuLHQpO3ZhciByPVBhKG4sdCk7cmV0dXJue2FzdDpuLHJlbmRlcjpyLnJlbmRlcixzdGF0aWNSZW5kZXJGbnM6ci5zdGF0aWNSZW5kZXJGbnN9fSxmdW5jdGlvbihlKXtmdW5jdGlvbiB0KHQsbil7dmFyIHI9T2JqZWN0LmNyZWF0ZShlKSxpPVtdLG89W107aWYobilmb3IodmFyIGEgaW4gbi5tb2R1bGVzJiYoci5tb2R1bGVzPShlLm1vZHVsZXN8fFtdKS5jb25jYXQobi5tb2R1bGVzKSksbi5kaXJlY3RpdmVzJiYoci5kaXJlY3RpdmVzPUEoT2JqZWN0LmNyZWF0ZShlLmRpcmVjdGl2ZXN8fG51bGwpLG4uZGlyZWN0aXZlcykpLG4pIm1vZHVsZXMiIT09YSYmImRpcmVjdGl2ZXMiIT09YSYmKHJbYV09blthXSk7ci53YXJuPWZ1bmN0aW9uKGUsdCxuKXsobj9vOmkpLnB1c2goZSl9O3ZhciBzPWVzKHQudHJpbSgpLHIpO3JldHVybiBzLmVycm9ycz1pLHMudGlwcz1vLHN9cmV0dXJue2NvbXBpbGU6dCxjb21waWxlVG9GdW5jdGlvbnM6UWEodCl9fSkoQ2EpLHJzPShucy5jb21waWxlLG5zLmNvbXBpbGVUb0Z1bmN0aW9ucyk7ZnVuY3Rpb24gaXMoZSl7cmV0dXJuKHRzPXRzfHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKSkuaW5uZXJIVE1MPWU/JzxhIGhyZWY9IlxuIi8+JzonPGRpdiBhPSJcbiIvPicsdHMuaW5uZXJIVE1MLmluZGV4T2YoIiYjMTA7Iik+MH12YXIgb3M9ISF6JiZpcyghMSksYXM9ISF6JiZpcyghMCksc3M9ZyhmdW5jdGlvbihlKXt2YXIgdD1ZbihlKTtyZXR1cm4gdCYmdC5pbm5lckhUTUx9KSxjcz13bi5wcm90b3R5cGUuJG1vdW50O3JldHVybiB3bi5wcm90b3R5cGUuJG1vdW50PWZ1bmN0aW9uKGUsdCl7aWYoKGU9ZSYmWW4oZSkpPT09ZG9jdW1lbnQuYm9keXx8ZT09PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudClyZXR1cm4gdGhpczt2YXIgbj10aGlzLiRvcHRpb25zO2lmKCFuLnJlbmRlcil7dmFyIHI9bi50ZW1wbGF0ZTtpZihyKWlmKCJzdHJpbmciPT10eXBlb2YgcikiIyI9PT1yLmNoYXJBdCgwKSYmKHI9c3MocikpO2Vsc2V7aWYoIXIubm9kZVR5cGUpcmV0dXJuIHRoaXM7cj1yLmlubmVySFRNTH1lbHNlIGUmJihyPWZ1bmN0aW9uKGUpe2lmKGUub3V0ZXJIVE1MKXJldHVybiBlLm91dGVySFRNTDt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KCJkaXYiKTtyZXR1cm4gdC5hcHBlbmRDaGlsZChlLmNsb25lTm9kZSghMCkpLHQuaW5uZXJIVE1MfShlKSk7aWYocil7dmFyIGk9cnMocix7b3V0cHV0U291cmNlUmFuZ2U6ITEsc2hvdWxkRGVjb2RlTmV3bGluZXM6b3Msc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOmFzLGRlbGltaXRlcnM6bi5kZWxpbWl0ZXJzLGNvbW1lbnRzOm4uY29tbWVudHN9LHRoaXMpLG89aS5yZW5kZXIsYT1pLnN0YXRpY1JlbmRlckZucztuLnJlbmRlcj1vLG4uc3RhdGljUmVuZGVyRm5zPWF9fXJldHVybiBjcy5jYWxsKHRoaXMsZSx0KX0sd24uY29tcGlsZT1ycyx3bn0pOw=="},{"meta":{"name":"less.js","url":"https://cdn.jsdelivr.net/npm/less_browser_fix@4.1.2/dist/less.js","ts":1638677801329,"mimetype":"text/javascript"},"source":""}]}]}